[General]

# General settings for the compiler
#==================================================================
# Defines the data width of the .mif file entries. 8 by default. 
# WARNING: Changing this value will require editing the .mif's corresponding IP Core in Quartus Prime to match.
DataWidth=8

# Defines the data depth of the .mif file (i.e. how many instructions the .mif file will have). 256 by default. 
# WARNING: Changing this value will require editing the .mif's corresponding IP Core in Quartus Prime to match.
DataDepth=256

#Defines the Radix used to display addresses in Quartus Prime. Accepted values are; BIN, UNS, DEC, OCT, HEX. Set to UNS by default.
AddressRadix=UNS

# Defines the radix used to display data in Quartus Prime. Accepted values are; BIN, UNS, DEC, OCT, HEX. Set to BIN by default.
DataRadix=BIN

#==================================================================

[Instructions]

# Available OpCodes and rules for Instruction generation
#==================================================================

# Defines the direction to pad an Instruction should it fall short of DataWidth. Accepted values are; LEFT, RIGHT. Set to LEFT by default.
PaddingDir=LEFT

# Defines the type of padding to use should an instruction need padding. Accepted values are; PATTERN, ONES, ZEROS, SIGNED. Set to ZEROS by default.
PaddingType=ZEROS

# Defines the padding patter to use. Only used if PaddingType is PATTERN. Pattern must only contain 1 or 0. Set to 10 by default.
PaddingPattern=10

# Defines the available OpCodes for the compiler.
# WARNING: All OpCodes must have an identically named section or the compiler will fail.
OpCodes=BR,BRZ,ADDI,SUBI,SR0,SRH0,CLR,MOV,MOVA,MOVR,MOVRHS,PAUSE

#==================================================================

[BR]

# Details about the BR OpCode
#==================================================================

# Defines the bit order of the instruction as a list separated by commas, There can only be one OpCode and it must come first. 
# Accepted values are; O (for OpCode), I (for immediate constant), R (for general register), S (for source register), D (for destination register).
BitOrder=O,I

# Defines the width of the bits in the BitOrder list
# WARNING: Total instruction width CANNOT exceed DataWidth
BitWidth=3,5

# Defines the OpCode as a set of bits
# WARNING: The width of the Opcode must match the width defined in the BitWidth list
OpCode=100

# Defines whether or not the Immediate Constant, if any, in this instruction is signed
IsSigned=True

#==================================================================

[BRZ]

# Details about the BRZ OpCode
#==================================================================

# Defines the bit order of the instruction as a list separated by commas, There can only be one OpCode and it must come first. 
# Accepted values are; O (for OpCode), I (for immediate constant), R (for general register), S (for source register), D (for destination register).
BitOrder=O,I

# Defines the width of the bits in the BitOrder list
# WARNING: Total instruction width CANNOT exceed DataWidth
BitWidth=3,5

# Defines the OpCode as a set of bits
# WARNING: The width of the Opcode must match the width defined in the BitWidth list
OpCode=101

# Defines whether or not the Immediate Constant, if any, in this instruction is signed
IsSigned=True

#==================================================================

[ADDI]

# Details about the ADDI OpCode
#==================================================================

# Defines the bit order of the instruction as a list separated by commas, There can only be one OpCode and it must come first. 
# Accepted values are; O (for OpCode), I (for immediate constant), R (for general register), S (for source register), D (for destination register).
BitOrder=O,I,R

# Defines the width of the bits in the BitOrder list
# WARNING: Total instruction width CANNOT exceed DataWidth
BitWidth=3,3,2

# Defines the OpCode as a set of bits
# WARNING: The width of the Opcode must match the width defined in the BitWidth list
OpCode=000

# Defines whether or not the Immediate Constant, if any, in this instruction is signed
IsSigned=True

# Defines whether or not the compiler should enforce the order of the instruction after the OpCode
ForceOrder=False

#==================================================================

[SUBI]

# Details about the SUBI OpCode
#==================================================================

# Defines the bit order of the instruction as a list separated by commas, There can only be one OpCode and it must come first. 
# Accepted values are; O (for OpCode), I (for immediate constant), R (for general register), S (for source register), D (for destination register).
BitOrder=O,I,R

# Defines the width of the bits in the BitOrder list
# WARNING: Total instruction width CANNOT exceed DataWidth
BitWidth=3,3,2

# Defines the OpCode as a set of bits
# WARNING: The width of the Opcode must match the width defined in the BitWidth list
OpCode=001

# Defines whether or not the Immediate Constant, if any, in this instruction is signed
IsSigned=True

# Defines whether or not the compiler should enforce the order of the instruction after the OpCode
ForceOrder=False

#==================================================================

[SR0]

# Details about the SR0 OpCode
#==================================================================

# Defines the bit order of the instruction as a list separated by commas, There can only be one OpCode and it must come first. 
# Accepted values are; O (for OpCode), I (for immediate constant), R (for general register), S (for source register), D (for destination register).
BitOrder=O,I

# Defines the width of the bits in the BitOrder list
# WARNING: Total instruction width CANNOT exceed DataWidth
BitWidth=4,4

# Defines the OpCode as a set of bits
# WARNING: The width of the Opcode must match the width defined in the BitWidth list
OpCode=0100

# Defines whether or not the Immediate Constant, if any, in this instruction is signed
IsSigned=False

#==================================================================

[SRH0]

# Details about the SRH0 OpCode
#==================================================================

# Defines the bit order of the instruction as a list separated by commas, There can only be one OpCode and it must come first. 
# Accepted values are; O (for OpCode), I (for immediate constant), R (for general register), S (for source register), D (for destination register).
BitOrder=O,I

# Defines the width of the bits in the BitOrder list
# WARNING: Total instruction width CANNOT exceed DataWidth
BitWidth=4,4

# Defines the OpCode as a set of bits
# WARNING: The width of the Opcode must match the width defined in the BitWidth list
OpCode=0101

# Defines whether or not the Immediate Constant, if any, in this instruction is signed
IsSigned=False

#==================================================================

[CLR]

# Details about the CLR OpCode
#==================================================================

# Defines the bit order of the instruction as a list separated by commas, There can only be one OpCode and it must come first. 
# Accepted values are; O (for OpCode), I (for immediate constant), R (for general register), S (for source register), D (for destination register).
BitOrder=O,R

# Defines the width of the bits in the BitOrder list
# WARNING: Total instruction width CANNOT exceed DataWidth
BitWidth=6,2

# Defines the OpCode as a set of bits
# WARNING: The width of the Opcode must match the width defined in the BitWidth list
OpCode=011000

#==================================================================

[MOV]

# Details about the MOV OpCode
#==================================================================

# Defines the bit order of the instruction as a list separated by commas, There can only be one OpCode and it must come first. 
# Accepted values are; O (for OpCode), I (for immediate constant), R (for general register), S (for source register), D (for destination register).
BitOrder=O,D,S

# Defines the width of the bits in the BitOrder list
# WARNING: Total instruction width CANNOT exceed DataWidth
BitWidth=4,2,2

# Defines the OpCode as a set of bits
# WARNING: The width of the Opcode must match the width defined in the BitWidth list
OpCode=0111

# Defines whether or not the compiler should enforce the order of the instruction after the OpCode
ForceOrder=True

#==================================================================

[MOVA]

# Details about the MOVA OpCode
#==================================================================

# Defines the bit order of the instruction as a list separated by commas, There can only be one OpCode and it must come first. 
# Accepted values are; O (for OpCode), I (for immediate constant), R (for general register), S (for source register), D (for destination register).
BitOrder=O,R

# Defines the width of the bits in the BitOrder list
# WARNING: Total instruction width CANNOT exceed DataWidth
BitWidth=6,2

# Defines the OpCode as a set of bits
# WARNING: The width of the Opcode must match the width defined in the BitWidth list
OpCode=110000

#==================================================================

[MOVR]

# Details about the MOVR OpCode
#==================================================================

# Defines the bit order of the instruction as a list separated by commas, There can only be one OpCode and it must come first. 
# Accepted values are; O (for OpCode), I (for immediate constant), R (for general register), S (for source register), D (for destination register).
BitOrder=O,R

# Defines the width of the bits in the BitOrder list
# WARNING: Total instruction width CANNOT exceed DataWidth
BitWidth=6,2

# Defines the OpCode as a set of bits
# WARNING: The width of the Opcode must match the width defined in the BitWidth list
OpCode=110001

#==================================================================

[MOVRHS]

# Details about the MOVRHS OpCode
#==================================================================

# Defines the bit order of the instruction as a list separated by commas, There can only be one OpCode and it must come first. 
# Accepted values are; O (for OpCode), I (for immediate constant), R (for general register), S (for source register), D (for destination register).
BitOrder=O,R

# Defines the width of the bits in the BitOrder list
# WARNING: Total instruction width CANNOT exceed DataWidth
BitWidth=6,2

# Defines the OpCode as a set of bits
# WARNING: The width of the Opcode must match the width defined in the BitWidth list
OpCode=110010

#==================================================================

[PAUSE]

# Details about the PAUSE OpCode
#==================================================================
# Defines the bit order of the instruction as a list separated by commas, There can only be one OpCode and it must come first. 
# Accepted values are; O (for OpCode), I (for immediate constant), R (for general register), S (for source register), D (for destination register).
BitOrder=O

# Defines the width of the bits in the BitOrder list
# WARNING: Total instruction width CANNOT exceed DataWidth
BitWidth=8

# Defines the OpCode as a set of bits
# WARNING: The width of the Opcode must match the width defined in the BitWidth list
OpCode=11111111

#==================================================================