
memory_test.elf:     file format elf32-littlenios2
memory_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000f7d4 memsz 0x0000f7d4 flags r-x
    LOAD off    0x000107f4 vaddr 0x0000f7f4 paddr 0x000112e0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00012dcc vaddr 0x00012dcc paddr 0x00012dcc align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f1b0  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000484  0000f370  0000f370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0000f7f4  000112e0  000107f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  00012dcc  00012dcc  00012dcc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00012f28  00012f28  000122e0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000122e0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e70  00000000  00000000  00012308  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000230a4  00000000  00000000  00013178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008d9f  00000000  00000000  0003621c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b1ed  00000000  00000000  0003efbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001fc0  00000000  00000000  0004a1a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000032dc  00000000  00000000  0004c168  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  0004f444  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00066cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018a8  00000000  00000000  00066ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006b4d6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006b4d9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006b4e5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006b4e6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006b4e7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006b4f2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006b4fd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0006b508  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  0006b513  2**0
                  CONTENTS, READONLY
 26 .jdi          000048f3  00000000  00000000  0006b533  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00033eed  00000000  00000000  0006fe26  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
0000f370 l    d  .rodata	00000000 .rodata
0000f7f4 l    d  .rwdata	00000000 .rwdata
00012dcc l    d  .bss	00000000 .bss
00012f28 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../memory_test_bsp//obj/HAL/src/crt0.o
00000208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000f53a l     O .rodata	00000010 zeroes.4404
000029ec l     F .text	000000bc __sbprintf
0000f54a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002bfc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000472c l     F .text	00000008 __fp_unlock
00004740 l     F .text	0000019c __sinit.part.1
000048dc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000f7f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000fc38 l     O .rwdata	00000020 lc_ctype_charset
0000fc18 l     O .rwdata	00000020 lc_message_charset
0000fc58 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f57c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007cd8 l     F .text	000000fc __sprint_r.part.0
0000f6b0 l     O .rodata	00000010 blanks.4348
0000f6a0 l     O .rodata	00000010 zeroes.4349
00009264 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cd6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ce78 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000cea4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000cf90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d070 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d15c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d330 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000112d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d57c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d6b0 l     F .text	00000034 alt_dev_reg
00010240 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000d988 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000db94 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e340 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000e7b4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000e8f4 l     F .text	0000003c alt_get_errno
0000e930 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000731c g     F .text	00000074 _mprec_log10
00007408 g     F .text	0000008c __any_on
00009800 g     F .text	00000054 _isatty_r
0000f588 g     O .rodata	00000028 __mprec_tinytens
0000d26c g     F .text	0000007c alt_main
0000066c g     F .text	000000c0 _puts_r
00012e28 g     O .bss	00000100 alt_irq
00009854 g     F .text	00000060 _lseek_r
000112e0 g       *ABS*	00000000 __flash_rwdata_start
0000b898 g     F .text	00000088 .hidden __eqdf2
00012f28 g       *ABS*	00000000 __alt_heap_start
00000630 g     F .text	0000003c printf
00009a6c g     F .text	0000009c _wcrtomb_r
00007b98 g     F .text	0000005c __sseek
00004a7c g     F .text	00000010 __sinit
00009914 g     F .text	00000140 __swbuf_r
00005544 g     F .text	0000007c _setlocale_r
000048e4 g     F .text	00000068 __sfmoreglue
0000d30c g     F .text	00000024 __malloc_unlock
00006214 g     F .text	0000015c memmove
00004a64 g     F .text	00000018 _cleanup
00006498 g     F .text	000000a8 _Balloc
0000b920 g     F .text	000000dc .hidden __gtdf2
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000097a4 g     F .text	0000005c _fstat_r
00012de4 g     O .bss	00000004 errno
00007b14 g     F .text	00000008 __seofread
00012dec g     O .bss	00000004 alt_argv
000192a0 g       *ABS*	00000000 _gp
000100c0 g     O .rwdata	00000180 alt_fd_list
0000ed10 g     F .text	00000090 alt_find_dev
000060cc g     F .text	00000148 memcpy
00004734 g     F .text	0000000c _cleanup_r
0000cb84 g     F .text	000000dc .hidden __floatsidf
0000e878 g     F .text	0000007c alt_io_redirect
0000b9fc g     F .text	000000f4 .hidden __ltdf2
0000f370 g       *ABS*	00000000 __DTOR_END__
0000072c g     F .text	00000014 puts
000079f8 g     F .text	00000074 __fpclassifyd
00007278 g     F .text	000000a4 __ratio
00009248 g     F .text	0000001c __vfiprintf_internal
0000dd8c g     F .text	0000021c altera_avalon_jtag_uart_read
00000600 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000544 g     F .text	00000064 .hidden __udivsi3
0000cfcc g     F .text	000000a4 isatty
0000f5d8 g     O .rodata	000000c8 __mprec_tens
000055c0 g     F .text	0000000c __locale_charset
0000ef4c g     F .text	00000090 alt_icache_flush
00012de0 g     O .bss	00000004 __malloc_top_pad
000112a8 g     O .rwdata	00000004 __mb_cur_max
000055f0 g     F .text	0000000c _localeconv_r
000068a4 g     F .text	0000003c __i2b
00004f00 g     F .text	000004bc __sfvwrite_r
00007a6c g     F .text	00000054 _sbrk_r
000098b4 g     F .text	00000060 _read_r
000112c8 g     O .rwdata	00000004 alt_max_fd
00009498 g     F .text	000000f0 _fclose_r
000046fc g     F .text	00000030 fflush
00012ddc g     O .bss	00000004 __malloc_max_sbrked_mem
0000a704 g     F .text	000008ac .hidden __adddf3
00007020 g     F .text	0000010c __b2d
0000a1cc g     F .text	00000538 .hidden __umoddi3
0000d198 g     F .text	000000d4 lseek
000112a0 g     O .rwdata	00000004 _global_impure_ptr
00007494 g     F .text	00000564 _realloc_r
00012f28 g       *ABS*	00000000 __bss_end
0000e6c4 g     F .text	000000f0 alt_iic_isr_register
0000ebe4 g     F .text	00000108 alt_tick
00009c54 g     F .text	00000578 .hidden __udivdi3
00009700 g     F .text	00000024 _fputwc_r
0000f5b0 g     O .rodata	00000028 __mprec_bigtens
00006688 g     F .text	00000104 __s2b
0000cc60 g     F .text	000000a8 .hidden __floatunsidf
00006d60 g     F .text	00000060 __mcmp
00004a9c g     F .text	00000018 __fp_lock_all
0000e678 g     F .text	0000004c alt_ic_irq_enabled
0000eb48 g     F .text	0000009c alt_alarm_stop
00012df4 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d4 alt_irq_handler
00010098 g     O .rwdata	00000028 alt_dev_null
0000e2f8 g     F .text	00000048 alt_dcache_flush_all
0000678c g     F .text	00000068 __hi0bits
0000cb04 g     F .text	00000080 .hidden __fixdfsi
000112e0 g       *ABS*	00000000 __ram_rwdata_end
000112c0 g     O .rwdata	00000008 alt_dev_list
0000d5b8 g     F .text	000000f8 write
0000f7f4 g       *ABS*	00000000 __ram_rodata_end
0000cee0 g     F .text	000000b0 fstat
0000b9fc g     F .text	000000f4 .hidden __ledf2
00006ad8 g     F .text	00000140 __pow5mult
00007dec g     F .text	0000145c ___vfiprintf_internal_r
00012dd4 g     O .bss	00000004 __nlocale_changed
000005a8 g     F .text	00000058 .hidden __umodsi3
00012f28 g       *ABS*	00000000 end
0000d8c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000f370 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
0000cd08 g     F .text	00000064 .hidden __clzsi2
0000dfa8 g     F .text	00000224 altera_avalon_jtag_uart_write
00004a8c g     F .text	00000004 __sfp_lock_acquire
00005fe8 g     F .text	000000e4 memchr
000007d8 g     F .text	000021f8 ___vfprintf_internal_r
00004bf0 g     F .text	00000310 _free_r
000055cc g     F .text	00000010 __locale_mb_cur_max
0000f1bc g     F .text	00000180 __call_exitprocs
00012dd0 g     O .bss	00000004 __mlocale_changed
000112ac g     O .rwdata	00000004 __malloc_sbrk_base
000001c0 g     F .text	0000004c _start
00012df8 g     O .bss	00000004 _alt_tick_rate
00006c18 g     F .text	00000148 __lshift
00012dfc g     O .bss	00000004 _alt_nticks
0000d36c g     F .text	000000fc read
0000d71c g     F .text	00000048 alt_sys_init
0000f0a4 g     F .text	00000118 __register_exitproc
000068e0 g     F .text	000001f8 __multiply
0000dc34 g     F .text	00000068 altera_avalon_jtag_uart_close
0000f7f4 g       *ABS*	00000000 __ram_rwdata_start
0000f370 g       *ABS*	00000000 __ram_rodata_start
00012e00 g     O .bss	00000028 __malloc_current_mallinfo
0000712c g     F .text	0000014c __d2b
0000d764 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000eea8 g     F .text	000000a4 alt_get_fd
00009380 g     F .text	00000054 _close_r
0000f028 g     F .text	0000007c memcmp
0000d824 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00012f28 g       *ABS*	00000000 __alt_stack_base
0000d874 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002aa8 g     F .text	00000154 __swsetup_r
0000afb0 g     F .text	000008e8 .hidden __divdf3
0000494c g     F .text	00000118 __sfp
00007390 g     F .text	00000078 __copybits
0000fc90 g     O .rwdata	00000408 __malloc_av_
00004a98 g     F .text	00000004 __sinit_lock_release
0000baf0 g     F .text	00000718 .hidden __muldf3
00007ac0 g     F .text	00000054 __sread
0000eda0 g     F .text	00000108 alt_find_file
0000e37c g     F .text	000000a4 alt_dev_llist_insert
0000d2e8 g     F .text	00000024 __malloc_lock
0000d4cc g     F .text	000000b0 sbrk
000046a0 g     F .text	0000005c _fflush_r
000093d4 g     F .text	000000c4 _calloc_r
00012dcc g       *ABS*	00000000 __bss_start
00006370 g     F .text	00000128 memset
0000020c g     F .text	00000240 main
00012df0 g     O .bss	00000004 alt_envp
00012dd8 g     O .bss	00000004 __malloc_max_total_mem
0000d7c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009a54 g     F .text	00000018 __swbuf
00007bf4 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00009588 g     F .text	00000014 fclose
00002dfc g     F .text	00001688 _dtoa_r
000057dc g     F .text	0000080c _malloc_r
00009bc8 g     F .text	00000030 __ascii_wctomb
000112cc g     O .rwdata	00000004 alt_errno
000053bc g     F .text	000000c4 _fwalk
0000044c g     F .text	00000084 .hidden __divsi3
00004acc g     F .text	00000124 _malloc_trim_r
0000f370 g       *ABS*	00000000 __CTOR_END__
00007bfc g     F .text	000000dc strcmp
0000f370 g       *ABS*	00000000 __flash_rodata_start
0000f370 g       *ABS*	00000000 __DTOR_LIST__
0000b898 g     F .text	00000088 .hidden __nedf2
0000d6e4 g     F .text	00000038 alt_irq_init
0000d468 g     F .text	00000064 alt_release_fd
0000f6c0 g     O .rodata	00000100 .hidden __clz_tab
00012dcc g     O .bss	00000004 _PathLocale
0000efdc g     F .text	00000014 atexit
00009320 g     F .text	00000060 _write_r
000055fc g     F .text	00000018 setlocale
000112a4 g     O .rwdata	00000004 _impure_ptr
00012de8 g     O .bss	00000004 alt_argc
00004484 g     F .text	0000021c __sflush_r
0000e480 g     F .text	00000060 _do_dtors
000055e8 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006fbc g     F .text	00000064 __ulp
00004ab4 g     F .text	00000018 __fp_unlock_all
000112b8 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005614 g     F .text	0000000c localeconv
0000e514 g     F .text	00000050 alt_ic_isr_register
000112e0 g       *ABS*	00000000 _edata
00012f28 g       *ABS*	00000000 _end
0000959c g     F .text	00000164 __fputwc
000001c0 g       *ABS*	00000000 __ram_exceptions_end
0000dc9c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000e5ec g     F .text	0000008c alt_ic_irq_disable
00007b1c g     F .text	0000007c __swrite
000112b0 g     O .rwdata	00000004 __malloc_trim_threshold
0000ecec g     F .text	00000024 altera_nios2_qsys_irq_init
000055dc g     F .text	0000000c __locale_msgcharset
0000eff0 g     F .text	00000038 exit
00005480 g     F .text	000000c4 _fwalk_reent
00006dc0 g     F .text	000001fc __mdiff
000004d0 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004a90 g     F .text	00000004 __sfp_lock_release
0000f33c g     F .text	00000034 _exit
0000e1cc g     F .text	0000012c alt_alarm_start
00005620 g     F .text	000001bc __smakebuf_r
00000740 g     F .text	00000098 strlen
0000e9f4 g     F .text	00000154 open
0000b920 g     F .text	000000dc .hidden __gedf2
000112b4 g     O .rwdata	00000004 __wctomb
00007dd4 g     F .text	00000018 __sprint_r
0000e4e0 g     F .text	00000034 alt_icache_flush_all
000112d4 g     O .rwdata	00000004 alt_priority_mask
0000e564 g     F .text	00000088 alt_ic_irq_enable
000029d0 g     F .text	0000001c __vfprintf_internal
00009bf8 g     F .text	0000005c _wctomb_r
0000c208 g     F .text	000008fc .hidden __subdf3
000067f4 g     F .text	000000b0 __lo0bits
000112d8 g     O .rwdata	00000008 alt_alarm_list
0000e420 g     F .text	00000060 _do_ctors
00009b08 g     F .text	000000c0 wcrtomb
0000cda8 g     F .text	000000d0 close
0000d0d8 g     F .text	00000084 alt_load
00009724 g     F .text	00000080 fputwc
00004a94 g     F .text	00000004 __sinit_lock_acquire
00006568 g     F .text	00000120 __multadd
00006540 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08407014 	ori	at,at,448
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	108b8a04 	addi	r2,r2,11816
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	108b8a04 	addi	r2,r2,11816
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_data_end+0xfffe011c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_data_end+0xfffe0110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	0001883a 	nop
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1cc:	00bffd16 	blt	zero,r2,1c4 <__alt_data_end+0xfffe01c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1d0:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     1d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1d8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1dc:	d6a4a814 	ori	gp,gp,37536
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1e0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e4:	108b7314 	ori	r2,r2,11724

    movhi r3, %hi(__bss_end)
     1e8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1ec:	18cbca14 	ori	r3,r3,12072

    beq r2, r3, 1f
     1f0:	10c00326 	beq	r2,r3,200 <_start+0x40>

0:
    stw zero, (r2)
     1f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1fc:	10fffd36 	bltu	r2,r3,1f4 <__alt_data_end+0xfffe01f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     200:	000d0d80 	call	d0d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     204:	000d26c0 	call	d26c <alt_main>

00000208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     208:	003fff06 	br	208 <__alt_data_end+0xfffe0208>

0000020c <main>:
#define BASE SDRAM_CONTROLLER_0_BASE

#define MAXNUM_WORDS   SDRAM_CONTROLLER_0_SPAN/2

int main()
{
     20c:	defff604 	addi	sp,sp,-40
     210:	dfc00915 	stw	ra,36(sp)
     214:	df000815 	stw	fp,32(sp)
     218:	dc000715 	stw	r16,28(sp)
     21c:	df000804 	addi	fp,sp,32
  printf("Hello from MT-3TB4 Group 5\n");
     220:	01000074 	movhi	r4,1
     224:	213cdc04 	addi	r4,r4,-3216
     228:	000072c0 	call	72c <puts>

  int i;
  int char_err_num=0, short_err_num=0, int_err_num=0;
     22c:	e03ff915 	stw	zero,-28(fp)
     230:	e03ffa15 	stw	zero,-24(fp)
     234:	e03ffb15 	stw	zero,-20(fp)
  int *int_ptr;
  int aInt;

  int charsize, shortsize, intsize;

  charsize=sizeof(aChar);
     238:	00800044 	movi	r2,1
     23c:	e0bffc15 	stw	r2,-16(fp)
  shortsize=sizeof(aShort);
     240:	00800084 	movi	r2,2
     244:	e0bffd15 	stw	r2,-12(fp)
  intsize=sizeof(aInt);
     248:	00800104 	movi	r2,4
     24c:	e0bffe15 	stw	r2,-8(fp)
  printf("the size of char, short, int are: %d, %d, %d\n", charsize, shortsize, intsize);
     250:	e1fffe17 	ldw	r7,-8(fp)
     254:	e1bffd17 	ldw	r6,-12(fp)
     258:	e17ffc17 	ldw	r5,-16(fp)
     25c:	01000074 	movhi	r4,1
     260:	213ce304 	addi	r4,r4,-3188
     264:	00006300 	call	630 <printf>

  //----------------TEST CHAR-----------------------------------

  printf("\n writing chars.....\n");
     268:	01000074 	movhi	r4,1
     26c:	213cef04 	addi	r4,r4,-3140
     270:	000072c0 	call	72c <puts>
  for (i=0; i<MAXNUM_WORDS*2; i++) {
     274:	e03ff815 	stw	zero,-32(fp)
     278:	00001106 	br	2c0 <main+0xb4>
	  *(char*)(BASE+i)=i%128; // to be safe, use 128 rather than 256
     27c:	e0fff817 	ldw	r3,-32(fp)
     280:	00810034 	movhi	r2,1024
     284:	1885883a 	add	r2,r3,r2
     288:	1009883a 	mov	r4,r2
     28c:	e0fff817 	ldw	r3,-32(fp)
     290:	00a00034 	movhi	r2,32768
     294:	10801fc4 	addi	r2,r2,127
     298:	1884703a 	and	r2,r3,r2
     29c:	1000040e 	bge	r2,zero,2b0 <main+0xa4>
     2a0:	10bfffc4 	addi	r2,r2,-1
     2a4:	00ffe004 	movi	r3,-128
     2a8:	10c4b03a 	or	r2,r2,r3
     2ac:	10800044 	addi	r2,r2,1
     2b0:	20800005 	stb	r2,0(r4)
  printf("the size of char, short, int are: %d, %d, %d\n", charsize, shortsize, intsize);

  //----------------TEST CHAR-----------------------------------

  printf("\n writing chars.....\n");
  for (i=0; i<MAXNUM_WORDS*2; i++) {
     2b4:	e0bff817 	ldw	r2,-32(fp)
     2b8:	10800044 	addi	r2,r2,1
     2bc:	e0bff815 	stw	r2,-32(fp)
     2c0:	e0fff817 	ldw	r3,-32(fp)
     2c4:	00810034 	movhi	r2,1024
     2c8:	18bfec16 	blt	r3,r2,27c <__alt_data_end+0xfffe027c>
	  *(char*)(BASE+i)=i%128; // to be safe, use 128 rather than 256
  	  }

  printf("\n testing chars.....\n");
     2cc:	01000074 	movhi	r4,1
     2d0:	213cf504 	addi	r4,r4,-3116
     2d4:	000072c0 	call	72c <puts>
  for (i=0; i<MAXNUM_WORDS*2; i++) {
     2d8:	e03ff815 	stw	zero,-32(fp)
     2dc:	00001706 	br	33c <main+0x130>
	  if (* (char*)(BASE+i)!=i%128){  // or .....(char)i,   if not i%128
     2e0:	e0fff817 	ldw	r3,-32(fp)
     2e4:	00810034 	movhi	r2,1024
     2e8:	1885883a 	add	r2,r3,r2
     2ec:	10800003 	ldbu	r2,0(r2)
     2f0:	10c03fcc 	andi	r3,r2,255
     2f4:	18c0201c 	xori	r3,r3,128
     2f8:	18ffe004 	addi	r3,r3,-128
     2fc:	e13ff817 	ldw	r4,-32(fp)
     300:	00a00034 	movhi	r2,32768
     304:	10801fc4 	addi	r2,r2,127
     308:	2084703a 	and	r2,r4,r2
     30c:	1000040e 	bge	r2,zero,320 <main+0x114>
     310:	10bfffc4 	addi	r2,r2,-1
     314:	013fe004 	movi	r4,-128
     318:	1104b03a 	or	r2,r2,r4
     31c:	10800044 	addi	r2,r2,1
     320:	18800326 	beq	r3,r2,330 <main+0x124>
		  char_err_num++;
     324:	e0bff917 	ldw	r2,-28(fp)
     328:	10800044 	addi	r2,r2,1
     32c:	e0bff915 	stw	r2,-28(fp)
  for (i=0; i<MAXNUM_WORDS*2; i++) {
	  *(char*)(BASE+i)=i%128; // to be safe, use 128 rather than 256
  	  }

  printf("\n testing chars.....\n");
  for (i=0; i<MAXNUM_WORDS*2; i++) {
     330:	e0bff817 	ldw	r2,-32(fp)
     334:	10800044 	addi	r2,r2,1
     338:	e0bff815 	stw	r2,-32(fp)
     33c:	e0fff817 	ldw	r3,-32(fp)
     340:	00810034 	movhi	r2,1024
     344:	18bfe616 	blt	r3,r2,2e0 <__alt_data_end+0xfffe02e0>
	  if (* (char*)(BASE+i)!=i%128){  // or .....(char)i,   if not i%128
		  char_err_num++;
	  }
  }

  printf("Testing  Char: the total numbers of error is : %i\n" ,char_err_num);
     348:	e17ff917 	ldw	r5,-28(fp)
     34c:	01000074 	movhi	r4,1
     350:	213cfb04 	addi	r4,r4,-3092
     354:	00006300 	call	630 <printf>

       //----------------TEST SHORT-----------------------------------

  printf(" \n writing short......\n");
     358:	01000074 	movhi	r4,1
     35c:	213d0804 	addi	r4,r4,-3040
     360:	000072c0 	call	72c <puts>
  for (i=0; i<MAXNUM_WORDS; i++) {
     364:	e03ff815 	stw	zero,-32(fp)
     368:	00000d06 	br	3a0 <main+0x194>
           //for (i=0; i<32767; i++) {
	  *(short*)(BASE+i*2)=i%32767; // short, uses two bytes
     36c:	e0fff817 	ldw	r3,-32(fp)
     370:	00808034 	movhi	r2,512
     374:	1885883a 	add	r2,r3,r2
     378:	1085883a 	add	r2,r2,r2
     37c:	1021883a 	mov	r16,r2
     380:	e0bff817 	ldw	r2,-32(fp)
     384:	015fffc4 	movi	r5,32767
     388:	1009883a 	mov	r4,r2
     38c:	00004d00 	call	4d0 <__modsi3>
     390:	8080000d 	sth	r2,0(r16)
  printf("Testing  Char: the total numbers of error is : %i\n" ,char_err_num);

       //----------------TEST SHORT-----------------------------------

  printf(" \n writing short......\n");
  for (i=0; i<MAXNUM_WORDS; i++) {
     394:	e0bff817 	ldw	r2,-32(fp)
     398:	10800044 	addi	r2,r2,1
     39c:	e0bff815 	stw	r2,-32(fp)
     3a0:	e0fff817 	ldw	r3,-32(fp)
     3a4:	00808034 	movhi	r2,512
     3a8:	18bff016 	blt	r3,r2,36c <__alt_data_end+0xfffe036c>
           //for (i=0; i<32767; i++) {
	  *(short*)(BASE+i*2)=i%32767; // short, uses two bytes
  }
  printf(" \n testing short......\n");
     3ac:	01000074 	movhi	r4,1
     3b0:	213d0e04 	addi	r4,r4,-3016
     3b4:	000072c0 	call	72c <puts>


  printf("Testing Short: the total numbers of error is : %i\n" ,short_err_num);
     3b8:	e17ffa17 	ldw	r5,-24(fp)
     3bc:	01000074 	movhi	r4,1
     3c0:	213d1404 	addi	r4,r4,-2992
     3c4:	00006300 	call	630 <printf>

       //----------------TEST INT    -----------------------------------
  printf(" \n writing integer......\n");
     3c8:	01000074 	movhi	r4,1
     3cc:	213d2104 	addi	r4,r4,-2940
     3d0:	000072c0 	call	72c <puts>

  for (i=0; i<MAXNUM_WORDS/2; i++) {
     3d4:	e03ff815 	stw	zero,-32(fp)
     3d8:	00000b06 	br	408 <main+0x1fc>
	  *(int*)(BASE+i*4)=i; // int, use 4 bytes
     3dc:	e0fff817 	ldw	r3,-32(fp)
     3e0:	00804034 	movhi	r2,256
     3e4:	1885883a 	add	r2,r3,r2
     3e8:	1085883a 	add	r2,r2,r2
     3ec:	1085883a 	add	r2,r2,r2
     3f0:	1007883a 	mov	r3,r2
     3f4:	e0bff817 	ldw	r2,-32(fp)
     3f8:	18800015 	stw	r2,0(r3)
  printf("Testing Short: the total numbers of error is : %i\n" ,short_err_num);

       //----------------TEST INT    -----------------------------------
  printf(" \n writing integer......\n");

  for (i=0; i<MAXNUM_WORDS/2; i++) {
     3fc:	e0bff817 	ldw	r2,-32(fp)
     400:	10800044 	addi	r2,r2,1
     404:	e0bff815 	stw	r2,-32(fp)
     408:	e0fff817 	ldw	r3,-32(fp)
     40c:	00804034 	movhi	r2,256
     410:	18bff216 	blt	r3,r2,3dc <__alt_data_end+0xfffe03dc>
	  *(int*)(BASE+i*4)=i; // int, use 4 bytes
  }

  printf(" \n testing integer......\n");
     414:	01000074 	movhi	r4,1
     418:	213d2804 	addi	r4,r4,-2912
     41c:	000072c0 	call	72c <puts>

  printf("Testing Integer: the total numbers of error is : %i\n" ,int_err_num);
     420:	e17ffb17 	ldw	r5,-20(fp)
     424:	01000074 	movhi	r4,1
     428:	213d2f04 	addi	r4,r4,-2884
     42c:	00006300 	call	630 <printf>
  return 0;
     430:	0005883a 	mov	r2,zero
}
     434:	e6ffff04 	addi	sp,fp,-4
     438:	dfc00217 	ldw	ra,8(sp)
     43c:	df000117 	ldw	fp,4(sp)
     440:	dc000017 	ldw	r16,0(sp)
     444:	dec00304 	addi	sp,sp,12
     448:	f800283a 	ret

0000044c <__divsi3>:
     44c:	20001b16 	blt	r4,zero,4bc <__divsi3+0x70>
     450:	000f883a 	mov	r7,zero
     454:	28001616 	blt	r5,zero,4b0 <__divsi3+0x64>
     458:	200d883a 	mov	r6,r4
     45c:	29001a2e 	bgeu	r5,r4,4c8 <__divsi3+0x7c>
     460:	00800804 	movi	r2,32
     464:	00c00044 	movi	r3,1
     468:	00000106 	br	470 <__divsi3+0x24>
     46c:	10000d26 	beq	r2,zero,4a4 <__divsi3+0x58>
     470:	294b883a 	add	r5,r5,r5
     474:	10bfffc4 	addi	r2,r2,-1
     478:	18c7883a 	add	r3,r3,r3
     47c:	293ffb36 	bltu	r5,r4,46c <__alt_data_end+0xfffe046c>
     480:	0005883a 	mov	r2,zero
     484:	18000726 	beq	r3,zero,4a4 <__divsi3+0x58>
     488:	0005883a 	mov	r2,zero
     48c:	31400236 	bltu	r6,r5,498 <__divsi3+0x4c>
     490:	314dc83a 	sub	r6,r6,r5
     494:	10c4b03a 	or	r2,r2,r3
     498:	1806d07a 	srli	r3,r3,1
     49c:	280ad07a 	srli	r5,r5,1
     4a0:	183ffa1e 	bne	r3,zero,48c <__alt_data_end+0xfffe048c>
     4a4:	38000126 	beq	r7,zero,4ac <__divsi3+0x60>
     4a8:	0085c83a 	sub	r2,zero,r2
     4ac:	f800283a 	ret
     4b0:	014bc83a 	sub	r5,zero,r5
     4b4:	39c0005c 	xori	r7,r7,1
     4b8:	003fe706 	br	458 <__alt_data_end+0xfffe0458>
     4bc:	0109c83a 	sub	r4,zero,r4
     4c0:	01c00044 	movi	r7,1
     4c4:	003fe306 	br	454 <__alt_data_end+0xfffe0454>
     4c8:	00c00044 	movi	r3,1
     4cc:	003fee06 	br	488 <__alt_data_end+0xfffe0488>

000004d0 <__modsi3>:
     4d0:	20001716 	blt	r4,zero,530 <__modsi3+0x60>
     4d4:	000f883a 	mov	r7,zero
     4d8:	2005883a 	mov	r2,r4
     4dc:	28001216 	blt	r5,zero,528 <__modsi3+0x58>
     4e0:	2900162e 	bgeu	r5,r4,53c <__modsi3+0x6c>
     4e4:	01800804 	movi	r6,32
     4e8:	00c00044 	movi	r3,1
     4ec:	00000106 	br	4f4 <__modsi3+0x24>
     4f0:	30000a26 	beq	r6,zero,51c <__modsi3+0x4c>
     4f4:	294b883a 	add	r5,r5,r5
     4f8:	31bfffc4 	addi	r6,r6,-1
     4fc:	18c7883a 	add	r3,r3,r3
     500:	293ffb36 	bltu	r5,r4,4f0 <__alt_data_end+0xfffe04f0>
     504:	18000526 	beq	r3,zero,51c <__modsi3+0x4c>
     508:	1806d07a 	srli	r3,r3,1
     50c:	11400136 	bltu	r2,r5,514 <__modsi3+0x44>
     510:	1145c83a 	sub	r2,r2,r5
     514:	280ad07a 	srli	r5,r5,1
     518:	183ffb1e 	bne	r3,zero,508 <__alt_data_end+0xfffe0508>
     51c:	38000126 	beq	r7,zero,524 <__modsi3+0x54>
     520:	0085c83a 	sub	r2,zero,r2
     524:	f800283a 	ret
     528:	014bc83a 	sub	r5,zero,r5
     52c:	003fec06 	br	4e0 <__alt_data_end+0xfffe04e0>
     530:	0109c83a 	sub	r4,zero,r4
     534:	01c00044 	movi	r7,1
     538:	003fe706 	br	4d8 <__alt_data_end+0xfffe04d8>
     53c:	00c00044 	movi	r3,1
     540:	003ff106 	br	508 <__alt_data_end+0xfffe0508>

00000544 <__udivsi3>:
     544:	200d883a 	mov	r6,r4
     548:	2900152e 	bgeu	r5,r4,5a0 <__udivsi3+0x5c>
     54c:	28001416 	blt	r5,zero,5a0 <__udivsi3+0x5c>
     550:	00800804 	movi	r2,32
     554:	00c00044 	movi	r3,1
     558:	00000206 	br	564 <__udivsi3+0x20>
     55c:	10000e26 	beq	r2,zero,598 <__udivsi3+0x54>
     560:	28000516 	blt	r5,zero,578 <__udivsi3+0x34>
     564:	294b883a 	add	r5,r5,r5
     568:	10bfffc4 	addi	r2,r2,-1
     56c:	18c7883a 	add	r3,r3,r3
     570:	293ffa36 	bltu	r5,r4,55c <__alt_data_end+0xfffe055c>
     574:	18000826 	beq	r3,zero,598 <__udivsi3+0x54>
     578:	0005883a 	mov	r2,zero
     57c:	31400236 	bltu	r6,r5,588 <__udivsi3+0x44>
     580:	314dc83a 	sub	r6,r6,r5
     584:	10c4b03a 	or	r2,r2,r3
     588:	1806d07a 	srli	r3,r3,1
     58c:	280ad07a 	srli	r5,r5,1
     590:	183ffa1e 	bne	r3,zero,57c <__alt_data_end+0xfffe057c>
     594:	f800283a 	ret
     598:	0005883a 	mov	r2,zero
     59c:	f800283a 	ret
     5a0:	00c00044 	movi	r3,1
     5a4:	003ff406 	br	578 <__alt_data_end+0xfffe0578>

000005a8 <__umodsi3>:
     5a8:	2005883a 	mov	r2,r4
     5ac:	2900122e 	bgeu	r5,r4,5f8 <__umodsi3+0x50>
     5b0:	28001116 	blt	r5,zero,5f8 <__umodsi3+0x50>
     5b4:	01800804 	movi	r6,32
     5b8:	00c00044 	movi	r3,1
     5bc:	00000206 	br	5c8 <__umodsi3+0x20>
     5c0:	30000c26 	beq	r6,zero,5f4 <__umodsi3+0x4c>
     5c4:	28000516 	blt	r5,zero,5dc <__umodsi3+0x34>
     5c8:	294b883a 	add	r5,r5,r5
     5cc:	31bfffc4 	addi	r6,r6,-1
     5d0:	18c7883a 	add	r3,r3,r3
     5d4:	293ffa36 	bltu	r5,r4,5c0 <__alt_data_end+0xfffe05c0>
     5d8:	18000626 	beq	r3,zero,5f4 <__umodsi3+0x4c>
     5dc:	1806d07a 	srli	r3,r3,1
     5e0:	11400136 	bltu	r2,r5,5e8 <__umodsi3+0x40>
     5e4:	1145c83a 	sub	r2,r2,r5
     5e8:	280ad07a 	srli	r5,r5,1
     5ec:	183ffb1e 	bne	r3,zero,5dc <__alt_data_end+0xfffe05dc>
     5f0:	f800283a 	ret
     5f4:	f800283a 	ret
     5f8:	00c00044 	movi	r3,1
     5fc:	003ff706 	br	5dc <__alt_data_end+0xfffe05dc>

00000600 <_printf_r>:
     600:	defffd04 	addi	sp,sp,-12
     604:	2805883a 	mov	r2,r5
     608:	dfc00015 	stw	ra,0(sp)
     60c:	d9800115 	stw	r6,4(sp)
     610:	d9c00215 	stw	r7,8(sp)
     614:	21400217 	ldw	r5,8(r4)
     618:	d9c00104 	addi	r7,sp,4
     61c:	100d883a 	mov	r6,r2
     620:	00007d80 	call	7d8 <___vfprintf_internal_r>
     624:	dfc00017 	ldw	ra,0(sp)
     628:	dec00304 	addi	sp,sp,12
     62c:	f800283a 	ret

00000630 <printf>:
     630:	defffc04 	addi	sp,sp,-16
     634:	dfc00015 	stw	ra,0(sp)
     638:	d9400115 	stw	r5,4(sp)
     63c:	d9800215 	stw	r6,8(sp)
     640:	d9c00315 	stw	r7,12(sp)
     644:	00800074 	movhi	r2,1
     648:	1084a904 	addi	r2,r2,4772
     64c:	10800017 	ldw	r2,0(r2)
     650:	200b883a 	mov	r5,r4
     654:	d9800104 	addi	r6,sp,4
     658:	11000217 	ldw	r4,8(r2)
     65c:	00029d00 	call	29d0 <__vfprintf_internal>
     660:	dfc00017 	ldw	ra,0(sp)
     664:	dec00404 	addi	sp,sp,16
     668:	f800283a 	ret

0000066c <_puts_r>:
     66c:	defff604 	addi	sp,sp,-40
     670:	dc000715 	stw	r16,28(sp)
     674:	2021883a 	mov	r16,r4
     678:	2809883a 	mov	r4,r5
     67c:	dc400815 	stw	r17,32(sp)
     680:	dfc00915 	stw	ra,36(sp)
     684:	2823883a 	mov	r17,r5
     688:	00007400 	call	740 <strlen>
     68c:	10c00044 	addi	r3,r2,1
     690:	d8800115 	stw	r2,4(sp)
     694:	00800074 	movhi	r2,1
     698:	10bd3d04 	addi	r2,r2,-2828
     69c:	d8800215 	stw	r2,8(sp)
     6a0:	00800044 	movi	r2,1
     6a4:	d8800315 	stw	r2,12(sp)
     6a8:	00800084 	movi	r2,2
     6ac:	dc400015 	stw	r17,0(sp)
     6b0:	d8c00615 	stw	r3,24(sp)
     6b4:	dec00415 	stw	sp,16(sp)
     6b8:	d8800515 	stw	r2,20(sp)
     6bc:	80000226 	beq	r16,zero,6c8 <_puts_r+0x5c>
     6c0:	80800e17 	ldw	r2,56(r16)
     6c4:	10001426 	beq	r2,zero,718 <_puts_r+0xac>
     6c8:	81400217 	ldw	r5,8(r16)
     6cc:	2880030b 	ldhu	r2,12(r5)
     6d0:	10c8000c 	andi	r3,r2,8192
     6d4:	1800061e 	bne	r3,zero,6f0 <_puts_r+0x84>
     6d8:	29001917 	ldw	r4,100(r5)
     6dc:	00f7ffc4 	movi	r3,-8193
     6e0:	10880014 	ori	r2,r2,8192
     6e4:	20c6703a 	and	r3,r4,r3
     6e8:	2880030d 	sth	r2,12(r5)
     6ec:	28c01915 	stw	r3,100(r5)
     6f0:	d9800404 	addi	r6,sp,16
     6f4:	8009883a 	mov	r4,r16
     6f8:	0004f000 	call	4f00 <__sfvwrite_r>
     6fc:	1000091e 	bne	r2,zero,724 <_puts_r+0xb8>
     700:	00800284 	movi	r2,10
     704:	dfc00917 	ldw	ra,36(sp)
     708:	dc400817 	ldw	r17,32(sp)
     70c:	dc000717 	ldw	r16,28(sp)
     710:	dec00a04 	addi	sp,sp,40
     714:	f800283a 	ret
     718:	8009883a 	mov	r4,r16
     71c:	0004a7c0 	call	4a7c <__sinit>
     720:	003fe906 	br	6c8 <__alt_data_end+0xfffe06c8>
     724:	00bfffc4 	movi	r2,-1
     728:	003ff606 	br	704 <__alt_data_end+0xfffe0704>

0000072c <puts>:
     72c:	00800074 	movhi	r2,1
     730:	1084a904 	addi	r2,r2,4772
     734:	200b883a 	mov	r5,r4
     738:	11000017 	ldw	r4,0(r2)
     73c:	000066c1 	jmpi	66c <_puts_r>

00000740 <strlen>:
     740:	208000cc 	andi	r2,r4,3
     744:	10002026 	beq	r2,zero,7c8 <strlen+0x88>
     748:	20800007 	ldb	r2,0(r4)
     74c:	10002026 	beq	r2,zero,7d0 <strlen+0x90>
     750:	2005883a 	mov	r2,r4
     754:	00000206 	br	760 <strlen+0x20>
     758:	10c00007 	ldb	r3,0(r2)
     75c:	18001826 	beq	r3,zero,7c0 <strlen+0x80>
     760:	10800044 	addi	r2,r2,1
     764:	10c000cc 	andi	r3,r2,3
     768:	183ffb1e 	bne	r3,zero,758 <__alt_data_end+0xfffe0758>
     76c:	10c00017 	ldw	r3,0(r2)
     770:	01ffbff4 	movhi	r7,65279
     774:	39ffbfc4 	addi	r7,r7,-257
     778:	00ca303a 	nor	r5,zero,r3
     77c:	01a02074 	movhi	r6,32897
     780:	19c7883a 	add	r3,r3,r7
     784:	31a02004 	addi	r6,r6,-32640
     788:	1946703a 	and	r3,r3,r5
     78c:	1986703a 	and	r3,r3,r6
     790:	1800091e 	bne	r3,zero,7b8 <strlen+0x78>
     794:	10800104 	addi	r2,r2,4
     798:	10c00017 	ldw	r3,0(r2)
     79c:	19cb883a 	add	r5,r3,r7
     7a0:	00c6303a 	nor	r3,zero,r3
     7a4:	28c6703a 	and	r3,r5,r3
     7a8:	1986703a 	and	r3,r3,r6
     7ac:	183ff926 	beq	r3,zero,794 <__alt_data_end+0xfffe0794>
     7b0:	00000106 	br	7b8 <strlen+0x78>
     7b4:	10800044 	addi	r2,r2,1
     7b8:	10c00007 	ldb	r3,0(r2)
     7bc:	183ffd1e 	bne	r3,zero,7b4 <__alt_data_end+0xfffe07b4>
     7c0:	1105c83a 	sub	r2,r2,r4
     7c4:	f800283a 	ret
     7c8:	2005883a 	mov	r2,r4
     7cc:	003fe706 	br	76c <__alt_data_end+0xfffe076c>
     7d0:	0005883a 	mov	r2,zero
     7d4:	f800283a 	ret

000007d8 <___vfprintf_internal_r>:
     7d8:	deffb804 	addi	sp,sp,-288
     7dc:	dfc04715 	stw	ra,284(sp)
     7e0:	ddc04515 	stw	r23,276(sp)
     7e4:	dd404315 	stw	r21,268(sp)
     7e8:	d9002c15 	stw	r4,176(sp)
     7ec:	282f883a 	mov	r23,r5
     7f0:	302b883a 	mov	r21,r6
     7f4:	d9c02d15 	stw	r7,180(sp)
     7f8:	df004615 	stw	fp,280(sp)
     7fc:	dd804415 	stw	r22,272(sp)
     800:	dd004215 	stw	r20,264(sp)
     804:	dcc04115 	stw	r19,260(sp)
     808:	dc804015 	stw	r18,256(sp)
     80c:	dc403f15 	stw	r17,252(sp)
     810:	dc003e15 	stw	r16,248(sp)
     814:	00055f00 	call	55f0 <_localeconv_r>
     818:	10800017 	ldw	r2,0(r2)
     81c:	1009883a 	mov	r4,r2
     820:	d8803415 	stw	r2,208(sp)
     824:	00007400 	call	740 <strlen>
     828:	d8803715 	stw	r2,220(sp)
     82c:	d8802c17 	ldw	r2,176(sp)
     830:	10000226 	beq	r2,zero,83c <___vfprintf_internal_r+0x64>
     834:	10800e17 	ldw	r2,56(r2)
     838:	1000f926 	beq	r2,zero,c20 <___vfprintf_internal_r+0x448>
     83c:	b880030b 	ldhu	r2,12(r23)
     840:	10c8000c 	andi	r3,r2,8192
     844:	1800061e 	bne	r3,zero,860 <___vfprintf_internal_r+0x88>
     848:	b9001917 	ldw	r4,100(r23)
     84c:	00f7ffc4 	movi	r3,-8193
     850:	10880014 	ori	r2,r2,8192
     854:	20c6703a 	and	r3,r4,r3
     858:	b880030d 	sth	r2,12(r23)
     85c:	b8c01915 	stw	r3,100(r23)
     860:	10c0020c 	andi	r3,r2,8
     864:	1800c126 	beq	r3,zero,b6c <___vfprintf_internal_r+0x394>
     868:	b8c00417 	ldw	r3,16(r23)
     86c:	1800bf26 	beq	r3,zero,b6c <___vfprintf_internal_r+0x394>
     870:	1080068c 	andi	r2,r2,26
     874:	00c00284 	movi	r3,10
     878:	10c0c426 	beq	r2,r3,b8c <___vfprintf_internal_r+0x3b4>
     87c:	d8c00404 	addi	r3,sp,16
     880:	05000074 	movhi	r20,1
     884:	d9001e04 	addi	r4,sp,120
     888:	a53d4e84 	addi	r20,r20,-2758
     88c:	d8c01e15 	stw	r3,120(sp)
     890:	d8002015 	stw	zero,128(sp)
     894:	d8001f15 	stw	zero,124(sp)
     898:	d8003315 	stw	zero,204(sp)
     89c:	d8003615 	stw	zero,216(sp)
     8a0:	d8003815 	stw	zero,224(sp)
     8a4:	1811883a 	mov	r8,r3
     8a8:	d8003915 	stw	zero,228(sp)
     8ac:	d8003a15 	stw	zero,232(sp)
     8b0:	d8002f15 	stw	zero,188(sp)
     8b4:	d9002815 	stw	r4,160(sp)
     8b8:	a8800007 	ldb	r2,0(r21)
     8bc:	10027b26 	beq	r2,zero,12ac <___vfprintf_internal_r+0xad4>
     8c0:	00c00944 	movi	r3,37
     8c4:	a821883a 	mov	r16,r21
     8c8:	10c0021e 	bne	r2,r3,8d4 <___vfprintf_internal_r+0xfc>
     8cc:	00001406 	br	920 <___vfprintf_internal_r+0x148>
     8d0:	10c00326 	beq	r2,r3,8e0 <___vfprintf_internal_r+0x108>
     8d4:	84000044 	addi	r16,r16,1
     8d8:	80800007 	ldb	r2,0(r16)
     8dc:	103ffc1e 	bne	r2,zero,8d0 <__alt_data_end+0xfffe08d0>
     8e0:	8563c83a 	sub	r17,r16,r21
     8e4:	88000e26 	beq	r17,zero,920 <___vfprintf_internal_r+0x148>
     8e8:	d8c02017 	ldw	r3,128(sp)
     8ec:	d8801f17 	ldw	r2,124(sp)
     8f0:	45400015 	stw	r21,0(r8)
     8f4:	1c47883a 	add	r3,r3,r17
     8f8:	10800044 	addi	r2,r2,1
     8fc:	d8c02015 	stw	r3,128(sp)
     900:	44400115 	stw	r17,4(r8)
     904:	d8801f15 	stw	r2,124(sp)
     908:	00c001c4 	movi	r3,7
     90c:	1880a716 	blt	r3,r2,bac <___vfprintf_internal_r+0x3d4>
     910:	42000204 	addi	r8,r8,8
     914:	d9402f17 	ldw	r5,188(sp)
     918:	2c4b883a 	add	r5,r5,r17
     91c:	d9402f15 	stw	r5,188(sp)
     920:	80800007 	ldb	r2,0(r16)
     924:	1000a826 	beq	r2,zero,bc8 <___vfprintf_internal_r+0x3f0>
     928:	84400047 	ldb	r17,1(r16)
     92c:	00bfffc4 	movi	r2,-1
     930:	85400044 	addi	r21,r16,1
     934:	d8002785 	stb	zero,158(sp)
     938:	0007883a 	mov	r3,zero
     93c:	000f883a 	mov	r7,zero
     940:	d8802915 	stw	r2,164(sp)
     944:	d8003115 	stw	zero,196(sp)
     948:	0025883a 	mov	r18,zero
     94c:	01401604 	movi	r5,88
     950:	01800244 	movi	r6,9
     954:	02800a84 	movi	r10,42
     958:	02401b04 	movi	r9,108
     95c:	ad400044 	addi	r21,r21,1
     960:	88bff804 	addi	r2,r17,-32
     964:	28830436 	bltu	r5,r2,1578 <___vfprintf_internal_r+0xda0>
     968:	100490ba 	slli	r2,r2,2
     96c:	01000034 	movhi	r4,0
     970:	21026004 	addi	r4,r4,2432
     974:	1105883a 	add	r2,r2,r4
     978:	10800017 	ldw	r2,0(r2)
     97c:	1000683a 	jmp	r2
     980:	00001498 	cmpnei	zero,zero,82
     984:	00001578 	rdprs	zero,zero,85
     988:	00001578 	rdprs	zero,zero,85
     98c:	000014b8 	rdprs	zero,zero,82
     990:	00001578 	rdprs	zero,zero,85
     994:	00001578 	rdprs	zero,zero,85
     998:	00001578 	rdprs	zero,zero,85
     99c:	00001578 	rdprs	zero,zero,85
     9a0:	00001578 	rdprs	zero,zero,85
     9a4:	00001578 	rdprs	zero,zero,85
     9a8:	00000c2c 	andhi	zero,zero,48
     9ac:	000013d4 	movui	zero,79
     9b0:	00001578 	rdprs	zero,zero,85
     9b4:	00000af4 	movhi	zero,43
     9b8:	00000c54 	movui	zero,49
     9bc:	00001578 	rdprs	zero,zero,85
     9c0:	00000c94 	movui	zero,50
     9c4:	00000ca0 	cmpeqi	zero,zero,50
     9c8:	00000ca0 	cmpeqi	zero,zero,50
     9cc:	00000ca0 	cmpeqi	zero,zero,50
     9d0:	00000ca0 	cmpeqi	zero,zero,50
     9d4:	00000ca0 	cmpeqi	zero,zero,50
     9d8:	00000ca0 	cmpeqi	zero,zero,50
     9dc:	00000ca0 	cmpeqi	zero,zero,50
     9e0:	00000ca0 	cmpeqi	zero,zero,50
     9e4:	00000ca0 	cmpeqi	zero,zero,50
     9e8:	00001578 	rdprs	zero,zero,85
     9ec:	00001578 	rdprs	zero,zero,85
     9f0:	00001578 	rdprs	zero,zero,85
     9f4:	00001578 	rdprs	zero,zero,85
     9f8:	00001578 	rdprs	zero,zero,85
     9fc:	00001578 	rdprs	zero,zero,85
     a00:	00001578 	rdprs	zero,zero,85
     a04:	00001578 	rdprs	zero,zero,85
     a08:	00001578 	rdprs	zero,zero,85
     a0c:	00001578 	rdprs	zero,zero,85
     a10:	00000cd4 	movui	zero,51
     a14:	00000d90 	cmplti	zero,zero,54
     a18:	00001578 	rdprs	zero,zero,85
     a1c:	00000d90 	cmplti	zero,zero,54
     a20:	00001578 	rdprs	zero,zero,85
     a24:	00001578 	rdprs	zero,zero,85
     a28:	00001578 	rdprs	zero,zero,85
     a2c:	00001578 	rdprs	zero,zero,85
     a30:	00000e30 	cmpltui	zero,zero,56
     a34:	00001578 	rdprs	zero,zero,85
     a38:	00001578 	rdprs	zero,zero,85
     a3c:	00000e3c 	xorhi	zero,zero,56
     a40:	00001578 	rdprs	zero,zero,85
     a44:	00001578 	rdprs	zero,zero,85
     a48:	00001578 	rdprs	zero,zero,85
     a4c:	00001578 	rdprs	zero,zero,85
     a50:	00001578 	rdprs	zero,zero,85
     a54:	000012b4 	movhi	zero,74
     a58:	00001578 	rdprs	zero,zero,85
     a5c:	00001578 	rdprs	zero,zero,85
     a60:	00001314 	movui	zero,76
     a64:	00001578 	rdprs	zero,zero,85
     a68:	00001578 	rdprs	zero,zero,85
     a6c:	00001578 	rdprs	zero,zero,85
     a70:	00001578 	rdprs	zero,zero,85
     a74:	00001578 	rdprs	zero,zero,85
     a78:	00001578 	rdprs	zero,zero,85
     a7c:	00001578 	rdprs	zero,zero,85
     a80:	00001578 	rdprs	zero,zero,85
     a84:	00001578 	rdprs	zero,zero,85
     a88:	00001578 	rdprs	zero,zero,85
     a8c:	00001524 	muli	zero,zero,84
     a90:	000014c4 	movi	zero,83
     a94:	00000d90 	cmplti	zero,zero,54
     a98:	00000d90 	cmplti	zero,zero,54
     a9c:	00000d90 	cmplti	zero,zero,54
     aa0:	000014d4 	movui	zero,83
     aa4:	000014c4 	movi	zero,83
     aa8:	00001578 	rdprs	zero,zero,85
     aac:	00001578 	rdprs	zero,zero,85
     ab0:	000014e0 	cmpeqi	zero,zero,83
     ab4:	00001578 	rdprs	zero,zero,85
     ab8:	000014f0 	cmpltui	zero,zero,83
     abc:	000013c4 	movi	zero,79
     ac0:	00000b00 	call	b0 <alt_exception_unknown+0x1c>
     ac4:	000013e4 	muli	zero,zero,79
     ac8:	00001578 	rdprs	zero,zero,85
     acc:	000013f0 	cmpltui	zero,zero,79
     ad0:	00001578 	rdprs	zero,zero,85
     ad4:	0000144c 	andi	zero,zero,81
     ad8:	00001578 	rdprs	zero,zero,85
     adc:	00001578 	rdprs	zero,zero,85
     ae0:	0000145c 	xori	zero,zero,81
     ae4:	d9003117 	ldw	r4,196(sp)
     ae8:	d8802d15 	stw	r2,180(sp)
     aec:	0109c83a 	sub	r4,zero,r4
     af0:	d9003115 	stw	r4,196(sp)
     af4:	94800114 	ori	r18,r18,4
     af8:	ac400007 	ldb	r17,0(r21)
     afc:	003f9706 	br	95c <__alt_data_end+0xfffe095c>
     b00:	00800c04 	movi	r2,48
     b04:	d9002d17 	ldw	r4,180(sp)
     b08:	d9402917 	ldw	r5,164(sp)
     b0c:	d8802705 	stb	r2,156(sp)
     b10:	00801e04 	movi	r2,120
     b14:	d8802745 	stb	r2,157(sp)
     b18:	d8002785 	stb	zero,158(sp)
     b1c:	20c00104 	addi	r3,r4,4
     b20:	24c00017 	ldw	r19,0(r4)
     b24:	002d883a 	mov	r22,zero
     b28:	90800094 	ori	r2,r18,2
     b2c:	28029a16 	blt	r5,zero,1598 <___vfprintf_internal_r+0xdc0>
     b30:	00bfdfc4 	movi	r2,-129
     b34:	90a4703a 	and	r18,r18,r2
     b38:	d8c02d15 	stw	r3,180(sp)
     b3c:	94800094 	ori	r18,r18,2
     b40:	9802871e 	bne	r19,zero,1560 <___vfprintf_internal_r+0xd88>
     b44:	00800074 	movhi	r2,1
     b48:	10bd4704 	addi	r2,r2,-2788
     b4c:	d8803915 	stw	r2,228(sp)
     b50:	04401e04 	movi	r17,120
     b54:	d8802917 	ldw	r2,164(sp)
     b58:	0039883a 	mov	fp,zero
     b5c:	1001e926 	beq	r2,zero,1304 <___vfprintf_internal_r+0xb2c>
     b60:	0027883a 	mov	r19,zero
     b64:	002d883a 	mov	r22,zero
     b68:	00020506 	br	1380 <___vfprintf_internal_r+0xba8>
     b6c:	d9002c17 	ldw	r4,176(sp)
     b70:	b80b883a 	mov	r5,r23
     b74:	0002aa80 	call	2aa8 <__swsetup_r>
     b78:	1005ac1e 	bne	r2,zero,222c <___vfprintf_internal_r+0x1a54>
     b7c:	b880030b 	ldhu	r2,12(r23)
     b80:	00c00284 	movi	r3,10
     b84:	1080068c 	andi	r2,r2,26
     b88:	10ff3c1e 	bne	r2,r3,87c <__alt_data_end+0xfffe087c>
     b8c:	b880038f 	ldh	r2,14(r23)
     b90:	103f3a16 	blt	r2,zero,87c <__alt_data_end+0xfffe087c>
     b94:	d9c02d17 	ldw	r7,180(sp)
     b98:	d9002c17 	ldw	r4,176(sp)
     b9c:	a80d883a 	mov	r6,r21
     ba0:	b80b883a 	mov	r5,r23
     ba4:	00029ec0 	call	29ec <__sbprintf>
     ba8:	00001106 	br	bf0 <___vfprintf_internal_r+0x418>
     bac:	d9002c17 	ldw	r4,176(sp)
     bb0:	d9801e04 	addi	r6,sp,120
     bb4:	b80b883a 	mov	r5,r23
     bb8:	0007dd40 	call	7dd4 <__sprint_r>
     bbc:	1000081e 	bne	r2,zero,be0 <___vfprintf_internal_r+0x408>
     bc0:	da000404 	addi	r8,sp,16
     bc4:	003f5306 	br	914 <__alt_data_end+0xfffe0914>
     bc8:	d8802017 	ldw	r2,128(sp)
     bcc:	10000426 	beq	r2,zero,be0 <___vfprintf_internal_r+0x408>
     bd0:	d9002c17 	ldw	r4,176(sp)
     bd4:	d9801e04 	addi	r6,sp,120
     bd8:	b80b883a 	mov	r5,r23
     bdc:	0007dd40 	call	7dd4 <__sprint_r>
     be0:	b880030b 	ldhu	r2,12(r23)
     be4:	1080100c 	andi	r2,r2,64
     be8:	1005901e 	bne	r2,zero,222c <___vfprintf_internal_r+0x1a54>
     bec:	d8802f17 	ldw	r2,188(sp)
     bf0:	dfc04717 	ldw	ra,284(sp)
     bf4:	df004617 	ldw	fp,280(sp)
     bf8:	ddc04517 	ldw	r23,276(sp)
     bfc:	dd804417 	ldw	r22,272(sp)
     c00:	dd404317 	ldw	r21,268(sp)
     c04:	dd004217 	ldw	r20,264(sp)
     c08:	dcc04117 	ldw	r19,260(sp)
     c0c:	dc804017 	ldw	r18,256(sp)
     c10:	dc403f17 	ldw	r17,252(sp)
     c14:	dc003e17 	ldw	r16,248(sp)
     c18:	dec04804 	addi	sp,sp,288
     c1c:	f800283a 	ret
     c20:	d9002c17 	ldw	r4,176(sp)
     c24:	0004a7c0 	call	4a7c <__sinit>
     c28:	003f0406 	br	83c <__alt_data_end+0xfffe083c>
     c2c:	d8802d17 	ldw	r2,180(sp)
     c30:	d9002d17 	ldw	r4,180(sp)
     c34:	10800017 	ldw	r2,0(r2)
     c38:	d8803115 	stw	r2,196(sp)
     c3c:	20800104 	addi	r2,r4,4
     c40:	d9003117 	ldw	r4,196(sp)
     c44:	203fa716 	blt	r4,zero,ae4 <__alt_data_end+0xfffe0ae4>
     c48:	d8802d15 	stw	r2,180(sp)
     c4c:	ac400007 	ldb	r17,0(r21)
     c50:	003f4206 	br	95c <__alt_data_end+0xfffe095c>
     c54:	ac400007 	ldb	r17,0(r21)
     c58:	aac00044 	addi	r11,r21,1
     c5c:	8a872826 	beq	r17,r10,2900 <___vfprintf_internal_r+0x2128>
     c60:	88bff404 	addi	r2,r17,-48
     c64:	0009883a 	mov	r4,zero
     c68:	30867d36 	bltu	r6,r2,2660 <___vfprintf_internal_r+0x1e88>
     c6c:	5c400007 	ldb	r17,0(r11)
     c70:	210002a4 	muli	r4,r4,10
     c74:	5d400044 	addi	r21,r11,1
     c78:	a817883a 	mov	r11,r21
     c7c:	2089883a 	add	r4,r4,r2
     c80:	88bff404 	addi	r2,r17,-48
     c84:	30bff92e 	bgeu	r6,r2,c6c <__alt_data_end+0xfffe0c6c>
     c88:	2005c916 	blt	r4,zero,23b0 <___vfprintf_internal_r+0x1bd8>
     c8c:	d9002915 	stw	r4,164(sp)
     c90:	003f3306 	br	960 <__alt_data_end+0xfffe0960>
     c94:	94802014 	ori	r18,r18,128
     c98:	ac400007 	ldb	r17,0(r21)
     c9c:	003f2f06 	br	95c <__alt_data_end+0xfffe095c>
     ca0:	a809883a 	mov	r4,r21
     ca4:	d8003115 	stw	zero,196(sp)
     ca8:	88bff404 	addi	r2,r17,-48
     cac:	0017883a 	mov	r11,zero
     cb0:	24400007 	ldb	r17,0(r4)
     cb4:	5ac002a4 	muli	r11,r11,10
     cb8:	ad400044 	addi	r21,r21,1
     cbc:	a809883a 	mov	r4,r21
     cc0:	12d7883a 	add	r11,r2,r11
     cc4:	88bff404 	addi	r2,r17,-48
     cc8:	30bff92e 	bgeu	r6,r2,cb0 <__alt_data_end+0xfffe0cb0>
     ccc:	dac03115 	stw	r11,196(sp)
     cd0:	003f2306 	br	960 <__alt_data_end+0xfffe0960>
     cd4:	18c03fcc 	andi	r3,r3,255
     cd8:	18072b1e 	bne	r3,zero,2988 <___vfprintf_internal_r+0x21b0>
     cdc:	94800414 	ori	r18,r18,16
     ce0:	9080080c 	andi	r2,r18,32
     ce4:	10037b26 	beq	r2,zero,1ad4 <___vfprintf_internal_r+0x12fc>
     ce8:	d9402d17 	ldw	r5,180(sp)
     cec:	28800117 	ldw	r2,4(r5)
     cf0:	2cc00017 	ldw	r19,0(r5)
     cf4:	29400204 	addi	r5,r5,8
     cf8:	d9402d15 	stw	r5,180(sp)
     cfc:	102d883a 	mov	r22,r2
     d00:	10044b16 	blt	r2,zero,1e30 <___vfprintf_internal_r+0x1658>
     d04:	d9402917 	ldw	r5,164(sp)
     d08:	df002783 	ldbu	fp,158(sp)
     d0c:	2803bc16 	blt	r5,zero,1c00 <___vfprintf_internal_r+0x1428>
     d10:	00ffdfc4 	movi	r3,-129
     d14:	9d84b03a 	or	r2,r19,r22
     d18:	90e4703a 	and	r18,r18,r3
     d1c:	10017726 	beq	r2,zero,12fc <___vfprintf_internal_r+0xb24>
     d20:	b0038326 	beq	r22,zero,1b30 <___vfprintf_internal_r+0x1358>
     d24:	dc402a15 	stw	r17,168(sp)
     d28:	dc001e04 	addi	r16,sp,120
     d2c:	b023883a 	mov	r17,r22
     d30:	402d883a 	mov	r22,r8
     d34:	9809883a 	mov	r4,r19
     d38:	880b883a 	mov	r5,r17
     d3c:	01800284 	movi	r6,10
     d40:	000f883a 	mov	r7,zero
     d44:	000a1cc0 	call	a1cc <__umoddi3>
     d48:	10800c04 	addi	r2,r2,48
     d4c:	843fffc4 	addi	r16,r16,-1
     d50:	9809883a 	mov	r4,r19
     d54:	880b883a 	mov	r5,r17
     d58:	80800005 	stb	r2,0(r16)
     d5c:	01800284 	movi	r6,10
     d60:	000f883a 	mov	r7,zero
     d64:	0009c540 	call	9c54 <__udivdi3>
     d68:	1027883a 	mov	r19,r2
     d6c:	10c4b03a 	or	r2,r2,r3
     d70:	1823883a 	mov	r17,r3
     d74:	103fef1e 	bne	r2,zero,d34 <__alt_data_end+0xfffe0d34>
     d78:	d8c02817 	ldw	r3,160(sp)
     d7c:	dc402a17 	ldw	r17,168(sp)
     d80:	b011883a 	mov	r8,r22
     d84:	1c07c83a 	sub	r3,r3,r16
     d88:	d8c02e15 	stw	r3,184(sp)
     d8c:	00005906 	br	ef4 <___vfprintf_internal_r+0x71c>
     d90:	18c03fcc 	andi	r3,r3,255
     d94:	1806fa1e 	bne	r3,zero,2980 <___vfprintf_internal_r+0x21a8>
     d98:	9080020c 	andi	r2,r18,8
     d9c:	10048a26 	beq	r2,zero,1fc8 <___vfprintf_internal_r+0x17f0>
     da0:	d8c02d17 	ldw	r3,180(sp)
     da4:	d9002d17 	ldw	r4,180(sp)
     da8:	d9402d17 	ldw	r5,180(sp)
     dac:	18c00017 	ldw	r3,0(r3)
     db0:	21000117 	ldw	r4,4(r4)
     db4:	29400204 	addi	r5,r5,8
     db8:	d8c03615 	stw	r3,216(sp)
     dbc:	d9003815 	stw	r4,224(sp)
     dc0:	d9402d15 	stw	r5,180(sp)
     dc4:	d9003617 	ldw	r4,216(sp)
     dc8:	d9403817 	ldw	r5,224(sp)
     dcc:	da003d15 	stw	r8,244(sp)
     dd0:	04000044 	movi	r16,1
     dd4:	00079f80 	call	79f8 <__fpclassifyd>
     dd8:	da003d17 	ldw	r8,244(sp)
     ddc:	14041f1e 	bne	r2,r16,1e5c <___vfprintf_internal_r+0x1684>
     de0:	d9003617 	ldw	r4,216(sp)
     de4:	d9403817 	ldw	r5,224(sp)
     de8:	000d883a 	mov	r6,zero
     dec:	000f883a 	mov	r7,zero
     df0:	000b9fc0 	call	b9fc <__ledf2>
     df4:	da003d17 	ldw	r8,244(sp)
     df8:	1005be16 	blt	r2,zero,24f4 <___vfprintf_internal_r+0x1d1c>
     dfc:	df002783 	ldbu	fp,158(sp)
     e00:	008011c4 	movi	r2,71
     e04:	1445330e 	bge	r2,r17,22d4 <___vfprintf_internal_r+0x1afc>
     e08:	04000074 	movhi	r16,1
     e0c:	843d3f04 	addi	r16,r16,-2820
     e10:	00c000c4 	movi	r3,3
     e14:	00bfdfc4 	movi	r2,-129
     e18:	d8c02a15 	stw	r3,168(sp)
     e1c:	90a4703a 	and	r18,r18,r2
     e20:	d8c02e15 	stw	r3,184(sp)
     e24:	d8002915 	stw	zero,164(sp)
     e28:	d8003215 	stw	zero,200(sp)
     e2c:	00003706 	br	f0c <___vfprintf_internal_r+0x734>
     e30:	94800214 	ori	r18,r18,8
     e34:	ac400007 	ldb	r17,0(r21)
     e38:	003ec806 	br	95c <__alt_data_end+0xfffe095c>
     e3c:	18c03fcc 	andi	r3,r3,255
     e40:	1806db1e 	bne	r3,zero,29b0 <___vfprintf_internal_r+0x21d8>
     e44:	94800414 	ori	r18,r18,16
     e48:	9080080c 	andi	r2,r18,32
     e4c:	1002d826 	beq	r2,zero,19b0 <___vfprintf_internal_r+0x11d8>
     e50:	d9402d17 	ldw	r5,180(sp)
     e54:	d8c02917 	ldw	r3,164(sp)
     e58:	d8002785 	stb	zero,158(sp)
     e5c:	28800204 	addi	r2,r5,8
     e60:	2cc00017 	ldw	r19,0(r5)
     e64:	2d800117 	ldw	r22,4(r5)
     e68:	18048f16 	blt	r3,zero,20a8 <___vfprintf_internal_r+0x18d0>
     e6c:	013fdfc4 	movi	r4,-129
     e70:	9d86b03a 	or	r3,r19,r22
     e74:	d8802d15 	stw	r2,180(sp)
     e78:	9124703a 	and	r18,r18,r4
     e7c:	1802d91e 	bne	r3,zero,19e4 <___vfprintf_internal_r+0x120c>
     e80:	d8c02917 	ldw	r3,164(sp)
     e84:	0039883a 	mov	fp,zero
     e88:	1805c326 	beq	r3,zero,2598 <___vfprintf_internal_r+0x1dc0>
     e8c:	0027883a 	mov	r19,zero
     e90:	002d883a 	mov	r22,zero
     e94:	dc001e04 	addi	r16,sp,120
     e98:	9806d0fa 	srli	r3,r19,3
     e9c:	b008977a 	slli	r4,r22,29
     ea0:	b02cd0fa 	srli	r22,r22,3
     ea4:	9cc001cc 	andi	r19,r19,7
     ea8:	98800c04 	addi	r2,r19,48
     eac:	843fffc4 	addi	r16,r16,-1
     eb0:	20e6b03a 	or	r19,r4,r3
     eb4:	80800005 	stb	r2,0(r16)
     eb8:	9d86b03a 	or	r3,r19,r22
     ebc:	183ff61e 	bne	r3,zero,e98 <__alt_data_end+0xfffe0e98>
     ec0:	90c0004c 	andi	r3,r18,1
     ec4:	18013b26 	beq	r3,zero,13b4 <___vfprintf_internal_r+0xbdc>
     ec8:	10803fcc 	andi	r2,r2,255
     ecc:	1080201c 	xori	r2,r2,128
     ed0:	10bfe004 	addi	r2,r2,-128
     ed4:	00c00c04 	movi	r3,48
     ed8:	10c13626 	beq	r2,r3,13b4 <___vfprintf_internal_r+0xbdc>
     edc:	80ffffc5 	stb	r3,-1(r16)
     ee0:	d8c02817 	ldw	r3,160(sp)
     ee4:	80bfffc4 	addi	r2,r16,-1
     ee8:	1021883a 	mov	r16,r2
     eec:	1887c83a 	sub	r3,r3,r2
     ef0:	d8c02e15 	stw	r3,184(sp)
     ef4:	d8802e17 	ldw	r2,184(sp)
     ef8:	d9002917 	ldw	r4,164(sp)
     efc:	1100010e 	bge	r2,r4,f04 <___vfprintf_internal_r+0x72c>
     f00:	2005883a 	mov	r2,r4
     f04:	d8802a15 	stw	r2,168(sp)
     f08:	d8003215 	stw	zero,200(sp)
     f0c:	e7003fcc 	andi	fp,fp,255
     f10:	e700201c 	xori	fp,fp,128
     f14:	e73fe004 	addi	fp,fp,-128
     f18:	e0000326 	beq	fp,zero,f28 <___vfprintf_internal_r+0x750>
     f1c:	d8c02a17 	ldw	r3,168(sp)
     f20:	18c00044 	addi	r3,r3,1
     f24:	d8c02a15 	stw	r3,168(sp)
     f28:	90c0008c 	andi	r3,r18,2
     f2c:	d8c02b15 	stw	r3,172(sp)
     f30:	18000326 	beq	r3,zero,f40 <___vfprintf_internal_r+0x768>
     f34:	d8c02a17 	ldw	r3,168(sp)
     f38:	18c00084 	addi	r3,r3,2
     f3c:	d8c02a15 	stw	r3,168(sp)
     f40:	90c0210c 	andi	r3,r18,132
     f44:	d8c03015 	stw	r3,192(sp)
     f48:	1801a31e 	bne	r3,zero,15d8 <___vfprintf_internal_r+0xe00>
     f4c:	d9003117 	ldw	r4,196(sp)
     f50:	d8c02a17 	ldw	r3,168(sp)
     f54:	20e7c83a 	sub	r19,r4,r3
     f58:	04c19f0e 	bge	zero,r19,15d8 <___vfprintf_internal_r+0xe00>
     f5c:	02400404 	movi	r9,16
     f60:	d8c02017 	ldw	r3,128(sp)
     f64:	d8801f17 	ldw	r2,124(sp)
     f68:	4cc50d0e 	bge	r9,r19,23a0 <___vfprintf_internal_r+0x1bc8>
     f6c:	01400074 	movhi	r5,1
     f70:	297d5284 	addi	r5,r5,-2742
     f74:	dc403b15 	stw	r17,236(sp)
     f78:	d9403515 	stw	r5,212(sp)
     f7c:	9823883a 	mov	r17,r19
     f80:	482d883a 	mov	r22,r9
     f84:	9027883a 	mov	r19,r18
     f88:	070001c4 	movi	fp,7
     f8c:	8025883a 	mov	r18,r16
     f90:	dc002c17 	ldw	r16,176(sp)
     f94:	00000306 	br	fa4 <___vfprintf_internal_r+0x7cc>
     f98:	8c7ffc04 	addi	r17,r17,-16
     f9c:	42000204 	addi	r8,r8,8
     fa0:	b440130e 	bge	r22,r17,ff0 <___vfprintf_internal_r+0x818>
     fa4:	01000074 	movhi	r4,1
     fa8:	18c00404 	addi	r3,r3,16
     fac:	10800044 	addi	r2,r2,1
     fb0:	213d5284 	addi	r4,r4,-2742
     fb4:	41000015 	stw	r4,0(r8)
     fb8:	45800115 	stw	r22,4(r8)
     fbc:	d8c02015 	stw	r3,128(sp)
     fc0:	d8801f15 	stw	r2,124(sp)
     fc4:	e0bff40e 	bge	fp,r2,f98 <__alt_data_end+0xfffe0f98>
     fc8:	d9801e04 	addi	r6,sp,120
     fcc:	b80b883a 	mov	r5,r23
     fd0:	8009883a 	mov	r4,r16
     fd4:	0007dd40 	call	7dd4 <__sprint_r>
     fd8:	103f011e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
     fdc:	8c7ffc04 	addi	r17,r17,-16
     fe0:	d8c02017 	ldw	r3,128(sp)
     fe4:	d8801f17 	ldw	r2,124(sp)
     fe8:	da000404 	addi	r8,sp,16
     fec:	b47fed16 	blt	r22,r17,fa4 <__alt_data_end+0xfffe0fa4>
     ff0:	9021883a 	mov	r16,r18
     ff4:	9825883a 	mov	r18,r19
     ff8:	8827883a 	mov	r19,r17
     ffc:	dc403b17 	ldw	r17,236(sp)
    1000:	d9403517 	ldw	r5,212(sp)
    1004:	98c7883a 	add	r3,r19,r3
    1008:	10800044 	addi	r2,r2,1
    100c:	41400015 	stw	r5,0(r8)
    1010:	44c00115 	stw	r19,4(r8)
    1014:	d8c02015 	stw	r3,128(sp)
    1018:	d8801f15 	stw	r2,124(sp)
    101c:	010001c4 	movi	r4,7
    1020:	2082a316 	blt	r4,r2,1ab0 <___vfprintf_internal_r+0x12d8>
    1024:	df002787 	ldb	fp,158(sp)
    1028:	42000204 	addi	r8,r8,8
    102c:	e0000c26 	beq	fp,zero,1060 <___vfprintf_internal_r+0x888>
    1030:	d8801f17 	ldw	r2,124(sp)
    1034:	d9002784 	addi	r4,sp,158
    1038:	18c00044 	addi	r3,r3,1
    103c:	10800044 	addi	r2,r2,1
    1040:	41000015 	stw	r4,0(r8)
    1044:	01000044 	movi	r4,1
    1048:	41000115 	stw	r4,4(r8)
    104c:	d8c02015 	stw	r3,128(sp)
    1050:	d8801f15 	stw	r2,124(sp)
    1054:	010001c4 	movi	r4,7
    1058:	20823c16 	blt	r4,r2,194c <___vfprintf_internal_r+0x1174>
    105c:	42000204 	addi	r8,r8,8
    1060:	d8802b17 	ldw	r2,172(sp)
    1064:	10000c26 	beq	r2,zero,1098 <___vfprintf_internal_r+0x8c0>
    1068:	d8801f17 	ldw	r2,124(sp)
    106c:	d9002704 	addi	r4,sp,156
    1070:	18c00084 	addi	r3,r3,2
    1074:	10800044 	addi	r2,r2,1
    1078:	41000015 	stw	r4,0(r8)
    107c:	01000084 	movi	r4,2
    1080:	41000115 	stw	r4,4(r8)
    1084:	d8c02015 	stw	r3,128(sp)
    1088:	d8801f15 	stw	r2,124(sp)
    108c:	010001c4 	movi	r4,7
    1090:	20823616 	blt	r4,r2,196c <___vfprintf_internal_r+0x1194>
    1094:	42000204 	addi	r8,r8,8
    1098:	d9003017 	ldw	r4,192(sp)
    109c:	00802004 	movi	r2,128
    10a0:	20819926 	beq	r4,r2,1708 <___vfprintf_internal_r+0xf30>
    10a4:	d9402917 	ldw	r5,164(sp)
    10a8:	d8802e17 	ldw	r2,184(sp)
    10ac:	28adc83a 	sub	r22,r5,r2
    10b0:	0580310e 	bge	zero,r22,1178 <___vfprintf_internal_r+0x9a0>
    10b4:	07000404 	movi	fp,16
    10b8:	d8801f17 	ldw	r2,124(sp)
    10bc:	e584140e 	bge	fp,r22,2110 <___vfprintf_internal_r+0x1938>
    10c0:	01400074 	movhi	r5,1
    10c4:	297d4e84 	addi	r5,r5,-2758
    10c8:	dc402915 	stw	r17,164(sp)
    10cc:	d9402b15 	stw	r5,172(sp)
    10d0:	b023883a 	mov	r17,r22
    10d4:	04c001c4 	movi	r19,7
    10d8:	a82d883a 	mov	r22,r21
    10dc:	902b883a 	mov	r21,r18
    10e0:	8025883a 	mov	r18,r16
    10e4:	dc002c17 	ldw	r16,176(sp)
    10e8:	00000306 	br	10f8 <___vfprintf_internal_r+0x920>
    10ec:	8c7ffc04 	addi	r17,r17,-16
    10f0:	42000204 	addi	r8,r8,8
    10f4:	e440110e 	bge	fp,r17,113c <___vfprintf_internal_r+0x964>
    10f8:	18c00404 	addi	r3,r3,16
    10fc:	10800044 	addi	r2,r2,1
    1100:	45000015 	stw	r20,0(r8)
    1104:	47000115 	stw	fp,4(r8)
    1108:	d8c02015 	stw	r3,128(sp)
    110c:	d8801f15 	stw	r2,124(sp)
    1110:	98bff60e 	bge	r19,r2,10ec <__alt_data_end+0xfffe10ec>
    1114:	d9801e04 	addi	r6,sp,120
    1118:	b80b883a 	mov	r5,r23
    111c:	8009883a 	mov	r4,r16
    1120:	0007dd40 	call	7dd4 <__sprint_r>
    1124:	103eae1e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1128:	8c7ffc04 	addi	r17,r17,-16
    112c:	d8c02017 	ldw	r3,128(sp)
    1130:	d8801f17 	ldw	r2,124(sp)
    1134:	da000404 	addi	r8,sp,16
    1138:	e47fef16 	blt	fp,r17,10f8 <__alt_data_end+0xfffe10f8>
    113c:	9021883a 	mov	r16,r18
    1140:	a825883a 	mov	r18,r21
    1144:	b02b883a 	mov	r21,r22
    1148:	882d883a 	mov	r22,r17
    114c:	dc402917 	ldw	r17,164(sp)
    1150:	d9002b17 	ldw	r4,172(sp)
    1154:	1d87883a 	add	r3,r3,r22
    1158:	10800044 	addi	r2,r2,1
    115c:	41000015 	stw	r4,0(r8)
    1160:	45800115 	stw	r22,4(r8)
    1164:	d8c02015 	stw	r3,128(sp)
    1168:	d8801f15 	stw	r2,124(sp)
    116c:	010001c4 	movi	r4,7
    1170:	2081ee16 	blt	r4,r2,192c <___vfprintf_internal_r+0x1154>
    1174:	42000204 	addi	r8,r8,8
    1178:	9080400c 	andi	r2,r18,256
    117c:	1001181e 	bne	r2,zero,15e0 <___vfprintf_internal_r+0xe08>
    1180:	d9402e17 	ldw	r5,184(sp)
    1184:	d8801f17 	ldw	r2,124(sp)
    1188:	44000015 	stw	r16,0(r8)
    118c:	1947883a 	add	r3,r3,r5
    1190:	10800044 	addi	r2,r2,1
    1194:	41400115 	stw	r5,4(r8)
    1198:	d8c02015 	stw	r3,128(sp)
    119c:	d8801f15 	stw	r2,124(sp)
    11a0:	010001c4 	movi	r4,7
    11a4:	2081d316 	blt	r4,r2,18f4 <___vfprintf_internal_r+0x111c>
    11a8:	42000204 	addi	r8,r8,8
    11ac:	9480010c 	andi	r18,r18,4
    11b0:	90003226 	beq	r18,zero,127c <___vfprintf_internal_r+0xaa4>
    11b4:	d9403117 	ldw	r5,196(sp)
    11b8:	d8802a17 	ldw	r2,168(sp)
    11bc:	28a1c83a 	sub	r16,r5,r2
    11c0:	04002e0e 	bge	zero,r16,127c <___vfprintf_internal_r+0xaa4>
    11c4:	04400404 	movi	r17,16
    11c8:	d8801f17 	ldw	r2,124(sp)
    11cc:	8c04a20e 	bge	r17,r16,2458 <___vfprintf_internal_r+0x1c80>
    11d0:	01400074 	movhi	r5,1
    11d4:	297d5284 	addi	r5,r5,-2742
    11d8:	d9403515 	stw	r5,212(sp)
    11dc:	048001c4 	movi	r18,7
    11e0:	dcc02c17 	ldw	r19,176(sp)
    11e4:	00000306 	br	11f4 <___vfprintf_internal_r+0xa1c>
    11e8:	843ffc04 	addi	r16,r16,-16
    11ec:	42000204 	addi	r8,r8,8
    11f0:	8c00130e 	bge	r17,r16,1240 <___vfprintf_internal_r+0xa68>
    11f4:	01000074 	movhi	r4,1
    11f8:	18c00404 	addi	r3,r3,16
    11fc:	10800044 	addi	r2,r2,1
    1200:	213d5284 	addi	r4,r4,-2742
    1204:	41000015 	stw	r4,0(r8)
    1208:	44400115 	stw	r17,4(r8)
    120c:	d8c02015 	stw	r3,128(sp)
    1210:	d8801f15 	stw	r2,124(sp)
    1214:	90bff40e 	bge	r18,r2,11e8 <__alt_data_end+0xfffe11e8>
    1218:	d9801e04 	addi	r6,sp,120
    121c:	b80b883a 	mov	r5,r23
    1220:	9809883a 	mov	r4,r19
    1224:	0007dd40 	call	7dd4 <__sprint_r>
    1228:	103e6d1e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    122c:	843ffc04 	addi	r16,r16,-16
    1230:	d8c02017 	ldw	r3,128(sp)
    1234:	d8801f17 	ldw	r2,124(sp)
    1238:	da000404 	addi	r8,sp,16
    123c:	8c3fed16 	blt	r17,r16,11f4 <__alt_data_end+0xfffe11f4>
    1240:	d9403517 	ldw	r5,212(sp)
    1244:	1c07883a 	add	r3,r3,r16
    1248:	10800044 	addi	r2,r2,1
    124c:	41400015 	stw	r5,0(r8)
    1250:	44000115 	stw	r16,4(r8)
    1254:	d8c02015 	stw	r3,128(sp)
    1258:	d8801f15 	stw	r2,124(sp)
    125c:	010001c4 	movi	r4,7
    1260:	2080060e 	bge	r4,r2,127c <___vfprintf_internal_r+0xaa4>
    1264:	d9002c17 	ldw	r4,176(sp)
    1268:	d9801e04 	addi	r6,sp,120
    126c:	b80b883a 	mov	r5,r23
    1270:	0007dd40 	call	7dd4 <__sprint_r>
    1274:	103e5a1e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1278:	d8c02017 	ldw	r3,128(sp)
    127c:	d8803117 	ldw	r2,196(sp)
    1280:	d9002a17 	ldw	r4,168(sp)
    1284:	1100010e 	bge	r2,r4,128c <___vfprintf_internal_r+0xab4>
    1288:	2005883a 	mov	r2,r4
    128c:	d9402f17 	ldw	r5,188(sp)
    1290:	288b883a 	add	r5,r5,r2
    1294:	d9402f15 	stw	r5,188(sp)
    1298:	18019e1e 	bne	r3,zero,1914 <___vfprintf_internal_r+0x113c>
    129c:	a8800007 	ldb	r2,0(r21)
    12a0:	d8001f15 	stw	zero,124(sp)
    12a4:	da000404 	addi	r8,sp,16
    12a8:	103d851e 	bne	r2,zero,8c0 <__alt_data_end+0xfffe08c0>
    12ac:	a821883a 	mov	r16,r21
    12b0:	003d9b06 	br	920 <__alt_data_end+0xfffe0920>
    12b4:	18c03fcc 	andi	r3,r3,255
    12b8:	1805c11e 	bne	r3,zero,29c0 <___vfprintf_internal_r+0x21e8>
    12bc:	94800414 	ori	r18,r18,16
    12c0:	9080080c 	andi	r2,r18,32
    12c4:	10020c26 	beq	r2,zero,1af8 <___vfprintf_internal_r+0x1320>
    12c8:	d8802d17 	ldw	r2,180(sp)
    12cc:	d9002917 	ldw	r4,164(sp)
    12d0:	d8002785 	stb	zero,158(sp)
    12d4:	10c00204 	addi	r3,r2,8
    12d8:	14c00017 	ldw	r19,0(r2)
    12dc:	15800117 	ldw	r22,4(r2)
    12e0:	20040f16 	blt	r4,zero,2320 <___vfprintf_internal_r+0x1b48>
    12e4:	013fdfc4 	movi	r4,-129
    12e8:	9d84b03a 	or	r2,r19,r22
    12ec:	d8c02d15 	stw	r3,180(sp)
    12f0:	9124703a 	and	r18,r18,r4
    12f4:	0039883a 	mov	fp,zero
    12f8:	103e891e 	bne	r2,zero,d20 <__alt_data_end+0xfffe0d20>
    12fc:	d9002917 	ldw	r4,164(sp)
    1300:	2002c11e 	bne	r4,zero,1e08 <___vfprintf_internal_r+0x1630>
    1304:	d8002915 	stw	zero,164(sp)
    1308:	d8002e15 	stw	zero,184(sp)
    130c:	dc001e04 	addi	r16,sp,120
    1310:	003ef806 	br	ef4 <__alt_data_end+0xfffe0ef4>
    1314:	18c03fcc 	andi	r3,r3,255
    1318:	18059d1e 	bne	r3,zero,2990 <___vfprintf_internal_r+0x21b8>
    131c:	01400074 	movhi	r5,1
    1320:	297d4204 	addi	r5,r5,-2808
    1324:	d9403915 	stw	r5,228(sp)
    1328:	9080080c 	andi	r2,r18,32
    132c:	10005226 	beq	r2,zero,1478 <___vfprintf_internal_r+0xca0>
    1330:	d8802d17 	ldw	r2,180(sp)
    1334:	14c00017 	ldw	r19,0(r2)
    1338:	15800117 	ldw	r22,4(r2)
    133c:	10800204 	addi	r2,r2,8
    1340:	d8802d15 	stw	r2,180(sp)
    1344:	9080004c 	andi	r2,r18,1
    1348:	10019026 	beq	r2,zero,198c <___vfprintf_internal_r+0x11b4>
    134c:	9d84b03a 	or	r2,r19,r22
    1350:	10036926 	beq	r2,zero,20f8 <___vfprintf_internal_r+0x1920>
    1354:	d8c02917 	ldw	r3,164(sp)
    1358:	00800c04 	movi	r2,48
    135c:	d8802705 	stb	r2,156(sp)
    1360:	dc402745 	stb	r17,157(sp)
    1364:	d8002785 	stb	zero,158(sp)
    1368:	90800094 	ori	r2,r18,2
    136c:	18045d16 	blt	r3,zero,24e4 <___vfprintf_internal_r+0x1d0c>
    1370:	00bfdfc4 	movi	r2,-129
    1374:	90a4703a 	and	r18,r18,r2
    1378:	94800094 	ori	r18,r18,2
    137c:	0039883a 	mov	fp,zero
    1380:	d9003917 	ldw	r4,228(sp)
    1384:	dc001e04 	addi	r16,sp,120
    1388:	988003cc 	andi	r2,r19,15
    138c:	b006973a 	slli	r3,r22,28
    1390:	2085883a 	add	r2,r4,r2
    1394:	9826d13a 	srli	r19,r19,4
    1398:	10800003 	ldbu	r2,0(r2)
    139c:	b02cd13a 	srli	r22,r22,4
    13a0:	843fffc4 	addi	r16,r16,-1
    13a4:	1ce6b03a 	or	r19,r3,r19
    13a8:	80800005 	stb	r2,0(r16)
    13ac:	9d84b03a 	or	r2,r19,r22
    13b0:	103ff51e 	bne	r2,zero,1388 <__alt_data_end+0xfffe1388>
    13b4:	d8c02817 	ldw	r3,160(sp)
    13b8:	1c07c83a 	sub	r3,r3,r16
    13bc:	d8c02e15 	stw	r3,184(sp)
    13c0:	003ecc06 	br	ef4 <__alt_data_end+0xfffe0ef4>
    13c4:	18c03fcc 	andi	r3,r3,255
    13c8:	183e9f26 	beq	r3,zero,e48 <__alt_data_end+0xfffe0e48>
    13cc:	d9c02785 	stb	r7,158(sp)
    13d0:	003e9d06 	br	e48 <__alt_data_end+0xfffe0e48>
    13d4:	00c00044 	movi	r3,1
    13d8:	01c00ac4 	movi	r7,43
    13dc:	ac400007 	ldb	r17,0(r21)
    13e0:	003d5e06 	br	95c <__alt_data_end+0xfffe095c>
    13e4:	94800814 	ori	r18,r18,32
    13e8:	ac400007 	ldb	r17,0(r21)
    13ec:	003d5b06 	br	95c <__alt_data_end+0xfffe095c>
    13f0:	d8c02d17 	ldw	r3,180(sp)
    13f4:	d8002785 	stb	zero,158(sp)
    13f8:	1c000017 	ldw	r16,0(r3)
    13fc:	1cc00104 	addi	r19,r3,4
    1400:	80041926 	beq	r16,zero,2468 <___vfprintf_internal_r+0x1c90>
    1404:	d9002917 	ldw	r4,164(sp)
    1408:	2003d016 	blt	r4,zero,234c <___vfprintf_internal_r+0x1b74>
    140c:	200d883a 	mov	r6,r4
    1410:	000b883a 	mov	r5,zero
    1414:	8009883a 	mov	r4,r16
    1418:	da003d15 	stw	r8,244(sp)
    141c:	0005fe80 	call	5fe8 <memchr>
    1420:	da003d17 	ldw	r8,244(sp)
    1424:	10045426 	beq	r2,zero,2578 <___vfprintf_internal_r+0x1da0>
    1428:	1405c83a 	sub	r2,r2,r16
    142c:	d8802e15 	stw	r2,184(sp)
    1430:	1003cc16 	blt	r2,zero,2364 <___vfprintf_internal_r+0x1b8c>
    1434:	df002783 	ldbu	fp,158(sp)
    1438:	d8802a15 	stw	r2,168(sp)
    143c:	dcc02d15 	stw	r19,180(sp)
    1440:	d8002915 	stw	zero,164(sp)
    1444:	d8003215 	stw	zero,200(sp)
    1448:	003eb006 	br	f0c <__alt_data_end+0xfffe0f0c>
    144c:	18c03fcc 	andi	r3,r3,255
    1450:	183f9b26 	beq	r3,zero,12c0 <__alt_data_end+0xfffe12c0>
    1454:	d9c02785 	stb	r7,158(sp)
    1458:	003f9906 	br	12c0 <__alt_data_end+0xfffe12c0>
    145c:	18c03fcc 	andi	r3,r3,255
    1460:	1805551e 	bne	r3,zero,29b8 <___vfprintf_internal_r+0x21e0>
    1464:	01400074 	movhi	r5,1
    1468:	297d4704 	addi	r5,r5,-2788
    146c:	d9403915 	stw	r5,228(sp)
    1470:	9080080c 	andi	r2,r18,32
    1474:	103fae1e 	bne	r2,zero,1330 <__alt_data_end+0xfffe1330>
    1478:	9080040c 	andi	r2,r18,16
    147c:	1002de26 	beq	r2,zero,1ff8 <___vfprintf_internal_r+0x1820>
    1480:	d8c02d17 	ldw	r3,180(sp)
    1484:	002d883a 	mov	r22,zero
    1488:	1cc00017 	ldw	r19,0(r3)
    148c:	18c00104 	addi	r3,r3,4
    1490:	d8c02d15 	stw	r3,180(sp)
    1494:	003fab06 	br	1344 <__alt_data_end+0xfffe1344>
    1498:	38803fcc 	andi	r2,r7,255
    149c:	1080201c 	xori	r2,r2,128
    14a0:	10bfe004 	addi	r2,r2,-128
    14a4:	1002d21e 	bne	r2,zero,1ff0 <___vfprintf_internal_r+0x1818>
    14a8:	00c00044 	movi	r3,1
    14ac:	01c00804 	movi	r7,32
    14b0:	ac400007 	ldb	r17,0(r21)
    14b4:	003d2906 	br	95c <__alt_data_end+0xfffe095c>
    14b8:	94800054 	ori	r18,r18,1
    14bc:	ac400007 	ldb	r17,0(r21)
    14c0:	003d2606 	br	95c <__alt_data_end+0xfffe095c>
    14c4:	18c03fcc 	andi	r3,r3,255
    14c8:	183e0526 	beq	r3,zero,ce0 <__alt_data_end+0xfffe0ce0>
    14cc:	d9c02785 	stb	r7,158(sp)
    14d0:	003e0306 	br	ce0 <__alt_data_end+0xfffe0ce0>
    14d4:	94801014 	ori	r18,r18,64
    14d8:	ac400007 	ldb	r17,0(r21)
    14dc:	003d1f06 	br	95c <__alt_data_end+0xfffe095c>
    14e0:	ac400007 	ldb	r17,0(r21)
    14e4:	8a438726 	beq	r17,r9,2304 <___vfprintf_internal_r+0x1b2c>
    14e8:	94800414 	ori	r18,r18,16
    14ec:	003d1b06 	br	95c <__alt_data_end+0xfffe095c>
    14f0:	18c03fcc 	andi	r3,r3,255
    14f4:	1805341e 	bne	r3,zero,29c8 <___vfprintf_internal_r+0x21f0>
    14f8:	9080080c 	andi	r2,r18,32
    14fc:	1002cd26 	beq	r2,zero,2034 <___vfprintf_internal_r+0x185c>
    1500:	d9402d17 	ldw	r5,180(sp)
    1504:	d9002f17 	ldw	r4,188(sp)
    1508:	28800017 	ldw	r2,0(r5)
    150c:	2007d7fa 	srai	r3,r4,31
    1510:	29400104 	addi	r5,r5,4
    1514:	d9402d15 	stw	r5,180(sp)
    1518:	11000015 	stw	r4,0(r2)
    151c:	10c00115 	stw	r3,4(r2)
    1520:	003ce506 	br	8b8 <__alt_data_end+0xfffe08b8>
    1524:	d8c02d17 	ldw	r3,180(sp)
    1528:	d9002d17 	ldw	r4,180(sp)
    152c:	d8002785 	stb	zero,158(sp)
    1530:	18800017 	ldw	r2,0(r3)
    1534:	21000104 	addi	r4,r4,4
    1538:	00c00044 	movi	r3,1
    153c:	d8c02a15 	stw	r3,168(sp)
    1540:	d8801405 	stb	r2,80(sp)
    1544:	d9002d15 	stw	r4,180(sp)
    1548:	d8c02e15 	stw	r3,184(sp)
    154c:	d8002915 	stw	zero,164(sp)
    1550:	d8003215 	stw	zero,200(sp)
    1554:	dc001404 	addi	r16,sp,80
    1558:	0039883a 	mov	fp,zero
    155c:	003e7206 	br	f28 <__alt_data_end+0xfffe0f28>
    1560:	01000074 	movhi	r4,1
    1564:	213d4704 	addi	r4,r4,-2788
    1568:	0039883a 	mov	fp,zero
    156c:	d9003915 	stw	r4,228(sp)
    1570:	04401e04 	movi	r17,120
    1574:	003f8206 	br	1380 <__alt_data_end+0xfffe1380>
    1578:	18c03fcc 	andi	r3,r3,255
    157c:	1805061e 	bne	r3,zero,2998 <___vfprintf_internal_r+0x21c0>
    1580:	883d9126 	beq	r17,zero,bc8 <__alt_data_end+0xfffe0bc8>
    1584:	00c00044 	movi	r3,1
    1588:	d8c02a15 	stw	r3,168(sp)
    158c:	dc401405 	stb	r17,80(sp)
    1590:	d8002785 	stb	zero,158(sp)
    1594:	003fec06 	br	1548 <__alt_data_end+0xfffe1548>
    1598:	01400074 	movhi	r5,1
    159c:	297d4704 	addi	r5,r5,-2788
    15a0:	d9403915 	stw	r5,228(sp)
    15a4:	d8c02d15 	stw	r3,180(sp)
    15a8:	1025883a 	mov	r18,r2
    15ac:	04401e04 	movi	r17,120
    15b0:	9d84b03a 	or	r2,r19,r22
    15b4:	1000fc1e 	bne	r2,zero,19a8 <___vfprintf_internal_r+0x11d0>
    15b8:	0039883a 	mov	fp,zero
    15bc:	00800084 	movi	r2,2
    15c0:	10803fcc 	andi	r2,r2,255
    15c4:	00c00044 	movi	r3,1
    15c8:	10c20f26 	beq	r2,r3,1e08 <___vfprintf_internal_r+0x1630>
    15cc:	00c00084 	movi	r3,2
    15d0:	10fd6326 	beq	r2,r3,b60 <__alt_data_end+0xfffe0b60>
    15d4:	003e2d06 	br	e8c <__alt_data_end+0xfffe0e8c>
    15d8:	d8c02017 	ldw	r3,128(sp)
    15dc:	003e9306 	br	102c <__alt_data_end+0xfffe102c>
    15e0:	00801944 	movi	r2,101
    15e4:	14407e0e 	bge	r2,r17,17e0 <___vfprintf_internal_r+0x1008>
    15e8:	d9003617 	ldw	r4,216(sp)
    15ec:	d9403817 	ldw	r5,224(sp)
    15f0:	000d883a 	mov	r6,zero
    15f4:	000f883a 	mov	r7,zero
    15f8:	d8c03c15 	stw	r3,240(sp)
    15fc:	da003d15 	stw	r8,244(sp)
    1600:	000b8980 	call	b898 <__eqdf2>
    1604:	d8c03c17 	ldw	r3,240(sp)
    1608:	da003d17 	ldw	r8,244(sp)
    160c:	1000f71e 	bne	r2,zero,19ec <___vfprintf_internal_r+0x1214>
    1610:	d8801f17 	ldw	r2,124(sp)
    1614:	01000074 	movhi	r4,1
    1618:	213d4e04 	addi	r4,r4,-2760
    161c:	18c00044 	addi	r3,r3,1
    1620:	10800044 	addi	r2,r2,1
    1624:	41000015 	stw	r4,0(r8)
    1628:	01000044 	movi	r4,1
    162c:	41000115 	stw	r4,4(r8)
    1630:	d8c02015 	stw	r3,128(sp)
    1634:	d8801f15 	stw	r2,124(sp)
    1638:	010001c4 	movi	r4,7
    163c:	2082b816 	blt	r4,r2,2120 <___vfprintf_internal_r+0x1948>
    1640:	42000204 	addi	r8,r8,8
    1644:	d8802617 	ldw	r2,152(sp)
    1648:	d9403317 	ldw	r5,204(sp)
    164c:	11400216 	blt	r2,r5,1658 <___vfprintf_internal_r+0xe80>
    1650:	9080004c 	andi	r2,r18,1
    1654:	103ed526 	beq	r2,zero,11ac <__alt_data_end+0xfffe11ac>
    1658:	d8803717 	ldw	r2,220(sp)
    165c:	d9003417 	ldw	r4,208(sp)
    1660:	d9403717 	ldw	r5,220(sp)
    1664:	1887883a 	add	r3,r3,r2
    1668:	d8801f17 	ldw	r2,124(sp)
    166c:	41000015 	stw	r4,0(r8)
    1670:	41400115 	stw	r5,4(r8)
    1674:	10800044 	addi	r2,r2,1
    1678:	d8c02015 	stw	r3,128(sp)
    167c:	d8801f15 	stw	r2,124(sp)
    1680:	010001c4 	movi	r4,7
    1684:	20832916 	blt	r4,r2,232c <___vfprintf_internal_r+0x1b54>
    1688:	42000204 	addi	r8,r8,8
    168c:	d8803317 	ldw	r2,204(sp)
    1690:	143fffc4 	addi	r16,r2,-1
    1694:	043ec50e 	bge	zero,r16,11ac <__alt_data_end+0xfffe11ac>
    1698:	04400404 	movi	r17,16
    169c:	d8801f17 	ldw	r2,124(sp)
    16a0:	8c00880e 	bge	r17,r16,18c4 <___vfprintf_internal_r+0x10ec>
    16a4:	01400074 	movhi	r5,1
    16a8:	297d4e84 	addi	r5,r5,-2758
    16ac:	d9402b15 	stw	r5,172(sp)
    16b0:	058001c4 	movi	r22,7
    16b4:	dcc02c17 	ldw	r19,176(sp)
    16b8:	00000306 	br	16c8 <___vfprintf_internal_r+0xef0>
    16bc:	42000204 	addi	r8,r8,8
    16c0:	843ffc04 	addi	r16,r16,-16
    16c4:	8c00820e 	bge	r17,r16,18d0 <___vfprintf_internal_r+0x10f8>
    16c8:	18c00404 	addi	r3,r3,16
    16cc:	10800044 	addi	r2,r2,1
    16d0:	45000015 	stw	r20,0(r8)
    16d4:	44400115 	stw	r17,4(r8)
    16d8:	d8c02015 	stw	r3,128(sp)
    16dc:	d8801f15 	stw	r2,124(sp)
    16e0:	b0bff60e 	bge	r22,r2,16bc <__alt_data_end+0xfffe16bc>
    16e4:	d9801e04 	addi	r6,sp,120
    16e8:	b80b883a 	mov	r5,r23
    16ec:	9809883a 	mov	r4,r19
    16f0:	0007dd40 	call	7dd4 <__sprint_r>
    16f4:	103d3a1e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    16f8:	d8c02017 	ldw	r3,128(sp)
    16fc:	d8801f17 	ldw	r2,124(sp)
    1700:	da000404 	addi	r8,sp,16
    1704:	003fee06 	br	16c0 <__alt_data_end+0xfffe16c0>
    1708:	d9403117 	ldw	r5,196(sp)
    170c:	d8802a17 	ldw	r2,168(sp)
    1710:	28adc83a 	sub	r22,r5,r2
    1714:	05be630e 	bge	zero,r22,10a4 <__alt_data_end+0xfffe10a4>
    1718:	07000404 	movi	fp,16
    171c:	d8801f17 	ldw	r2,124(sp)
    1720:	e5838f0e 	bge	fp,r22,2560 <___vfprintf_internal_r+0x1d88>
    1724:	01400074 	movhi	r5,1
    1728:	297d4e84 	addi	r5,r5,-2758
    172c:	dc403015 	stw	r17,192(sp)
    1730:	d9402b15 	stw	r5,172(sp)
    1734:	b023883a 	mov	r17,r22
    1738:	04c001c4 	movi	r19,7
    173c:	a82d883a 	mov	r22,r21
    1740:	902b883a 	mov	r21,r18
    1744:	8025883a 	mov	r18,r16
    1748:	dc002c17 	ldw	r16,176(sp)
    174c:	00000306 	br	175c <___vfprintf_internal_r+0xf84>
    1750:	8c7ffc04 	addi	r17,r17,-16
    1754:	42000204 	addi	r8,r8,8
    1758:	e440110e 	bge	fp,r17,17a0 <___vfprintf_internal_r+0xfc8>
    175c:	18c00404 	addi	r3,r3,16
    1760:	10800044 	addi	r2,r2,1
    1764:	45000015 	stw	r20,0(r8)
    1768:	47000115 	stw	fp,4(r8)
    176c:	d8c02015 	stw	r3,128(sp)
    1770:	d8801f15 	stw	r2,124(sp)
    1774:	98bff60e 	bge	r19,r2,1750 <__alt_data_end+0xfffe1750>
    1778:	d9801e04 	addi	r6,sp,120
    177c:	b80b883a 	mov	r5,r23
    1780:	8009883a 	mov	r4,r16
    1784:	0007dd40 	call	7dd4 <__sprint_r>
    1788:	103d151e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    178c:	8c7ffc04 	addi	r17,r17,-16
    1790:	d8c02017 	ldw	r3,128(sp)
    1794:	d8801f17 	ldw	r2,124(sp)
    1798:	da000404 	addi	r8,sp,16
    179c:	e47fef16 	blt	fp,r17,175c <__alt_data_end+0xfffe175c>
    17a0:	9021883a 	mov	r16,r18
    17a4:	a825883a 	mov	r18,r21
    17a8:	b02b883a 	mov	r21,r22
    17ac:	882d883a 	mov	r22,r17
    17b0:	dc403017 	ldw	r17,192(sp)
    17b4:	d9002b17 	ldw	r4,172(sp)
    17b8:	1d87883a 	add	r3,r3,r22
    17bc:	10800044 	addi	r2,r2,1
    17c0:	41000015 	stw	r4,0(r8)
    17c4:	45800115 	stw	r22,4(r8)
    17c8:	d8c02015 	stw	r3,128(sp)
    17cc:	d8801f15 	stw	r2,124(sp)
    17d0:	010001c4 	movi	r4,7
    17d4:	20818e16 	blt	r4,r2,1e10 <___vfprintf_internal_r+0x1638>
    17d8:	42000204 	addi	r8,r8,8
    17dc:	003e3106 	br	10a4 <__alt_data_end+0xfffe10a4>
    17e0:	d9403317 	ldw	r5,204(sp)
    17e4:	00800044 	movi	r2,1
    17e8:	18c00044 	addi	r3,r3,1
    17ec:	1141530e 	bge	r2,r5,1d3c <___vfprintf_internal_r+0x1564>
    17f0:	dc401f17 	ldw	r17,124(sp)
    17f4:	00800044 	movi	r2,1
    17f8:	40800115 	stw	r2,4(r8)
    17fc:	8c400044 	addi	r17,r17,1
    1800:	44000015 	stw	r16,0(r8)
    1804:	d8c02015 	stw	r3,128(sp)
    1808:	dc401f15 	stw	r17,124(sp)
    180c:	008001c4 	movi	r2,7
    1810:	14416b16 	blt	r2,r17,1dc0 <___vfprintf_internal_r+0x15e8>
    1814:	42000204 	addi	r8,r8,8
    1818:	d8803717 	ldw	r2,220(sp)
    181c:	d9003417 	ldw	r4,208(sp)
    1820:	8c400044 	addi	r17,r17,1
    1824:	10c7883a 	add	r3,r2,r3
    1828:	40800115 	stw	r2,4(r8)
    182c:	41000015 	stw	r4,0(r8)
    1830:	d8c02015 	stw	r3,128(sp)
    1834:	dc401f15 	stw	r17,124(sp)
    1838:	008001c4 	movi	r2,7
    183c:	14416916 	blt	r2,r17,1de4 <___vfprintf_internal_r+0x160c>
    1840:	45800204 	addi	r22,r8,8
    1844:	d9003617 	ldw	r4,216(sp)
    1848:	d9403817 	ldw	r5,224(sp)
    184c:	000d883a 	mov	r6,zero
    1850:	000f883a 	mov	r7,zero
    1854:	d8c03c15 	stw	r3,240(sp)
    1858:	000b8980 	call	b898 <__eqdf2>
    185c:	d8c03c17 	ldw	r3,240(sp)
    1860:	1000bc26 	beq	r2,zero,1b54 <___vfprintf_internal_r+0x137c>
    1864:	d9403317 	ldw	r5,204(sp)
    1868:	84000044 	addi	r16,r16,1
    186c:	8c400044 	addi	r17,r17,1
    1870:	28bfffc4 	addi	r2,r5,-1
    1874:	1887883a 	add	r3,r3,r2
    1878:	b0800115 	stw	r2,4(r22)
    187c:	b4000015 	stw	r16,0(r22)
    1880:	d8c02015 	stw	r3,128(sp)
    1884:	dc401f15 	stw	r17,124(sp)
    1888:	008001c4 	movi	r2,7
    188c:	14414316 	blt	r2,r17,1d9c <___vfprintf_internal_r+0x15c4>
    1890:	b5800204 	addi	r22,r22,8
    1894:	d9003a17 	ldw	r4,232(sp)
    1898:	df0022c4 	addi	fp,sp,139
    189c:	8c400044 	addi	r17,r17,1
    18a0:	20c7883a 	add	r3,r4,r3
    18a4:	b7000015 	stw	fp,0(r22)
    18a8:	b1000115 	stw	r4,4(r22)
    18ac:	d8c02015 	stw	r3,128(sp)
    18b0:	dc401f15 	stw	r17,124(sp)
    18b4:	008001c4 	movi	r2,7
    18b8:	14400e16 	blt	r2,r17,18f4 <___vfprintf_internal_r+0x111c>
    18bc:	b2000204 	addi	r8,r22,8
    18c0:	003e3a06 	br	11ac <__alt_data_end+0xfffe11ac>
    18c4:	01000074 	movhi	r4,1
    18c8:	213d4e84 	addi	r4,r4,-2758
    18cc:	d9002b15 	stw	r4,172(sp)
    18d0:	d9002b17 	ldw	r4,172(sp)
    18d4:	1c07883a 	add	r3,r3,r16
    18d8:	44000115 	stw	r16,4(r8)
    18dc:	41000015 	stw	r4,0(r8)
    18e0:	10800044 	addi	r2,r2,1
    18e4:	d8c02015 	stw	r3,128(sp)
    18e8:	d8801f15 	stw	r2,124(sp)
    18ec:	010001c4 	movi	r4,7
    18f0:	20be2d0e 	bge	r4,r2,11a8 <__alt_data_end+0xfffe11a8>
    18f4:	d9002c17 	ldw	r4,176(sp)
    18f8:	d9801e04 	addi	r6,sp,120
    18fc:	b80b883a 	mov	r5,r23
    1900:	0007dd40 	call	7dd4 <__sprint_r>
    1904:	103cb61e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1908:	d8c02017 	ldw	r3,128(sp)
    190c:	da000404 	addi	r8,sp,16
    1910:	003e2606 	br	11ac <__alt_data_end+0xfffe11ac>
    1914:	d9002c17 	ldw	r4,176(sp)
    1918:	d9801e04 	addi	r6,sp,120
    191c:	b80b883a 	mov	r5,r23
    1920:	0007dd40 	call	7dd4 <__sprint_r>
    1924:	103e5d26 	beq	r2,zero,129c <__alt_data_end+0xfffe129c>
    1928:	003cad06 	br	be0 <__alt_data_end+0xfffe0be0>
    192c:	d9002c17 	ldw	r4,176(sp)
    1930:	d9801e04 	addi	r6,sp,120
    1934:	b80b883a 	mov	r5,r23
    1938:	0007dd40 	call	7dd4 <__sprint_r>
    193c:	103ca81e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1940:	d8c02017 	ldw	r3,128(sp)
    1944:	da000404 	addi	r8,sp,16
    1948:	003e0b06 	br	1178 <__alt_data_end+0xfffe1178>
    194c:	d9002c17 	ldw	r4,176(sp)
    1950:	d9801e04 	addi	r6,sp,120
    1954:	b80b883a 	mov	r5,r23
    1958:	0007dd40 	call	7dd4 <__sprint_r>
    195c:	103ca01e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1960:	d8c02017 	ldw	r3,128(sp)
    1964:	da000404 	addi	r8,sp,16
    1968:	003dbd06 	br	1060 <__alt_data_end+0xfffe1060>
    196c:	d9002c17 	ldw	r4,176(sp)
    1970:	d9801e04 	addi	r6,sp,120
    1974:	b80b883a 	mov	r5,r23
    1978:	0007dd40 	call	7dd4 <__sprint_r>
    197c:	103c981e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1980:	d8c02017 	ldw	r3,128(sp)
    1984:	da000404 	addi	r8,sp,16
    1988:	003dc306 	br	1098 <__alt_data_end+0xfffe1098>
    198c:	d8802917 	ldw	r2,164(sp)
    1990:	d8002785 	stb	zero,158(sp)
    1994:	103f0616 	blt	r2,zero,15b0 <__alt_data_end+0xfffe15b0>
    1998:	00ffdfc4 	movi	r3,-129
    199c:	9d84b03a 	or	r2,r19,r22
    19a0:	90e4703a 	and	r18,r18,r3
    19a4:	103c6b26 	beq	r2,zero,b54 <__alt_data_end+0xfffe0b54>
    19a8:	0039883a 	mov	fp,zero
    19ac:	003e7406 	br	1380 <__alt_data_end+0xfffe1380>
    19b0:	9080040c 	andi	r2,r18,16
    19b4:	1001b326 	beq	r2,zero,2084 <___vfprintf_internal_r+0x18ac>
    19b8:	d9002d17 	ldw	r4,180(sp)
    19bc:	d9402917 	ldw	r5,164(sp)
    19c0:	d8002785 	stb	zero,158(sp)
    19c4:	20800104 	addi	r2,r4,4
    19c8:	24c00017 	ldw	r19,0(r4)
    19cc:	002d883a 	mov	r22,zero
    19d0:	2801b516 	blt	r5,zero,20a8 <___vfprintf_internal_r+0x18d0>
    19d4:	00ffdfc4 	movi	r3,-129
    19d8:	d8802d15 	stw	r2,180(sp)
    19dc:	90e4703a 	and	r18,r18,r3
    19e0:	983d2726 	beq	r19,zero,e80 <__alt_data_end+0xfffe0e80>
    19e4:	0039883a 	mov	fp,zero
    19e8:	003d2a06 	br	e94 <__alt_data_end+0xfffe0e94>
    19ec:	dc402617 	ldw	r17,152(sp)
    19f0:	0441d30e 	bge	zero,r17,2140 <___vfprintf_internal_r+0x1968>
    19f4:	dc403217 	ldw	r17,200(sp)
    19f8:	d8803317 	ldw	r2,204(sp)
    19fc:	1440010e 	bge	r2,r17,1a04 <___vfprintf_internal_r+0x122c>
    1a00:	1023883a 	mov	r17,r2
    1a04:	04400a0e 	bge	zero,r17,1a30 <___vfprintf_internal_r+0x1258>
    1a08:	d8801f17 	ldw	r2,124(sp)
    1a0c:	1c47883a 	add	r3,r3,r17
    1a10:	44000015 	stw	r16,0(r8)
    1a14:	10800044 	addi	r2,r2,1
    1a18:	44400115 	stw	r17,4(r8)
    1a1c:	d8c02015 	stw	r3,128(sp)
    1a20:	d8801f15 	stw	r2,124(sp)
    1a24:	010001c4 	movi	r4,7
    1a28:	20826516 	blt	r4,r2,23c0 <___vfprintf_internal_r+0x1be8>
    1a2c:	42000204 	addi	r8,r8,8
    1a30:	88026116 	blt	r17,zero,23b8 <___vfprintf_internal_r+0x1be0>
    1a34:	d9003217 	ldw	r4,200(sp)
    1a38:	2463c83a 	sub	r17,r4,r17
    1a3c:	04407b0e 	bge	zero,r17,1c2c <___vfprintf_internal_r+0x1454>
    1a40:	05800404 	movi	r22,16
    1a44:	d8801f17 	ldw	r2,124(sp)
    1a48:	b4419d0e 	bge	r22,r17,20c0 <___vfprintf_internal_r+0x18e8>
    1a4c:	01000074 	movhi	r4,1
    1a50:	213d4e84 	addi	r4,r4,-2758
    1a54:	d9002b15 	stw	r4,172(sp)
    1a58:	070001c4 	movi	fp,7
    1a5c:	dcc02c17 	ldw	r19,176(sp)
    1a60:	00000306 	br	1a70 <___vfprintf_internal_r+0x1298>
    1a64:	42000204 	addi	r8,r8,8
    1a68:	8c7ffc04 	addi	r17,r17,-16
    1a6c:	b441970e 	bge	r22,r17,20cc <___vfprintf_internal_r+0x18f4>
    1a70:	18c00404 	addi	r3,r3,16
    1a74:	10800044 	addi	r2,r2,1
    1a78:	45000015 	stw	r20,0(r8)
    1a7c:	45800115 	stw	r22,4(r8)
    1a80:	d8c02015 	stw	r3,128(sp)
    1a84:	d8801f15 	stw	r2,124(sp)
    1a88:	e0bff60e 	bge	fp,r2,1a64 <__alt_data_end+0xfffe1a64>
    1a8c:	d9801e04 	addi	r6,sp,120
    1a90:	b80b883a 	mov	r5,r23
    1a94:	9809883a 	mov	r4,r19
    1a98:	0007dd40 	call	7dd4 <__sprint_r>
    1a9c:	103c501e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1aa0:	d8c02017 	ldw	r3,128(sp)
    1aa4:	d8801f17 	ldw	r2,124(sp)
    1aa8:	da000404 	addi	r8,sp,16
    1aac:	003fee06 	br	1a68 <__alt_data_end+0xfffe1a68>
    1ab0:	d9002c17 	ldw	r4,176(sp)
    1ab4:	d9801e04 	addi	r6,sp,120
    1ab8:	b80b883a 	mov	r5,r23
    1abc:	0007dd40 	call	7dd4 <__sprint_r>
    1ac0:	103c471e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1ac4:	d8c02017 	ldw	r3,128(sp)
    1ac8:	df002787 	ldb	fp,158(sp)
    1acc:	da000404 	addi	r8,sp,16
    1ad0:	003d5606 	br	102c <__alt_data_end+0xfffe102c>
    1ad4:	9080040c 	andi	r2,r18,16
    1ad8:	10016126 	beq	r2,zero,2060 <___vfprintf_internal_r+0x1888>
    1adc:	d8802d17 	ldw	r2,180(sp)
    1ae0:	14c00017 	ldw	r19,0(r2)
    1ae4:	10800104 	addi	r2,r2,4
    1ae8:	d8802d15 	stw	r2,180(sp)
    1aec:	982dd7fa 	srai	r22,r19,31
    1af0:	b005883a 	mov	r2,r22
    1af4:	003c8206 	br	d00 <__alt_data_end+0xfffe0d00>
    1af8:	9080040c 	andi	r2,r18,16
    1afc:	10003526 	beq	r2,zero,1bd4 <___vfprintf_internal_r+0x13fc>
    1b00:	d9402d17 	ldw	r5,180(sp)
    1b04:	d8c02917 	ldw	r3,164(sp)
    1b08:	d8002785 	stb	zero,158(sp)
    1b0c:	28800104 	addi	r2,r5,4
    1b10:	2cc00017 	ldw	r19,0(r5)
    1b14:	002d883a 	mov	r22,zero
    1b18:	18003716 	blt	r3,zero,1bf8 <___vfprintf_internal_r+0x1420>
    1b1c:	00ffdfc4 	movi	r3,-129
    1b20:	d8802d15 	stw	r2,180(sp)
    1b24:	90e4703a 	and	r18,r18,r3
    1b28:	0039883a 	mov	fp,zero
    1b2c:	983df326 	beq	r19,zero,12fc <__alt_data_end+0xfffe12fc>
    1b30:	00800244 	movi	r2,9
    1b34:	14fc7b36 	bltu	r2,r19,d24 <__alt_data_end+0xfffe0d24>
    1b38:	d8c02817 	ldw	r3,160(sp)
    1b3c:	dc001dc4 	addi	r16,sp,119
    1b40:	9cc00c04 	addi	r19,r19,48
    1b44:	1c07c83a 	sub	r3,r3,r16
    1b48:	dcc01dc5 	stb	r19,119(sp)
    1b4c:	d8c02e15 	stw	r3,184(sp)
    1b50:	003ce806 	br	ef4 <__alt_data_end+0xfffe0ef4>
    1b54:	d8803317 	ldw	r2,204(sp)
    1b58:	143fffc4 	addi	r16,r2,-1
    1b5c:	043f4d0e 	bge	zero,r16,1894 <__alt_data_end+0xfffe1894>
    1b60:	07000404 	movi	fp,16
    1b64:	e400810e 	bge	fp,r16,1d6c <___vfprintf_internal_r+0x1594>
    1b68:	01400074 	movhi	r5,1
    1b6c:	297d4e84 	addi	r5,r5,-2758
    1b70:	d9402b15 	stw	r5,172(sp)
    1b74:	01c001c4 	movi	r7,7
    1b78:	dcc02c17 	ldw	r19,176(sp)
    1b7c:	00000306 	br	1b8c <___vfprintf_internal_r+0x13b4>
    1b80:	b5800204 	addi	r22,r22,8
    1b84:	843ffc04 	addi	r16,r16,-16
    1b88:	e4007b0e 	bge	fp,r16,1d78 <___vfprintf_internal_r+0x15a0>
    1b8c:	18c00404 	addi	r3,r3,16
    1b90:	8c400044 	addi	r17,r17,1
    1b94:	b5000015 	stw	r20,0(r22)
    1b98:	b7000115 	stw	fp,4(r22)
    1b9c:	d8c02015 	stw	r3,128(sp)
    1ba0:	dc401f15 	stw	r17,124(sp)
    1ba4:	3c7ff60e 	bge	r7,r17,1b80 <__alt_data_end+0xfffe1b80>
    1ba8:	d9801e04 	addi	r6,sp,120
    1bac:	b80b883a 	mov	r5,r23
    1bb0:	9809883a 	mov	r4,r19
    1bb4:	d9c03c15 	stw	r7,240(sp)
    1bb8:	0007dd40 	call	7dd4 <__sprint_r>
    1bbc:	d9c03c17 	ldw	r7,240(sp)
    1bc0:	103c071e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1bc4:	d8c02017 	ldw	r3,128(sp)
    1bc8:	dc401f17 	ldw	r17,124(sp)
    1bcc:	dd800404 	addi	r22,sp,16
    1bd0:	003fec06 	br	1b84 <__alt_data_end+0xfffe1b84>
    1bd4:	9080100c 	andi	r2,r18,64
    1bd8:	d8002785 	stb	zero,158(sp)
    1bdc:	10010e26 	beq	r2,zero,2018 <___vfprintf_internal_r+0x1840>
    1be0:	d9002d17 	ldw	r4,180(sp)
    1be4:	d9402917 	ldw	r5,164(sp)
    1be8:	002d883a 	mov	r22,zero
    1bec:	20800104 	addi	r2,r4,4
    1bf0:	24c0000b 	ldhu	r19,0(r4)
    1bf4:	283fc90e 	bge	r5,zero,1b1c <__alt_data_end+0xfffe1b1c>
    1bf8:	d8802d15 	stw	r2,180(sp)
    1bfc:	0039883a 	mov	fp,zero
    1c00:	9d84b03a 	or	r2,r19,r22
    1c04:	103c461e 	bne	r2,zero,d20 <__alt_data_end+0xfffe0d20>
    1c08:	00800044 	movi	r2,1
    1c0c:	003e6c06 	br	15c0 <__alt_data_end+0xfffe15c0>
    1c10:	d9002c17 	ldw	r4,176(sp)
    1c14:	d9801e04 	addi	r6,sp,120
    1c18:	b80b883a 	mov	r5,r23
    1c1c:	0007dd40 	call	7dd4 <__sprint_r>
    1c20:	103bef1e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1c24:	d8c02017 	ldw	r3,128(sp)
    1c28:	da000404 	addi	r8,sp,16
    1c2c:	d9003217 	ldw	r4,200(sp)
    1c30:	d8802617 	ldw	r2,152(sp)
    1c34:	d9403317 	ldw	r5,204(sp)
    1c38:	8123883a 	add	r17,r16,r4
    1c3c:	11400216 	blt	r2,r5,1c48 <___vfprintf_internal_r+0x1470>
    1c40:	9100004c 	andi	r4,r18,1
    1c44:	20000d26 	beq	r4,zero,1c7c <___vfprintf_internal_r+0x14a4>
    1c48:	d9003717 	ldw	r4,220(sp)
    1c4c:	d9403417 	ldw	r5,208(sp)
    1c50:	1907883a 	add	r3,r3,r4
    1c54:	d9001f17 	ldw	r4,124(sp)
    1c58:	41400015 	stw	r5,0(r8)
    1c5c:	d9403717 	ldw	r5,220(sp)
    1c60:	21000044 	addi	r4,r4,1
    1c64:	d8c02015 	stw	r3,128(sp)
    1c68:	41400115 	stw	r5,4(r8)
    1c6c:	d9001f15 	stw	r4,124(sp)
    1c70:	014001c4 	movi	r5,7
    1c74:	2901e816 	blt	r5,r4,2418 <___vfprintf_internal_r+0x1c40>
    1c78:	42000204 	addi	r8,r8,8
    1c7c:	d9003317 	ldw	r4,204(sp)
    1c80:	8121883a 	add	r16,r16,r4
    1c84:	2085c83a 	sub	r2,r4,r2
    1c88:	8461c83a 	sub	r16,r16,r17
    1c8c:	1400010e 	bge	r2,r16,1c94 <___vfprintf_internal_r+0x14bc>
    1c90:	1021883a 	mov	r16,r2
    1c94:	04000a0e 	bge	zero,r16,1cc0 <___vfprintf_internal_r+0x14e8>
    1c98:	d9001f17 	ldw	r4,124(sp)
    1c9c:	1c07883a 	add	r3,r3,r16
    1ca0:	44400015 	stw	r17,0(r8)
    1ca4:	21000044 	addi	r4,r4,1
    1ca8:	44000115 	stw	r16,4(r8)
    1cac:	d8c02015 	stw	r3,128(sp)
    1cb0:	d9001f15 	stw	r4,124(sp)
    1cb4:	014001c4 	movi	r5,7
    1cb8:	2901fb16 	blt	r5,r4,24a8 <___vfprintf_internal_r+0x1cd0>
    1cbc:	42000204 	addi	r8,r8,8
    1cc0:	8001f716 	blt	r16,zero,24a0 <___vfprintf_internal_r+0x1cc8>
    1cc4:	1421c83a 	sub	r16,r2,r16
    1cc8:	043d380e 	bge	zero,r16,11ac <__alt_data_end+0xfffe11ac>
    1ccc:	04400404 	movi	r17,16
    1cd0:	d8801f17 	ldw	r2,124(sp)
    1cd4:	8c3efb0e 	bge	r17,r16,18c4 <__alt_data_end+0xfffe18c4>
    1cd8:	01400074 	movhi	r5,1
    1cdc:	297d4e84 	addi	r5,r5,-2758
    1ce0:	d9402b15 	stw	r5,172(sp)
    1ce4:	058001c4 	movi	r22,7
    1ce8:	dcc02c17 	ldw	r19,176(sp)
    1cec:	00000306 	br	1cfc <___vfprintf_internal_r+0x1524>
    1cf0:	42000204 	addi	r8,r8,8
    1cf4:	843ffc04 	addi	r16,r16,-16
    1cf8:	8c3ef50e 	bge	r17,r16,18d0 <__alt_data_end+0xfffe18d0>
    1cfc:	18c00404 	addi	r3,r3,16
    1d00:	10800044 	addi	r2,r2,1
    1d04:	45000015 	stw	r20,0(r8)
    1d08:	44400115 	stw	r17,4(r8)
    1d0c:	d8c02015 	stw	r3,128(sp)
    1d10:	d8801f15 	stw	r2,124(sp)
    1d14:	b0bff60e 	bge	r22,r2,1cf0 <__alt_data_end+0xfffe1cf0>
    1d18:	d9801e04 	addi	r6,sp,120
    1d1c:	b80b883a 	mov	r5,r23
    1d20:	9809883a 	mov	r4,r19
    1d24:	0007dd40 	call	7dd4 <__sprint_r>
    1d28:	103bad1e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1d2c:	d8c02017 	ldw	r3,128(sp)
    1d30:	d8801f17 	ldw	r2,124(sp)
    1d34:	da000404 	addi	r8,sp,16
    1d38:	003fee06 	br	1cf4 <__alt_data_end+0xfffe1cf4>
    1d3c:	9088703a 	and	r4,r18,r2
    1d40:	203eab1e 	bne	r4,zero,17f0 <__alt_data_end+0xfffe17f0>
    1d44:	dc401f17 	ldw	r17,124(sp)
    1d48:	40800115 	stw	r2,4(r8)
    1d4c:	44000015 	stw	r16,0(r8)
    1d50:	8c400044 	addi	r17,r17,1
    1d54:	d8c02015 	stw	r3,128(sp)
    1d58:	dc401f15 	stw	r17,124(sp)
    1d5c:	008001c4 	movi	r2,7
    1d60:	14400e16 	blt	r2,r17,1d9c <___vfprintf_internal_r+0x15c4>
    1d64:	45800204 	addi	r22,r8,8
    1d68:	003eca06 	br	1894 <__alt_data_end+0xfffe1894>
    1d6c:	01000074 	movhi	r4,1
    1d70:	213d4e84 	addi	r4,r4,-2758
    1d74:	d9002b15 	stw	r4,172(sp)
    1d78:	d8802b17 	ldw	r2,172(sp)
    1d7c:	1c07883a 	add	r3,r3,r16
    1d80:	8c400044 	addi	r17,r17,1
    1d84:	b0800015 	stw	r2,0(r22)
    1d88:	b4000115 	stw	r16,4(r22)
    1d8c:	d8c02015 	stw	r3,128(sp)
    1d90:	dc401f15 	stw	r17,124(sp)
    1d94:	008001c4 	movi	r2,7
    1d98:	147ebd0e 	bge	r2,r17,1890 <__alt_data_end+0xfffe1890>
    1d9c:	d9002c17 	ldw	r4,176(sp)
    1da0:	d9801e04 	addi	r6,sp,120
    1da4:	b80b883a 	mov	r5,r23
    1da8:	0007dd40 	call	7dd4 <__sprint_r>
    1dac:	103b8c1e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1db0:	d8c02017 	ldw	r3,128(sp)
    1db4:	dc401f17 	ldw	r17,124(sp)
    1db8:	dd800404 	addi	r22,sp,16
    1dbc:	003eb506 	br	1894 <__alt_data_end+0xfffe1894>
    1dc0:	d9002c17 	ldw	r4,176(sp)
    1dc4:	d9801e04 	addi	r6,sp,120
    1dc8:	b80b883a 	mov	r5,r23
    1dcc:	0007dd40 	call	7dd4 <__sprint_r>
    1dd0:	103b831e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1dd4:	d8c02017 	ldw	r3,128(sp)
    1dd8:	dc401f17 	ldw	r17,124(sp)
    1ddc:	da000404 	addi	r8,sp,16
    1de0:	003e8d06 	br	1818 <__alt_data_end+0xfffe1818>
    1de4:	d9002c17 	ldw	r4,176(sp)
    1de8:	d9801e04 	addi	r6,sp,120
    1dec:	b80b883a 	mov	r5,r23
    1df0:	0007dd40 	call	7dd4 <__sprint_r>
    1df4:	103b7a1e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1df8:	d8c02017 	ldw	r3,128(sp)
    1dfc:	dc401f17 	ldw	r17,124(sp)
    1e00:	dd800404 	addi	r22,sp,16
    1e04:	003e8f06 	br	1844 <__alt_data_end+0xfffe1844>
    1e08:	0027883a 	mov	r19,zero
    1e0c:	003f4a06 	br	1b38 <__alt_data_end+0xfffe1b38>
    1e10:	d9002c17 	ldw	r4,176(sp)
    1e14:	d9801e04 	addi	r6,sp,120
    1e18:	b80b883a 	mov	r5,r23
    1e1c:	0007dd40 	call	7dd4 <__sprint_r>
    1e20:	103b6f1e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    1e24:	d8c02017 	ldw	r3,128(sp)
    1e28:	da000404 	addi	r8,sp,16
    1e2c:	003c9d06 	br	10a4 <__alt_data_end+0xfffe10a4>
    1e30:	04e7c83a 	sub	r19,zero,r19
    1e34:	9804c03a 	cmpne	r2,r19,zero
    1e38:	05adc83a 	sub	r22,zero,r22
    1e3c:	b0adc83a 	sub	r22,r22,r2
    1e40:	d8802917 	ldw	r2,164(sp)
    1e44:	07000b44 	movi	fp,45
    1e48:	df002785 	stb	fp,158(sp)
    1e4c:	10017b16 	blt	r2,zero,243c <___vfprintf_internal_r+0x1c64>
    1e50:	00bfdfc4 	movi	r2,-129
    1e54:	90a4703a 	and	r18,r18,r2
    1e58:	003bb106 	br	d20 <__alt_data_end+0xfffe0d20>
    1e5c:	d9003617 	ldw	r4,216(sp)
    1e60:	d9403817 	ldw	r5,224(sp)
    1e64:	da003d15 	stw	r8,244(sp)
    1e68:	00079f80 	call	79f8 <__fpclassifyd>
    1e6c:	da003d17 	ldw	r8,244(sp)
    1e70:	1000f026 	beq	r2,zero,2234 <___vfprintf_internal_r+0x1a5c>
    1e74:	d9002917 	ldw	r4,164(sp)
    1e78:	05bff7c4 	movi	r22,-33
    1e7c:	00bfffc4 	movi	r2,-1
    1e80:	8dac703a 	and	r22,r17,r22
    1e84:	20820026 	beq	r4,r2,2688 <___vfprintf_internal_r+0x1eb0>
    1e88:	008011c4 	movi	r2,71
    1e8c:	b081f726 	beq	r22,r2,266c <___vfprintf_internal_r+0x1e94>
    1e90:	d9003817 	ldw	r4,224(sp)
    1e94:	90c04014 	ori	r3,r18,256
    1e98:	d8c02b15 	stw	r3,172(sp)
    1e9c:	20021516 	blt	r4,zero,26f4 <___vfprintf_internal_r+0x1f1c>
    1ea0:	dcc03817 	ldw	r19,224(sp)
    1ea4:	d8002a05 	stb	zero,168(sp)
    1ea8:	00801984 	movi	r2,102
    1eac:	8881f926 	beq	r17,r2,2694 <___vfprintf_internal_r+0x1ebc>
    1eb0:	00801184 	movi	r2,70
    1eb4:	88821c26 	beq	r17,r2,2728 <___vfprintf_internal_r+0x1f50>
    1eb8:	00801144 	movi	r2,69
    1ebc:	b081ef26 	beq	r22,r2,267c <___vfprintf_internal_r+0x1ea4>
    1ec0:	d8c02917 	ldw	r3,164(sp)
    1ec4:	d8802104 	addi	r2,sp,132
    1ec8:	d8800315 	stw	r2,12(sp)
    1ecc:	d9403617 	ldw	r5,216(sp)
    1ed0:	d8802504 	addi	r2,sp,148
    1ed4:	d9002c17 	ldw	r4,176(sp)
    1ed8:	d8800215 	stw	r2,8(sp)
    1edc:	d8802604 	addi	r2,sp,152
    1ee0:	d8c00015 	stw	r3,0(sp)
    1ee4:	d8800115 	stw	r2,4(sp)
    1ee8:	01c00084 	movi	r7,2
    1eec:	980d883a 	mov	r6,r19
    1ef0:	d8c03c15 	stw	r3,240(sp)
    1ef4:	da003d15 	stw	r8,244(sp)
    1ef8:	0002dfc0 	call	2dfc <_dtoa_r>
    1efc:	1021883a 	mov	r16,r2
    1f00:	008019c4 	movi	r2,103
    1f04:	d8c03c17 	ldw	r3,240(sp)
    1f08:	da003d17 	ldw	r8,244(sp)
    1f0c:	88817126 	beq	r17,r2,24d4 <___vfprintf_internal_r+0x1cfc>
    1f10:	008011c4 	movi	r2,71
    1f14:	88829226 	beq	r17,r2,2960 <___vfprintf_internal_r+0x2188>
    1f18:	80f9883a 	add	fp,r16,r3
    1f1c:	d9003617 	ldw	r4,216(sp)
    1f20:	000d883a 	mov	r6,zero
    1f24:	000f883a 	mov	r7,zero
    1f28:	980b883a 	mov	r5,r19
    1f2c:	da003d15 	stw	r8,244(sp)
    1f30:	000b8980 	call	b898 <__eqdf2>
    1f34:	da003d17 	ldw	r8,244(sp)
    1f38:	10018d26 	beq	r2,zero,2570 <___vfprintf_internal_r+0x1d98>
    1f3c:	d8802117 	ldw	r2,132(sp)
    1f40:	1700062e 	bgeu	r2,fp,1f5c <___vfprintf_internal_r+0x1784>
    1f44:	01000c04 	movi	r4,48
    1f48:	10c00044 	addi	r3,r2,1
    1f4c:	d8c02115 	stw	r3,132(sp)
    1f50:	11000005 	stb	r4,0(r2)
    1f54:	d8802117 	ldw	r2,132(sp)
    1f58:	173ffb36 	bltu	r2,fp,1f48 <__alt_data_end+0xfffe1f48>
    1f5c:	1405c83a 	sub	r2,r2,r16
    1f60:	d8803315 	stw	r2,204(sp)
    1f64:	008011c4 	movi	r2,71
    1f68:	b0817626 	beq	r22,r2,2544 <___vfprintf_internal_r+0x1d6c>
    1f6c:	00801944 	movi	r2,101
    1f70:	1442810e 	bge	r2,r17,2978 <___vfprintf_internal_r+0x21a0>
    1f74:	d8c02617 	ldw	r3,152(sp)
    1f78:	00801984 	movi	r2,102
    1f7c:	d8c03215 	stw	r3,200(sp)
    1f80:	8881fe26 	beq	r17,r2,277c <___vfprintf_internal_r+0x1fa4>
    1f84:	d8c03217 	ldw	r3,200(sp)
    1f88:	d9003317 	ldw	r4,204(sp)
    1f8c:	1901dd16 	blt	r3,r4,2704 <___vfprintf_internal_r+0x1f2c>
    1f90:	9480004c 	andi	r18,r18,1
    1f94:	90022b1e 	bne	r18,zero,2844 <___vfprintf_internal_r+0x206c>
    1f98:	1805883a 	mov	r2,r3
    1f9c:	18028016 	blt	r3,zero,29a0 <___vfprintf_internal_r+0x21c8>
    1fa0:	d8c03217 	ldw	r3,200(sp)
    1fa4:	044019c4 	movi	r17,103
    1fa8:	d8c02e15 	stw	r3,184(sp)
    1fac:	df002a07 	ldb	fp,168(sp)
    1fb0:	e001531e 	bne	fp,zero,2500 <___vfprintf_internal_r+0x1d28>
    1fb4:	df002783 	ldbu	fp,158(sp)
    1fb8:	d8802a15 	stw	r2,168(sp)
    1fbc:	dc802b17 	ldw	r18,172(sp)
    1fc0:	d8002915 	stw	zero,164(sp)
    1fc4:	003bd106 	br	f0c <__alt_data_end+0xfffe0f0c>
    1fc8:	d8802d17 	ldw	r2,180(sp)
    1fcc:	d8c02d17 	ldw	r3,180(sp)
    1fd0:	d9002d17 	ldw	r4,180(sp)
    1fd4:	10800017 	ldw	r2,0(r2)
    1fd8:	18c00117 	ldw	r3,4(r3)
    1fdc:	21000204 	addi	r4,r4,8
    1fe0:	d8803615 	stw	r2,216(sp)
    1fe4:	d8c03815 	stw	r3,224(sp)
    1fe8:	d9002d15 	stw	r4,180(sp)
    1fec:	003b7506 	br	dc4 <__alt_data_end+0xfffe0dc4>
    1ff0:	ac400007 	ldb	r17,0(r21)
    1ff4:	003a5906 	br	95c <__alt_data_end+0xfffe095c>
    1ff8:	9080100c 	andi	r2,r18,64
    1ffc:	1000a826 	beq	r2,zero,22a0 <___vfprintf_internal_r+0x1ac8>
    2000:	d9002d17 	ldw	r4,180(sp)
    2004:	002d883a 	mov	r22,zero
    2008:	24c0000b 	ldhu	r19,0(r4)
    200c:	21000104 	addi	r4,r4,4
    2010:	d9002d15 	stw	r4,180(sp)
    2014:	003ccb06 	br	1344 <__alt_data_end+0xfffe1344>
    2018:	d8c02d17 	ldw	r3,180(sp)
    201c:	d9002917 	ldw	r4,164(sp)
    2020:	002d883a 	mov	r22,zero
    2024:	18800104 	addi	r2,r3,4
    2028:	1cc00017 	ldw	r19,0(r3)
    202c:	203ebb0e 	bge	r4,zero,1b1c <__alt_data_end+0xfffe1b1c>
    2030:	003ef106 	br	1bf8 <__alt_data_end+0xfffe1bf8>
    2034:	9080040c 	andi	r2,r18,16
    2038:	1000921e 	bne	r2,zero,2284 <___vfprintf_internal_r+0x1aac>
    203c:	9480100c 	andi	r18,r18,64
    2040:	90013926 	beq	r18,zero,2528 <___vfprintf_internal_r+0x1d50>
    2044:	d9002d17 	ldw	r4,180(sp)
    2048:	d9402f17 	ldw	r5,188(sp)
    204c:	20800017 	ldw	r2,0(r4)
    2050:	21000104 	addi	r4,r4,4
    2054:	d9002d15 	stw	r4,180(sp)
    2058:	1140000d 	sth	r5,0(r2)
    205c:	003a1606 	br	8b8 <__alt_data_end+0xfffe08b8>
    2060:	9080100c 	andi	r2,r18,64
    2064:	10008026 	beq	r2,zero,2268 <___vfprintf_internal_r+0x1a90>
    2068:	d8c02d17 	ldw	r3,180(sp)
    206c:	1cc0000f 	ldh	r19,0(r3)
    2070:	18c00104 	addi	r3,r3,4
    2074:	d8c02d15 	stw	r3,180(sp)
    2078:	982dd7fa 	srai	r22,r19,31
    207c:	b005883a 	mov	r2,r22
    2080:	003b1f06 	br	d00 <__alt_data_end+0xfffe0d00>
    2084:	9080100c 	andi	r2,r18,64
    2088:	d8002785 	stb	zero,158(sp)
    208c:	10008a1e 	bne	r2,zero,22b8 <___vfprintf_internal_r+0x1ae0>
    2090:	d9402d17 	ldw	r5,180(sp)
    2094:	d8c02917 	ldw	r3,164(sp)
    2098:	002d883a 	mov	r22,zero
    209c:	28800104 	addi	r2,r5,4
    20a0:	2cc00017 	ldw	r19,0(r5)
    20a4:	183e4b0e 	bge	r3,zero,19d4 <__alt_data_end+0xfffe19d4>
    20a8:	9d86b03a 	or	r3,r19,r22
    20ac:	d8802d15 	stw	r2,180(sp)
    20b0:	183e4c1e 	bne	r3,zero,19e4 <__alt_data_end+0xfffe19e4>
    20b4:	0039883a 	mov	fp,zero
    20b8:	0005883a 	mov	r2,zero
    20bc:	003d4006 	br	15c0 <__alt_data_end+0xfffe15c0>
    20c0:	01400074 	movhi	r5,1
    20c4:	297d4e84 	addi	r5,r5,-2758
    20c8:	d9402b15 	stw	r5,172(sp)
    20cc:	d9402b17 	ldw	r5,172(sp)
    20d0:	1c47883a 	add	r3,r3,r17
    20d4:	10800044 	addi	r2,r2,1
    20d8:	41400015 	stw	r5,0(r8)
    20dc:	44400115 	stw	r17,4(r8)
    20e0:	d8c02015 	stw	r3,128(sp)
    20e4:	d8801f15 	stw	r2,124(sp)
    20e8:	010001c4 	movi	r4,7
    20ec:	20bec816 	blt	r4,r2,1c10 <__alt_data_end+0xfffe1c10>
    20f0:	42000204 	addi	r8,r8,8
    20f4:	003ecd06 	br	1c2c <__alt_data_end+0xfffe1c2c>
    20f8:	d9002917 	ldw	r4,164(sp)
    20fc:	d8002785 	stb	zero,158(sp)
    2100:	203d2d16 	blt	r4,zero,15b8 <__alt_data_end+0xfffe15b8>
    2104:	00bfdfc4 	movi	r2,-129
    2108:	90a4703a 	and	r18,r18,r2
    210c:	003a9106 	br	b54 <__alt_data_end+0xfffe0b54>
    2110:	01000074 	movhi	r4,1
    2114:	213d4e84 	addi	r4,r4,-2758
    2118:	d9002b15 	stw	r4,172(sp)
    211c:	003c0c06 	br	1150 <__alt_data_end+0xfffe1150>
    2120:	d9002c17 	ldw	r4,176(sp)
    2124:	d9801e04 	addi	r6,sp,120
    2128:	b80b883a 	mov	r5,r23
    212c:	0007dd40 	call	7dd4 <__sprint_r>
    2130:	103aab1e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    2134:	d8c02017 	ldw	r3,128(sp)
    2138:	da000404 	addi	r8,sp,16
    213c:	003d4106 	br	1644 <__alt_data_end+0xfffe1644>
    2140:	d8801f17 	ldw	r2,124(sp)
    2144:	01400074 	movhi	r5,1
    2148:	01000044 	movi	r4,1
    214c:	18c00044 	addi	r3,r3,1
    2150:	10800044 	addi	r2,r2,1
    2154:	297d4e04 	addi	r5,r5,-2760
    2158:	41000115 	stw	r4,4(r8)
    215c:	41400015 	stw	r5,0(r8)
    2160:	d8c02015 	stw	r3,128(sp)
    2164:	d8801f15 	stw	r2,124(sp)
    2168:	010001c4 	movi	r4,7
    216c:	20805c16 	blt	r4,r2,22e0 <___vfprintf_internal_r+0x1b08>
    2170:	42000204 	addi	r8,r8,8
    2174:	8800041e 	bne	r17,zero,2188 <___vfprintf_internal_r+0x19b0>
    2178:	d8803317 	ldw	r2,204(sp)
    217c:	1000021e 	bne	r2,zero,2188 <___vfprintf_internal_r+0x19b0>
    2180:	9080004c 	andi	r2,r18,1
    2184:	103c0926 	beq	r2,zero,11ac <__alt_data_end+0xfffe11ac>
    2188:	d9003717 	ldw	r4,220(sp)
    218c:	d8801f17 	ldw	r2,124(sp)
    2190:	d9403417 	ldw	r5,208(sp)
    2194:	20c7883a 	add	r3,r4,r3
    2198:	10800044 	addi	r2,r2,1
    219c:	41000115 	stw	r4,4(r8)
    21a0:	41400015 	stw	r5,0(r8)
    21a4:	d8c02015 	stw	r3,128(sp)
    21a8:	d8801f15 	stw	r2,124(sp)
    21ac:	010001c4 	movi	r4,7
    21b0:	20812116 	blt	r4,r2,2638 <___vfprintf_internal_r+0x1e60>
    21b4:	42000204 	addi	r8,r8,8
    21b8:	0463c83a 	sub	r17,zero,r17
    21bc:	0440730e 	bge	zero,r17,238c <___vfprintf_internal_r+0x1bb4>
    21c0:	05800404 	movi	r22,16
    21c4:	b440860e 	bge	r22,r17,23e0 <___vfprintf_internal_r+0x1c08>
    21c8:	01400074 	movhi	r5,1
    21cc:	297d4e84 	addi	r5,r5,-2758
    21d0:	d9402b15 	stw	r5,172(sp)
    21d4:	070001c4 	movi	fp,7
    21d8:	dcc02c17 	ldw	r19,176(sp)
    21dc:	00000306 	br	21ec <___vfprintf_internal_r+0x1a14>
    21e0:	42000204 	addi	r8,r8,8
    21e4:	8c7ffc04 	addi	r17,r17,-16
    21e8:	b440800e 	bge	r22,r17,23ec <___vfprintf_internal_r+0x1c14>
    21ec:	18c00404 	addi	r3,r3,16
    21f0:	10800044 	addi	r2,r2,1
    21f4:	45000015 	stw	r20,0(r8)
    21f8:	45800115 	stw	r22,4(r8)
    21fc:	d8c02015 	stw	r3,128(sp)
    2200:	d8801f15 	stw	r2,124(sp)
    2204:	e0bff60e 	bge	fp,r2,21e0 <__alt_data_end+0xfffe21e0>
    2208:	d9801e04 	addi	r6,sp,120
    220c:	b80b883a 	mov	r5,r23
    2210:	9809883a 	mov	r4,r19
    2214:	0007dd40 	call	7dd4 <__sprint_r>
    2218:	103a711e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    221c:	d8c02017 	ldw	r3,128(sp)
    2220:	d8801f17 	ldw	r2,124(sp)
    2224:	da000404 	addi	r8,sp,16
    2228:	003fee06 	br	21e4 <__alt_data_end+0xfffe21e4>
    222c:	00bfffc4 	movi	r2,-1
    2230:	003a6f06 	br	bf0 <__alt_data_end+0xfffe0bf0>
    2234:	008011c4 	movi	r2,71
    2238:	1440b816 	blt	r2,r17,251c <___vfprintf_internal_r+0x1d44>
    223c:	04000074 	movhi	r16,1
    2240:	843d4004 	addi	r16,r16,-2816
    2244:	00c000c4 	movi	r3,3
    2248:	00bfdfc4 	movi	r2,-129
    224c:	d8c02a15 	stw	r3,168(sp)
    2250:	90a4703a 	and	r18,r18,r2
    2254:	df002783 	ldbu	fp,158(sp)
    2258:	d8c02e15 	stw	r3,184(sp)
    225c:	d8002915 	stw	zero,164(sp)
    2260:	d8003215 	stw	zero,200(sp)
    2264:	003b2906 	br	f0c <__alt_data_end+0xfffe0f0c>
    2268:	d9002d17 	ldw	r4,180(sp)
    226c:	24c00017 	ldw	r19,0(r4)
    2270:	21000104 	addi	r4,r4,4
    2274:	d9002d15 	stw	r4,180(sp)
    2278:	982dd7fa 	srai	r22,r19,31
    227c:	b005883a 	mov	r2,r22
    2280:	003a9f06 	br	d00 <__alt_data_end+0xfffe0d00>
    2284:	d9402d17 	ldw	r5,180(sp)
    2288:	d8c02f17 	ldw	r3,188(sp)
    228c:	28800017 	ldw	r2,0(r5)
    2290:	29400104 	addi	r5,r5,4
    2294:	d9402d15 	stw	r5,180(sp)
    2298:	10c00015 	stw	r3,0(r2)
    229c:	00398606 	br	8b8 <__alt_data_end+0xfffe08b8>
    22a0:	d9402d17 	ldw	r5,180(sp)
    22a4:	002d883a 	mov	r22,zero
    22a8:	2cc00017 	ldw	r19,0(r5)
    22ac:	29400104 	addi	r5,r5,4
    22b0:	d9402d15 	stw	r5,180(sp)
    22b4:	003c2306 	br	1344 <__alt_data_end+0xfffe1344>
    22b8:	d8c02d17 	ldw	r3,180(sp)
    22bc:	d9002917 	ldw	r4,164(sp)
    22c0:	002d883a 	mov	r22,zero
    22c4:	18800104 	addi	r2,r3,4
    22c8:	1cc0000b 	ldhu	r19,0(r3)
    22cc:	203dc10e 	bge	r4,zero,19d4 <__alt_data_end+0xfffe19d4>
    22d0:	003f7506 	br	20a8 <__alt_data_end+0xfffe20a8>
    22d4:	04000074 	movhi	r16,1
    22d8:	843d3e04 	addi	r16,r16,-2824
    22dc:	003acc06 	br	e10 <__alt_data_end+0xfffe0e10>
    22e0:	d9002c17 	ldw	r4,176(sp)
    22e4:	d9801e04 	addi	r6,sp,120
    22e8:	b80b883a 	mov	r5,r23
    22ec:	0007dd40 	call	7dd4 <__sprint_r>
    22f0:	103a3b1e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    22f4:	dc402617 	ldw	r17,152(sp)
    22f8:	d8c02017 	ldw	r3,128(sp)
    22fc:	da000404 	addi	r8,sp,16
    2300:	003f9c06 	br	2174 <__alt_data_end+0xfffe2174>
    2304:	ac400043 	ldbu	r17,1(r21)
    2308:	94800814 	ori	r18,r18,32
    230c:	ad400044 	addi	r21,r21,1
    2310:	8c403fcc 	andi	r17,r17,255
    2314:	8c40201c 	xori	r17,r17,128
    2318:	8c7fe004 	addi	r17,r17,-128
    231c:	00398f06 	br	95c <__alt_data_end+0xfffe095c>
    2320:	d8c02d15 	stw	r3,180(sp)
    2324:	0039883a 	mov	fp,zero
    2328:	003e3506 	br	1c00 <__alt_data_end+0xfffe1c00>
    232c:	d9002c17 	ldw	r4,176(sp)
    2330:	d9801e04 	addi	r6,sp,120
    2334:	b80b883a 	mov	r5,r23
    2338:	0007dd40 	call	7dd4 <__sprint_r>
    233c:	103a281e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    2340:	d8c02017 	ldw	r3,128(sp)
    2344:	da000404 	addi	r8,sp,16
    2348:	003cd006 	br	168c <__alt_data_end+0xfffe168c>
    234c:	8009883a 	mov	r4,r16
    2350:	da003d15 	stw	r8,244(sp)
    2354:	00007400 	call	740 <strlen>
    2358:	d8802e15 	stw	r2,184(sp)
    235c:	da003d17 	ldw	r8,244(sp)
    2360:	103c340e 	bge	r2,zero,1434 <__alt_data_end+0xfffe1434>
    2364:	0005883a 	mov	r2,zero
    2368:	003c3206 	br	1434 <__alt_data_end+0xfffe1434>
    236c:	d9002c17 	ldw	r4,176(sp)
    2370:	d9801e04 	addi	r6,sp,120
    2374:	b80b883a 	mov	r5,r23
    2378:	0007dd40 	call	7dd4 <__sprint_r>
    237c:	103a181e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    2380:	d8c02017 	ldw	r3,128(sp)
    2384:	d8801f17 	ldw	r2,124(sp)
    2388:	da000404 	addi	r8,sp,16
    238c:	d9403317 	ldw	r5,204(sp)
    2390:	10800044 	addi	r2,r2,1
    2394:	44000015 	stw	r16,0(r8)
    2398:	28c7883a 	add	r3,r5,r3
    239c:	003b7d06 	br	1194 <__alt_data_end+0xfffe1194>
    23a0:	01000074 	movhi	r4,1
    23a4:	213d5284 	addi	r4,r4,-2742
    23a8:	d9003515 	stw	r4,212(sp)
    23ac:	003b1406 	br	1000 <__alt_data_end+0xfffe1000>
    23b0:	013fffc4 	movi	r4,-1
    23b4:	003a3506 	br	c8c <__alt_data_end+0xfffe0c8c>
    23b8:	0023883a 	mov	r17,zero
    23bc:	003d9d06 	br	1a34 <__alt_data_end+0xfffe1a34>
    23c0:	d9002c17 	ldw	r4,176(sp)
    23c4:	d9801e04 	addi	r6,sp,120
    23c8:	b80b883a 	mov	r5,r23
    23cc:	0007dd40 	call	7dd4 <__sprint_r>
    23d0:	103a031e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    23d4:	d8c02017 	ldw	r3,128(sp)
    23d8:	da000404 	addi	r8,sp,16
    23dc:	003d9406 	br	1a30 <__alt_data_end+0xfffe1a30>
    23e0:	01000074 	movhi	r4,1
    23e4:	213d4e84 	addi	r4,r4,-2758
    23e8:	d9002b15 	stw	r4,172(sp)
    23ec:	d9002b17 	ldw	r4,172(sp)
    23f0:	1c47883a 	add	r3,r3,r17
    23f4:	10800044 	addi	r2,r2,1
    23f8:	41000015 	stw	r4,0(r8)
    23fc:	44400115 	stw	r17,4(r8)
    2400:	d8c02015 	stw	r3,128(sp)
    2404:	d8801f15 	stw	r2,124(sp)
    2408:	010001c4 	movi	r4,7
    240c:	20bfd716 	blt	r4,r2,236c <__alt_data_end+0xfffe236c>
    2410:	42000204 	addi	r8,r8,8
    2414:	003fdd06 	br	238c <__alt_data_end+0xfffe238c>
    2418:	d9002c17 	ldw	r4,176(sp)
    241c:	d9801e04 	addi	r6,sp,120
    2420:	b80b883a 	mov	r5,r23
    2424:	0007dd40 	call	7dd4 <__sprint_r>
    2428:	1039ed1e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    242c:	d8802617 	ldw	r2,152(sp)
    2430:	d8c02017 	ldw	r3,128(sp)
    2434:	da000404 	addi	r8,sp,16
    2438:	003e1006 	br	1c7c <__alt_data_end+0xfffe1c7c>
    243c:	00800044 	movi	r2,1
    2440:	10803fcc 	andi	r2,r2,255
    2444:	00c00044 	movi	r3,1
    2448:	10fa3526 	beq	r2,r3,d20 <__alt_data_end+0xfffe0d20>
    244c:	00c00084 	movi	r3,2
    2450:	10fbcb26 	beq	r2,r3,1380 <__alt_data_end+0xfffe1380>
    2454:	003a8f06 	br	e94 <__alt_data_end+0xfffe0e94>
    2458:	01000074 	movhi	r4,1
    245c:	213d5284 	addi	r4,r4,-2742
    2460:	d9003515 	stw	r4,212(sp)
    2464:	003b7606 	br	1240 <__alt_data_end+0xfffe1240>
    2468:	d8802917 	ldw	r2,164(sp)
    246c:	00c00184 	movi	r3,6
    2470:	1880012e 	bgeu	r3,r2,2478 <___vfprintf_internal_r+0x1ca0>
    2474:	1805883a 	mov	r2,r3
    2478:	d8802e15 	stw	r2,184(sp)
    247c:	1000ef16 	blt	r2,zero,283c <___vfprintf_internal_r+0x2064>
    2480:	04000074 	movhi	r16,1
    2484:	d8802a15 	stw	r2,168(sp)
    2488:	dcc02d15 	stw	r19,180(sp)
    248c:	d8002915 	stw	zero,164(sp)
    2490:	d8003215 	stw	zero,200(sp)
    2494:	843d4c04 	addi	r16,r16,-2768
    2498:	0039883a 	mov	fp,zero
    249c:	003aa206 	br	f28 <__alt_data_end+0xfffe0f28>
    24a0:	0021883a 	mov	r16,zero
    24a4:	003e0706 	br	1cc4 <__alt_data_end+0xfffe1cc4>
    24a8:	d9002c17 	ldw	r4,176(sp)
    24ac:	d9801e04 	addi	r6,sp,120
    24b0:	b80b883a 	mov	r5,r23
    24b4:	0007dd40 	call	7dd4 <__sprint_r>
    24b8:	1039c91e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    24bc:	d8802617 	ldw	r2,152(sp)
    24c0:	d9403317 	ldw	r5,204(sp)
    24c4:	d8c02017 	ldw	r3,128(sp)
    24c8:	da000404 	addi	r8,sp,16
    24cc:	2885c83a 	sub	r2,r5,r2
    24d0:	003dfb06 	br	1cc0 <__alt_data_end+0xfffe1cc0>
    24d4:	9080004c 	andi	r2,r18,1
    24d8:	103e8f1e 	bne	r2,zero,1f18 <__alt_data_end+0xfffe1f18>
    24dc:	d8802117 	ldw	r2,132(sp)
    24e0:	003e9e06 	br	1f5c <__alt_data_end+0xfffe1f5c>
    24e4:	1025883a 	mov	r18,r2
    24e8:	0039883a 	mov	fp,zero
    24ec:	00800084 	movi	r2,2
    24f0:	003fd306 	br	2440 <__alt_data_end+0xfffe2440>
    24f4:	07000b44 	movi	fp,45
    24f8:	df002785 	stb	fp,158(sp)
    24fc:	003a4006 	br	e00 <__alt_data_end+0xfffe0e00>
    2500:	00c00b44 	movi	r3,45
    2504:	d8c02785 	stb	r3,158(sp)
    2508:	d8802a15 	stw	r2,168(sp)
    250c:	dc802b17 	ldw	r18,172(sp)
    2510:	d8002915 	stw	zero,164(sp)
    2514:	07000b44 	movi	fp,45
    2518:	003a8006 	br	f1c <__alt_data_end+0xfffe0f1c>
    251c:	04000074 	movhi	r16,1
    2520:	843d4104 	addi	r16,r16,-2812
    2524:	003f4706 	br	2244 <__alt_data_end+0xfffe2244>
    2528:	d8c02d17 	ldw	r3,180(sp)
    252c:	d9002f17 	ldw	r4,188(sp)
    2530:	18800017 	ldw	r2,0(r3)
    2534:	18c00104 	addi	r3,r3,4
    2538:	d8c02d15 	stw	r3,180(sp)
    253c:	11000015 	stw	r4,0(r2)
    2540:	0038dd06 	br	8b8 <__alt_data_end+0xfffe08b8>
    2544:	dd802617 	ldw	r22,152(sp)
    2548:	00bfff44 	movi	r2,-3
    254c:	b0801c16 	blt	r22,r2,25c0 <___vfprintf_internal_r+0x1de8>
    2550:	d9402917 	ldw	r5,164(sp)
    2554:	2d801a16 	blt	r5,r22,25c0 <___vfprintf_internal_r+0x1de8>
    2558:	dd803215 	stw	r22,200(sp)
    255c:	003e8906 	br	1f84 <__alt_data_end+0xfffe1f84>
    2560:	01000074 	movhi	r4,1
    2564:	213d4e84 	addi	r4,r4,-2758
    2568:	d9002b15 	stw	r4,172(sp)
    256c:	003c9106 	br	17b4 <__alt_data_end+0xfffe17b4>
    2570:	e005883a 	mov	r2,fp
    2574:	003e7906 	br	1f5c <__alt_data_end+0xfffe1f5c>
    2578:	d9402917 	ldw	r5,164(sp)
    257c:	df002783 	ldbu	fp,158(sp)
    2580:	dcc02d15 	stw	r19,180(sp)
    2584:	d9402a15 	stw	r5,168(sp)
    2588:	d9402e15 	stw	r5,184(sp)
    258c:	d8002915 	stw	zero,164(sp)
    2590:	d8003215 	stw	zero,200(sp)
    2594:	003a5d06 	br	f0c <__alt_data_end+0xfffe0f0c>
    2598:	9080004c 	andi	r2,r18,1
    259c:	0039883a 	mov	fp,zero
    25a0:	10000426 	beq	r2,zero,25b4 <___vfprintf_internal_r+0x1ddc>
    25a4:	00800c04 	movi	r2,48
    25a8:	dc001dc4 	addi	r16,sp,119
    25ac:	d8801dc5 	stb	r2,119(sp)
    25b0:	003b8006 	br	13b4 <__alt_data_end+0xfffe13b4>
    25b4:	d8002e15 	stw	zero,184(sp)
    25b8:	dc001e04 	addi	r16,sp,120
    25bc:	003a4d06 	br	ef4 <__alt_data_end+0xfffe0ef4>
    25c0:	8c7fff84 	addi	r17,r17,-2
    25c4:	b5bfffc4 	addi	r22,r22,-1
    25c8:	dd802615 	stw	r22,152(sp)
    25cc:	dc4022c5 	stb	r17,139(sp)
    25d0:	b000bf16 	blt	r22,zero,28d0 <___vfprintf_internal_r+0x20f8>
    25d4:	00800ac4 	movi	r2,43
    25d8:	d8802305 	stb	r2,140(sp)
    25dc:	00800244 	movi	r2,9
    25e0:	15807016 	blt	r2,r22,27a4 <___vfprintf_internal_r+0x1fcc>
    25e4:	00800c04 	movi	r2,48
    25e8:	b5800c04 	addi	r22,r22,48
    25ec:	d8802345 	stb	r2,141(sp)
    25f0:	dd802385 	stb	r22,142(sp)
    25f4:	d88023c4 	addi	r2,sp,143
    25f8:	df0022c4 	addi	fp,sp,139
    25fc:	d8c03317 	ldw	r3,204(sp)
    2600:	1739c83a 	sub	fp,r2,fp
    2604:	d9003317 	ldw	r4,204(sp)
    2608:	e0c7883a 	add	r3,fp,r3
    260c:	df003a15 	stw	fp,232(sp)
    2610:	d8c02e15 	stw	r3,184(sp)
    2614:	00800044 	movi	r2,1
    2618:	1100b30e 	bge	r2,r4,28e8 <___vfprintf_internal_r+0x2110>
    261c:	d8c02e17 	ldw	r3,184(sp)
    2620:	18c00044 	addi	r3,r3,1
    2624:	d8c02e15 	stw	r3,184(sp)
    2628:	1805883a 	mov	r2,r3
    262c:	1800ac16 	blt	r3,zero,28e0 <___vfprintf_internal_r+0x2108>
    2630:	d8003215 	stw	zero,200(sp)
    2634:	003e5d06 	br	1fac <__alt_data_end+0xfffe1fac>
    2638:	d9002c17 	ldw	r4,176(sp)
    263c:	d9801e04 	addi	r6,sp,120
    2640:	b80b883a 	mov	r5,r23
    2644:	0007dd40 	call	7dd4 <__sprint_r>
    2648:	1039651e 	bne	r2,zero,be0 <__alt_data_end+0xfffe0be0>
    264c:	dc402617 	ldw	r17,152(sp)
    2650:	d8c02017 	ldw	r3,128(sp)
    2654:	d8801f17 	ldw	r2,124(sp)
    2658:	da000404 	addi	r8,sp,16
    265c:	003ed606 	br	21b8 <__alt_data_end+0xfffe21b8>
    2660:	582b883a 	mov	r21,r11
    2664:	d8002915 	stw	zero,164(sp)
    2668:	0038bd06 	br	960 <__alt_data_end+0xfffe0960>
    266c:	d8802917 	ldw	r2,164(sp)
    2670:	103e071e 	bne	r2,zero,1e90 <__alt_data_end+0xfffe1e90>
    2674:	dc002915 	stw	r16,164(sp)
    2678:	003e0506 	br	1e90 <__alt_data_end+0xfffe1e90>
    267c:	d9002917 	ldw	r4,164(sp)
    2680:	20c00044 	addi	r3,r4,1
    2684:	003e0f06 	br	1ec4 <__alt_data_end+0xfffe1ec4>
    2688:	01400184 	movi	r5,6
    268c:	d9402915 	stw	r5,164(sp)
    2690:	003dff06 	br	1e90 <__alt_data_end+0xfffe1e90>
    2694:	d8802104 	addi	r2,sp,132
    2698:	d8800315 	stw	r2,12(sp)
    269c:	d8802504 	addi	r2,sp,148
    26a0:	d8800215 	stw	r2,8(sp)
    26a4:	d8802604 	addi	r2,sp,152
    26a8:	d8800115 	stw	r2,4(sp)
    26ac:	d8802917 	ldw	r2,164(sp)
    26b0:	d9403617 	ldw	r5,216(sp)
    26b4:	d9002c17 	ldw	r4,176(sp)
    26b8:	d8800015 	stw	r2,0(sp)
    26bc:	01c000c4 	movi	r7,3
    26c0:	980d883a 	mov	r6,r19
    26c4:	da003d15 	stw	r8,244(sp)
    26c8:	0002dfc0 	call	2dfc <_dtoa_r>
    26cc:	d8c02917 	ldw	r3,164(sp)
    26d0:	da003d17 	ldw	r8,244(sp)
    26d4:	1021883a 	mov	r16,r2
    26d8:	10f9883a 	add	fp,r2,r3
    26dc:	81000007 	ldb	r4,0(r16)
    26e0:	00800c04 	movi	r2,48
    26e4:	20805e26 	beq	r4,r2,2860 <___vfprintf_internal_r+0x2088>
    26e8:	d8c02617 	ldw	r3,152(sp)
    26ec:	e0f9883a 	add	fp,fp,r3
    26f0:	003e0a06 	br	1f1c <__alt_data_end+0xfffe1f1c>
    26f4:	00c00b44 	movi	r3,45
    26f8:	24e0003c 	xorhi	r19,r4,32768
    26fc:	d8c02a05 	stb	r3,168(sp)
    2700:	003de906 	br	1ea8 <__alt_data_end+0xfffe1ea8>
    2704:	d8c03217 	ldw	r3,200(sp)
    2708:	00c07a0e 	bge	zero,r3,28f4 <___vfprintf_internal_r+0x211c>
    270c:	00800044 	movi	r2,1
    2710:	d9003317 	ldw	r4,204(sp)
    2714:	1105883a 	add	r2,r2,r4
    2718:	d8802e15 	stw	r2,184(sp)
    271c:	10004e16 	blt	r2,zero,2858 <___vfprintf_internal_r+0x2080>
    2720:	044019c4 	movi	r17,103
    2724:	003e2106 	br	1fac <__alt_data_end+0xfffe1fac>
    2728:	d9002917 	ldw	r4,164(sp)
    272c:	d8802104 	addi	r2,sp,132
    2730:	d8800315 	stw	r2,12(sp)
    2734:	d9000015 	stw	r4,0(sp)
    2738:	d8802504 	addi	r2,sp,148
    273c:	d9403617 	ldw	r5,216(sp)
    2740:	d9002c17 	ldw	r4,176(sp)
    2744:	d8800215 	stw	r2,8(sp)
    2748:	d8802604 	addi	r2,sp,152
    274c:	d8800115 	stw	r2,4(sp)
    2750:	01c000c4 	movi	r7,3
    2754:	980d883a 	mov	r6,r19
    2758:	da003d15 	stw	r8,244(sp)
    275c:	0002dfc0 	call	2dfc <_dtoa_r>
    2760:	d8c02917 	ldw	r3,164(sp)
    2764:	da003d17 	ldw	r8,244(sp)
    2768:	1021883a 	mov	r16,r2
    276c:	00801184 	movi	r2,70
    2770:	80f9883a 	add	fp,r16,r3
    2774:	88bfd926 	beq	r17,r2,26dc <__alt_data_end+0xfffe26dc>
    2778:	003de806 	br	1f1c <__alt_data_end+0xfffe1f1c>
    277c:	d9002917 	ldw	r4,164(sp)
    2780:	00c04d0e 	bge	zero,r3,28b8 <___vfprintf_internal_r+0x20e0>
    2784:	2000441e 	bne	r4,zero,2898 <___vfprintf_internal_r+0x20c0>
    2788:	9480004c 	andi	r18,r18,1
    278c:	9000421e 	bne	r18,zero,2898 <___vfprintf_internal_r+0x20c0>
    2790:	1805883a 	mov	r2,r3
    2794:	18007016 	blt	r3,zero,2958 <___vfprintf_internal_r+0x2180>
    2798:	d8c03217 	ldw	r3,200(sp)
    279c:	d8c02e15 	stw	r3,184(sp)
    27a0:	003e0206 	br	1fac <__alt_data_end+0xfffe1fac>
    27a4:	df0022c4 	addi	fp,sp,139
    27a8:	dc002915 	stw	r16,164(sp)
    27ac:	4027883a 	mov	r19,r8
    27b0:	e021883a 	mov	r16,fp
    27b4:	b009883a 	mov	r4,r22
    27b8:	01400284 	movi	r5,10
    27bc:	00004d00 	call	4d0 <__modsi3>
    27c0:	10800c04 	addi	r2,r2,48
    27c4:	843fffc4 	addi	r16,r16,-1
    27c8:	b009883a 	mov	r4,r22
    27cc:	01400284 	movi	r5,10
    27d0:	80800005 	stb	r2,0(r16)
    27d4:	000044c0 	call	44c <__divsi3>
    27d8:	102d883a 	mov	r22,r2
    27dc:	00800244 	movi	r2,9
    27e0:	15bff416 	blt	r2,r22,27b4 <__alt_data_end+0xfffe27b4>
    27e4:	9811883a 	mov	r8,r19
    27e8:	b0800c04 	addi	r2,r22,48
    27ec:	8027883a 	mov	r19,r16
    27f0:	997fffc4 	addi	r5,r19,-1
    27f4:	98bfffc5 	stb	r2,-1(r19)
    27f8:	dc002917 	ldw	r16,164(sp)
    27fc:	2f006a2e 	bgeu	r5,fp,29a8 <___vfprintf_internal_r+0x21d0>
    2800:	d9c02384 	addi	r7,sp,142
    2804:	3ccfc83a 	sub	r7,r7,r19
    2808:	d9002344 	addi	r4,sp,141
    280c:	e1cf883a 	add	r7,fp,r7
    2810:	00000106 	br	2818 <___vfprintf_internal_r+0x2040>
    2814:	28800003 	ldbu	r2,0(r5)
    2818:	20800005 	stb	r2,0(r4)
    281c:	21000044 	addi	r4,r4,1
    2820:	29400044 	addi	r5,r5,1
    2824:	393ffb1e 	bne	r7,r4,2814 <__alt_data_end+0xfffe2814>
    2828:	d8802304 	addi	r2,sp,140
    282c:	14c5c83a 	sub	r2,r2,r19
    2830:	d8c02344 	addi	r3,sp,141
    2834:	1885883a 	add	r2,r3,r2
    2838:	003f7006 	br	25fc <__alt_data_end+0xfffe25fc>
    283c:	0005883a 	mov	r2,zero
    2840:	003f0f06 	br	2480 <__alt_data_end+0xfffe2480>
    2844:	d8c03217 	ldw	r3,200(sp)
    2848:	18c00044 	addi	r3,r3,1
    284c:	d8c02e15 	stw	r3,184(sp)
    2850:	1805883a 	mov	r2,r3
    2854:	183fb20e 	bge	r3,zero,2720 <__alt_data_end+0xfffe2720>
    2858:	0005883a 	mov	r2,zero
    285c:	003fb006 	br	2720 <__alt_data_end+0xfffe2720>
    2860:	d9003617 	ldw	r4,216(sp)
    2864:	000d883a 	mov	r6,zero
    2868:	000f883a 	mov	r7,zero
    286c:	980b883a 	mov	r5,r19
    2870:	d8c03c15 	stw	r3,240(sp)
    2874:	da003d15 	stw	r8,244(sp)
    2878:	000b8980 	call	b898 <__eqdf2>
    287c:	d8c03c17 	ldw	r3,240(sp)
    2880:	da003d17 	ldw	r8,244(sp)
    2884:	103f9826 	beq	r2,zero,26e8 <__alt_data_end+0xfffe26e8>
    2888:	00800044 	movi	r2,1
    288c:	10c7c83a 	sub	r3,r2,r3
    2890:	d8c02615 	stw	r3,152(sp)
    2894:	003f9506 	br	26ec <__alt_data_end+0xfffe26ec>
    2898:	d9002917 	ldw	r4,164(sp)
    289c:	d8c03217 	ldw	r3,200(sp)
    28a0:	20800044 	addi	r2,r4,1
    28a4:	1885883a 	add	r2,r3,r2
    28a8:	d8802e15 	stw	r2,184(sp)
    28ac:	103dbf0e 	bge	r2,zero,1fac <__alt_data_end+0xfffe1fac>
    28b0:	0005883a 	mov	r2,zero
    28b4:	003dbd06 	br	1fac <__alt_data_end+0xfffe1fac>
    28b8:	2000211e 	bne	r4,zero,2940 <___vfprintf_internal_r+0x2168>
    28bc:	9480004c 	andi	r18,r18,1
    28c0:	90001f1e 	bne	r18,zero,2940 <___vfprintf_internal_r+0x2168>
    28c4:	00800044 	movi	r2,1
    28c8:	d8802e15 	stw	r2,184(sp)
    28cc:	003db706 	br	1fac <__alt_data_end+0xfffe1fac>
    28d0:	00800b44 	movi	r2,45
    28d4:	05adc83a 	sub	r22,zero,r22
    28d8:	d8802305 	stb	r2,140(sp)
    28dc:	003f3f06 	br	25dc <__alt_data_end+0xfffe25dc>
    28e0:	0005883a 	mov	r2,zero
    28e4:	003f5206 	br	2630 <__alt_data_end+0xfffe2630>
    28e8:	90a4703a 	and	r18,r18,r2
    28ec:	903f4e26 	beq	r18,zero,2628 <__alt_data_end+0xfffe2628>
    28f0:	003f4a06 	br	261c <__alt_data_end+0xfffe261c>
    28f4:	00800084 	movi	r2,2
    28f8:	10c5c83a 	sub	r2,r2,r3
    28fc:	003f8406 	br	2710 <__alt_data_end+0xfffe2710>
    2900:	d8802d17 	ldw	r2,180(sp)
    2904:	d9002d17 	ldw	r4,180(sp)
    2908:	ac400043 	ldbu	r17,1(r21)
    290c:	10800017 	ldw	r2,0(r2)
    2910:	582b883a 	mov	r21,r11
    2914:	d8802915 	stw	r2,164(sp)
    2918:	20800104 	addi	r2,r4,4
    291c:	d9002917 	ldw	r4,164(sp)
    2920:	d8802d15 	stw	r2,180(sp)
    2924:	203e7a0e 	bge	r4,zero,2310 <__alt_data_end+0xfffe2310>
    2928:	8c403fcc 	andi	r17,r17,255
    292c:	00bfffc4 	movi	r2,-1
    2930:	8c40201c 	xori	r17,r17,128
    2934:	d8802915 	stw	r2,164(sp)
    2938:	8c7fe004 	addi	r17,r17,-128
    293c:	00380706 	br	95c <__alt_data_end+0xfffe095c>
    2940:	d8c02917 	ldw	r3,164(sp)
    2944:	18c00084 	addi	r3,r3,2
    2948:	d8c02e15 	stw	r3,184(sp)
    294c:	1805883a 	mov	r2,r3
    2950:	183d960e 	bge	r3,zero,1fac <__alt_data_end+0xfffe1fac>
    2954:	003fd606 	br	28b0 <__alt_data_end+0xfffe28b0>
    2958:	0005883a 	mov	r2,zero
    295c:	003f8e06 	br	2798 <__alt_data_end+0xfffe2798>
    2960:	9080004c 	andi	r2,r18,1
    2964:	103f811e 	bne	r2,zero,276c <__alt_data_end+0xfffe276c>
    2968:	d8802117 	ldw	r2,132(sp)
    296c:	1405c83a 	sub	r2,r2,r16
    2970:	d8803315 	stw	r2,204(sp)
    2974:	b47ef326 	beq	r22,r17,2544 <__alt_data_end+0xfffe2544>
    2978:	dd802617 	ldw	r22,152(sp)
    297c:	003f1106 	br	25c4 <__alt_data_end+0xfffe25c4>
    2980:	d9c02785 	stb	r7,158(sp)
    2984:	00390406 	br	d98 <__alt_data_end+0xfffe0d98>
    2988:	d9c02785 	stb	r7,158(sp)
    298c:	0038d306 	br	cdc <__alt_data_end+0xfffe0cdc>
    2990:	d9c02785 	stb	r7,158(sp)
    2994:	003a6106 	br	131c <__alt_data_end+0xfffe131c>
    2998:	d9c02785 	stb	r7,158(sp)
    299c:	003af806 	br	1580 <__alt_data_end+0xfffe1580>
    29a0:	0005883a 	mov	r2,zero
    29a4:	003d7e06 	br	1fa0 <__alt_data_end+0xfffe1fa0>
    29a8:	d8802344 	addi	r2,sp,141
    29ac:	003f1306 	br	25fc <__alt_data_end+0xfffe25fc>
    29b0:	d9c02785 	stb	r7,158(sp)
    29b4:	00392306 	br	e44 <__alt_data_end+0xfffe0e44>
    29b8:	d9c02785 	stb	r7,158(sp)
    29bc:	003aa906 	br	1464 <__alt_data_end+0xfffe1464>
    29c0:	d9c02785 	stb	r7,158(sp)
    29c4:	003a3d06 	br	12bc <__alt_data_end+0xfffe12bc>
    29c8:	d9c02785 	stb	r7,158(sp)
    29cc:	003aca06 	br	14f8 <__alt_data_end+0xfffe14f8>

000029d0 <__vfprintf_internal>:
    29d0:	00800074 	movhi	r2,1
    29d4:	1084a904 	addi	r2,r2,4772
    29d8:	300f883a 	mov	r7,r6
    29dc:	280d883a 	mov	r6,r5
    29e0:	200b883a 	mov	r5,r4
    29e4:	11000017 	ldw	r4,0(r2)
    29e8:	00007d81 	jmpi	7d8 <___vfprintf_internal_r>

000029ec <__sbprintf>:
    29ec:	2880030b 	ldhu	r2,12(r5)
    29f0:	2ac01917 	ldw	r11,100(r5)
    29f4:	2a80038b 	ldhu	r10,14(r5)
    29f8:	2a400717 	ldw	r9,28(r5)
    29fc:	2a000917 	ldw	r8,36(r5)
    2a00:	defee204 	addi	sp,sp,-1144
    2a04:	00c10004 	movi	r3,1024
    2a08:	dc011a15 	stw	r16,1128(sp)
    2a0c:	10bfff4c 	andi	r2,r2,65533
    2a10:	2821883a 	mov	r16,r5
    2a14:	d8cb883a 	add	r5,sp,r3
    2a18:	dc811c15 	stw	r18,1136(sp)
    2a1c:	dc411b15 	stw	r17,1132(sp)
    2a20:	dfc11d15 	stw	ra,1140(sp)
    2a24:	2025883a 	mov	r18,r4
    2a28:	d881030d 	sth	r2,1036(sp)
    2a2c:	dac11915 	stw	r11,1124(sp)
    2a30:	da81038d 	sth	r10,1038(sp)
    2a34:	da410715 	stw	r9,1052(sp)
    2a38:	da010915 	stw	r8,1060(sp)
    2a3c:	dec10015 	stw	sp,1024(sp)
    2a40:	dec10415 	stw	sp,1040(sp)
    2a44:	d8c10215 	stw	r3,1032(sp)
    2a48:	d8c10515 	stw	r3,1044(sp)
    2a4c:	d8010615 	stw	zero,1048(sp)
    2a50:	00007d80 	call	7d8 <___vfprintf_internal_r>
    2a54:	1023883a 	mov	r17,r2
    2a58:	10000416 	blt	r2,zero,2a6c <__sbprintf+0x80>
    2a5c:	d9410004 	addi	r5,sp,1024
    2a60:	9009883a 	mov	r4,r18
    2a64:	00046a00 	call	46a0 <_fflush_r>
    2a68:	10000d1e 	bne	r2,zero,2aa0 <__sbprintf+0xb4>
    2a6c:	d881030b 	ldhu	r2,1036(sp)
    2a70:	1080100c 	andi	r2,r2,64
    2a74:	10000326 	beq	r2,zero,2a84 <__sbprintf+0x98>
    2a78:	8080030b 	ldhu	r2,12(r16)
    2a7c:	10801014 	ori	r2,r2,64
    2a80:	8080030d 	sth	r2,12(r16)
    2a84:	8805883a 	mov	r2,r17
    2a88:	dfc11d17 	ldw	ra,1140(sp)
    2a8c:	dc811c17 	ldw	r18,1136(sp)
    2a90:	dc411b17 	ldw	r17,1132(sp)
    2a94:	dc011a17 	ldw	r16,1128(sp)
    2a98:	dec11e04 	addi	sp,sp,1144
    2a9c:	f800283a 	ret
    2aa0:	047fffc4 	movi	r17,-1
    2aa4:	003ff106 	br	2a6c <__alt_data_end+0xfffe2a6c>

00002aa8 <__swsetup_r>:
    2aa8:	00800074 	movhi	r2,1
    2aac:	defffd04 	addi	sp,sp,-12
    2ab0:	1084a904 	addi	r2,r2,4772
    2ab4:	dc400115 	stw	r17,4(sp)
    2ab8:	2023883a 	mov	r17,r4
    2abc:	11000017 	ldw	r4,0(r2)
    2ac0:	dc000015 	stw	r16,0(sp)
    2ac4:	dfc00215 	stw	ra,8(sp)
    2ac8:	2821883a 	mov	r16,r5
    2acc:	20000226 	beq	r4,zero,2ad8 <__swsetup_r+0x30>
    2ad0:	20800e17 	ldw	r2,56(r4)
    2ad4:	10003126 	beq	r2,zero,2b9c <__swsetup_r+0xf4>
    2ad8:	8080030b 	ldhu	r2,12(r16)
    2adc:	10c0020c 	andi	r3,r2,8
    2ae0:	1009883a 	mov	r4,r2
    2ae4:	18000f26 	beq	r3,zero,2b24 <__swsetup_r+0x7c>
    2ae8:	80c00417 	ldw	r3,16(r16)
    2aec:	18001526 	beq	r3,zero,2b44 <__swsetup_r+0x9c>
    2af0:	1100004c 	andi	r4,r2,1
    2af4:	20001c1e 	bne	r4,zero,2b68 <__swsetup_r+0xc0>
    2af8:	1080008c 	andi	r2,r2,2
    2afc:	1000291e 	bne	r2,zero,2ba4 <__swsetup_r+0xfc>
    2b00:	80800517 	ldw	r2,20(r16)
    2b04:	80800215 	stw	r2,8(r16)
    2b08:	18001c26 	beq	r3,zero,2b7c <__swsetup_r+0xd4>
    2b0c:	0005883a 	mov	r2,zero
    2b10:	dfc00217 	ldw	ra,8(sp)
    2b14:	dc400117 	ldw	r17,4(sp)
    2b18:	dc000017 	ldw	r16,0(sp)
    2b1c:	dec00304 	addi	sp,sp,12
    2b20:	f800283a 	ret
    2b24:	2080040c 	andi	r2,r4,16
    2b28:	10002e26 	beq	r2,zero,2be4 <__swsetup_r+0x13c>
    2b2c:	2080010c 	andi	r2,r4,4
    2b30:	10001e1e 	bne	r2,zero,2bac <__swsetup_r+0x104>
    2b34:	80c00417 	ldw	r3,16(r16)
    2b38:	20800214 	ori	r2,r4,8
    2b3c:	8080030d 	sth	r2,12(r16)
    2b40:	183feb1e 	bne	r3,zero,2af0 <__alt_data_end+0xfffe2af0>
    2b44:	1100a00c 	andi	r4,r2,640
    2b48:	01408004 	movi	r5,512
    2b4c:	217fe826 	beq	r4,r5,2af0 <__alt_data_end+0xfffe2af0>
    2b50:	800b883a 	mov	r5,r16
    2b54:	8809883a 	mov	r4,r17
    2b58:	00056200 	call	5620 <__smakebuf_r>
    2b5c:	8080030b 	ldhu	r2,12(r16)
    2b60:	80c00417 	ldw	r3,16(r16)
    2b64:	003fe206 	br	2af0 <__alt_data_end+0xfffe2af0>
    2b68:	80800517 	ldw	r2,20(r16)
    2b6c:	80000215 	stw	zero,8(r16)
    2b70:	0085c83a 	sub	r2,zero,r2
    2b74:	80800615 	stw	r2,24(r16)
    2b78:	183fe41e 	bne	r3,zero,2b0c <__alt_data_end+0xfffe2b0c>
    2b7c:	80c0030b 	ldhu	r3,12(r16)
    2b80:	0005883a 	mov	r2,zero
    2b84:	1900200c 	andi	r4,r3,128
    2b88:	203fe126 	beq	r4,zero,2b10 <__alt_data_end+0xfffe2b10>
    2b8c:	18c01014 	ori	r3,r3,64
    2b90:	80c0030d 	sth	r3,12(r16)
    2b94:	00bfffc4 	movi	r2,-1
    2b98:	003fdd06 	br	2b10 <__alt_data_end+0xfffe2b10>
    2b9c:	0004a7c0 	call	4a7c <__sinit>
    2ba0:	003fcd06 	br	2ad8 <__alt_data_end+0xfffe2ad8>
    2ba4:	0005883a 	mov	r2,zero
    2ba8:	003fd606 	br	2b04 <__alt_data_end+0xfffe2b04>
    2bac:	81400c17 	ldw	r5,48(r16)
    2bb0:	28000626 	beq	r5,zero,2bcc <__swsetup_r+0x124>
    2bb4:	80801004 	addi	r2,r16,64
    2bb8:	28800326 	beq	r5,r2,2bc8 <__swsetup_r+0x120>
    2bbc:	8809883a 	mov	r4,r17
    2bc0:	0004bf00 	call	4bf0 <_free_r>
    2bc4:	8100030b 	ldhu	r4,12(r16)
    2bc8:	80000c15 	stw	zero,48(r16)
    2bcc:	80c00417 	ldw	r3,16(r16)
    2bd0:	00bff6c4 	movi	r2,-37
    2bd4:	1108703a 	and	r4,r2,r4
    2bd8:	80000115 	stw	zero,4(r16)
    2bdc:	80c00015 	stw	r3,0(r16)
    2be0:	003fd506 	br	2b38 <__alt_data_end+0xfffe2b38>
    2be4:	00800244 	movi	r2,9
    2be8:	88800015 	stw	r2,0(r17)
    2bec:	20801014 	ori	r2,r4,64
    2bf0:	8080030d 	sth	r2,12(r16)
    2bf4:	00bfffc4 	movi	r2,-1
    2bf8:	003fc506 	br	2b10 <__alt_data_end+0xfffe2b10>

00002bfc <quorem>:
    2bfc:	defff704 	addi	sp,sp,-36
    2c00:	dc800215 	stw	r18,8(sp)
    2c04:	20800417 	ldw	r2,16(r4)
    2c08:	2c800417 	ldw	r18,16(r5)
    2c0c:	dfc00815 	stw	ra,32(sp)
    2c10:	ddc00715 	stw	r23,28(sp)
    2c14:	dd800615 	stw	r22,24(sp)
    2c18:	dd400515 	stw	r21,20(sp)
    2c1c:	dd000415 	stw	r20,16(sp)
    2c20:	dcc00315 	stw	r19,12(sp)
    2c24:	dc400115 	stw	r17,4(sp)
    2c28:	dc000015 	stw	r16,0(sp)
    2c2c:	14807116 	blt	r2,r18,2df4 <quorem+0x1f8>
    2c30:	94bfffc4 	addi	r18,r18,-1
    2c34:	94ad883a 	add	r22,r18,r18
    2c38:	b5ad883a 	add	r22,r22,r22
    2c3c:	2c400504 	addi	r17,r5,20
    2c40:	8da9883a 	add	r20,r17,r22
    2c44:	25400504 	addi	r21,r4,20
    2c48:	282f883a 	mov	r23,r5
    2c4c:	adad883a 	add	r22,r21,r22
    2c50:	a1400017 	ldw	r5,0(r20)
    2c54:	2021883a 	mov	r16,r4
    2c58:	b1000017 	ldw	r4,0(r22)
    2c5c:	29400044 	addi	r5,r5,1
    2c60:	00005440 	call	544 <__udivsi3>
    2c64:	1027883a 	mov	r19,r2
    2c68:	10002c26 	beq	r2,zero,2d1c <quorem+0x120>
    2c6c:	a813883a 	mov	r9,r21
    2c70:	880b883a 	mov	r5,r17
    2c74:	0009883a 	mov	r4,zero
    2c78:	000d883a 	mov	r6,zero
    2c7c:	2a000017 	ldw	r8,0(r5)
    2c80:	49c00017 	ldw	r7,0(r9)
    2c84:	29400104 	addi	r5,r5,4
    2c88:	40bfffcc 	andi	r2,r8,65535
    2c8c:	14c5383a 	mul	r2,r2,r19
    2c90:	4010d43a 	srli	r8,r8,16
    2c94:	38ffffcc 	andi	r3,r7,65535
    2c98:	1105883a 	add	r2,r2,r4
    2c9c:	1008d43a 	srli	r4,r2,16
    2ca0:	44d1383a 	mul	r8,r8,r19
    2ca4:	198d883a 	add	r6,r3,r6
    2ca8:	10ffffcc 	andi	r3,r2,65535
    2cac:	30c7c83a 	sub	r3,r6,r3
    2cb0:	380ed43a 	srli	r7,r7,16
    2cb4:	4105883a 	add	r2,r8,r4
    2cb8:	180dd43a 	srai	r6,r3,16
    2cbc:	113fffcc 	andi	r4,r2,65535
    2cc0:	390fc83a 	sub	r7,r7,r4
    2cc4:	398d883a 	add	r6,r7,r6
    2cc8:	300e943a 	slli	r7,r6,16
    2ccc:	18ffffcc 	andi	r3,r3,65535
    2cd0:	1008d43a 	srli	r4,r2,16
    2cd4:	38ceb03a 	or	r7,r7,r3
    2cd8:	49c00015 	stw	r7,0(r9)
    2cdc:	300dd43a 	srai	r6,r6,16
    2ce0:	4a400104 	addi	r9,r9,4
    2ce4:	a17fe52e 	bgeu	r20,r5,2c7c <__alt_data_end+0xfffe2c7c>
    2ce8:	b0800017 	ldw	r2,0(r22)
    2cec:	10000b1e 	bne	r2,zero,2d1c <quorem+0x120>
    2cf0:	b0bfff04 	addi	r2,r22,-4
    2cf4:	a880082e 	bgeu	r21,r2,2d18 <quorem+0x11c>
    2cf8:	b0ffff17 	ldw	r3,-4(r22)
    2cfc:	18000326 	beq	r3,zero,2d0c <quorem+0x110>
    2d00:	00000506 	br	2d18 <quorem+0x11c>
    2d04:	10c00017 	ldw	r3,0(r2)
    2d08:	1800031e 	bne	r3,zero,2d18 <quorem+0x11c>
    2d0c:	10bfff04 	addi	r2,r2,-4
    2d10:	94bfffc4 	addi	r18,r18,-1
    2d14:	a8bffb36 	bltu	r21,r2,2d04 <__alt_data_end+0xfffe2d04>
    2d18:	84800415 	stw	r18,16(r16)
    2d1c:	b80b883a 	mov	r5,r23
    2d20:	8009883a 	mov	r4,r16
    2d24:	0006d600 	call	6d60 <__mcmp>
    2d28:	10002616 	blt	r2,zero,2dc4 <quorem+0x1c8>
    2d2c:	9cc00044 	addi	r19,r19,1
    2d30:	a805883a 	mov	r2,r21
    2d34:	000b883a 	mov	r5,zero
    2d38:	11000017 	ldw	r4,0(r2)
    2d3c:	89800017 	ldw	r6,0(r17)
    2d40:	10800104 	addi	r2,r2,4
    2d44:	20ffffcc 	andi	r3,r4,65535
    2d48:	194b883a 	add	r5,r3,r5
    2d4c:	30ffffcc 	andi	r3,r6,65535
    2d50:	28c7c83a 	sub	r3,r5,r3
    2d54:	300cd43a 	srli	r6,r6,16
    2d58:	2008d43a 	srli	r4,r4,16
    2d5c:	180bd43a 	srai	r5,r3,16
    2d60:	18ffffcc 	andi	r3,r3,65535
    2d64:	2189c83a 	sub	r4,r4,r6
    2d68:	2149883a 	add	r4,r4,r5
    2d6c:	200c943a 	slli	r6,r4,16
    2d70:	8c400104 	addi	r17,r17,4
    2d74:	200bd43a 	srai	r5,r4,16
    2d78:	30c6b03a 	or	r3,r6,r3
    2d7c:	10ffff15 	stw	r3,-4(r2)
    2d80:	a47fed2e 	bgeu	r20,r17,2d38 <__alt_data_end+0xfffe2d38>
    2d84:	9485883a 	add	r2,r18,r18
    2d88:	1085883a 	add	r2,r2,r2
    2d8c:	a887883a 	add	r3,r21,r2
    2d90:	18800017 	ldw	r2,0(r3)
    2d94:	10000b1e 	bne	r2,zero,2dc4 <quorem+0x1c8>
    2d98:	18bfff04 	addi	r2,r3,-4
    2d9c:	a880082e 	bgeu	r21,r2,2dc0 <quorem+0x1c4>
    2da0:	18ffff17 	ldw	r3,-4(r3)
    2da4:	18000326 	beq	r3,zero,2db4 <quorem+0x1b8>
    2da8:	00000506 	br	2dc0 <quorem+0x1c4>
    2dac:	10c00017 	ldw	r3,0(r2)
    2db0:	1800031e 	bne	r3,zero,2dc0 <quorem+0x1c4>
    2db4:	10bfff04 	addi	r2,r2,-4
    2db8:	94bfffc4 	addi	r18,r18,-1
    2dbc:	a8bffb36 	bltu	r21,r2,2dac <__alt_data_end+0xfffe2dac>
    2dc0:	84800415 	stw	r18,16(r16)
    2dc4:	9805883a 	mov	r2,r19
    2dc8:	dfc00817 	ldw	ra,32(sp)
    2dcc:	ddc00717 	ldw	r23,28(sp)
    2dd0:	dd800617 	ldw	r22,24(sp)
    2dd4:	dd400517 	ldw	r21,20(sp)
    2dd8:	dd000417 	ldw	r20,16(sp)
    2ddc:	dcc00317 	ldw	r19,12(sp)
    2de0:	dc800217 	ldw	r18,8(sp)
    2de4:	dc400117 	ldw	r17,4(sp)
    2de8:	dc000017 	ldw	r16,0(sp)
    2dec:	dec00904 	addi	sp,sp,36
    2df0:	f800283a 	ret
    2df4:	0005883a 	mov	r2,zero
    2df8:	003ff306 	br	2dc8 <__alt_data_end+0xfffe2dc8>

00002dfc <_dtoa_r>:
    2dfc:	20801017 	ldw	r2,64(r4)
    2e00:	deffde04 	addi	sp,sp,-136
    2e04:	df002015 	stw	fp,128(sp)
    2e08:	dcc01b15 	stw	r19,108(sp)
    2e0c:	dc801a15 	stw	r18,104(sp)
    2e10:	dc401915 	stw	r17,100(sp)
    2e14:	dc001815 	stw	r16,96(sp)
    2e18:	dfc02115 	stw	ra,132(sp)
    2e1c:	ddc01f15 	stw	r23,124(sp)
    2e20:	dd801e15 	stw	r22,120(sp)
    2e24:	dd401d15 	stw	r21,116(sp)
    2e28:	dd001c15 	stw	r20,112(sp)
    2e2c:	d9c00315 	stw	r7,12(sp)
    2e30:	2039883a 	mov	fp,r4
    2e34:	3023883a 	mov	r17,r6
    2e38:	2825883a 	mov	r18,r5
    2e3c:	dc002417 	ldw	r16,144(sp)
    2e40:	3027883a 	mov	r19,r6
    2e44:	10000826 	beq	r2,zero,2e68 <_dtoa_r+0x6c>
    2e48:	21801117 	ldw	r6,68(r4)
    2e4c:	00c00044 	movi	r3,1
    2e50:	100b883a 	mov	r5,r2
    2e54:	1986983a 	sll	r3,r3,r6
    2e58:	11800115 	stw	r6,4(r2)
    2e5c:	10c00215 	stw	r3,8(r2)
    2e60:	00065400 	call	6540 <_Bfree>
    2e64:	e0001015 	stw	zero,64(fp)
    2e68:	88002e16 	blt	r17,zero,2f24 <_dtoa_r+0x128>
    2e6c:	80000015 	stw	zero,0(r16)
    2e70:	889ffc2c 	andhi	r2,r17,32752
    2e74:	00dffc34 	movhi	r3,32752
    2e78:	10c01c26 	beq	r2,r3,2eec <_dtoa_r+0xf0>
    2e7c:	000d883a 	mov	r6,zero
    2e80:	000f883a 	mov	r7,zero
    2e84:	9009883a 	mov	r4,r18
    2e88:	980b883a 	mov	r5,r19
    2e8c:	000b8980 	call	b898 <__eqdf2>
    2e90:	10002b1e 	bne	r2,zero,2f40 <_dtoa_r+0x144>
    2e94:	d9c02317 	ldw	r7,140(sp)
    2e98:	00800044 	movi	r2,1
    2e9c:	38800015 	stw	r2,0(r7)
    2ea0:	d8802517 	ldw	r2,148(sp)
    2ea4:	10019e26 	beq	r2,zero,3520 <_dtoa_r+0x724>
    2ea8:	d8c02517 	ldw	r3,148(sp)
    2eac:	00800074 	movhi	r2,1
    2eb0:	10bd4e44 	addi	r2,r2,-2759
    2eb4:	18800015 	stw	r2,0(r3)
    2eb8:	10bfffc4 	addi	r2,r2,-1
    2ebc:	dfc02117 	ldw	ra,132(sp)
    2ec0:	df002017 	ldw	fp,128(sp)
    2ec4:	ddc01f17 	ldw	r23,124(sp)
    2ec8:	dd801e17 	ldw	r22,120(sp)
    2ecc:	dd401d17 	ldw	r21,116(sp)
    2ed0:	dd001c17 	ldw	r20,112(sp)
    2ed4:	dcc01b17 	ldw	r19,108(sp)
    2ed8:	dc801a17 	ldw	r18,104(sp)
    2edc:	dc401917 	ldw	r17,100(sp)
    2ee0:	dc001817 	ldw	r16,96(sp)
    2ee4:	dec02204 	addi	sp,sp,136
    2ee8:	f800283a 	ret
    2eec:	d8c02317 	ldw	r3,140(sp)
    2ef0:	0089c3c4 	movi	r2,9999
    2ef4:	18800015 	stw	r2,0(r3)
    2ef8:	90017726 	beq	r18,zero,34d8 <_dtoa_r+0x6dc>
    2efc:	00800074 	movhi	r2,1
    2f00:	10bd5a04 	addi	r2,r2,-2712
    2f04:	d9002517 	ldw	r4,148(sp)
    2f08:	203fec26 	beq	r4,zero,2ebc <__alt_data_end+0xfffe2ebc>
    2f0c:	10c000c7 	ldb	r3,3(r2)
    2f10:	1801781e 	bne	r3,zero,34f4 <_dtoa_r+0x6f8>
    2f14:	10c000c4 	addi	r3,r2,3
    2f18:	d9802517 	ldw	r6,148(sp)
    2f1c:	30c00015 	stw	r3,0(r6)
    2f20:	003fe606 	br	2ebc <__alt_data_end+0xfffe2ebc>
    2f24:	04e00034 	movhi	r19,32768
    2f28:	9cffffc4 	addi	r19,r19,-1
    2f2c:	00800044 	movi	r2,1
    2f30:	8ce6703a 	and	r19,r17,r19
    2f34:	80800015 	stw	r2,0(r16)
    2f38:	9823883a 	mov	r17,r19
    2f3c:	003fcc06 	br	2e70 <__alt_data_end+0xfffe2e70>
    2f40:	d8800204 	addi	r2,sp,8
    2f44:	d8800015 	stw	r2,0(sp)
    2f48:	d9c00104 	addi	r7,sp,4
    2f4c:	900b883a 	mov	r5,r18
    2f50:	980d883a 	mov	r6,r19
    2f54:	e009883a 	mov	r4,fp
    2f58:	8820d53a 	srli	r16,r17,20
    2f5c:	000712c0 	call	712c <__d2b>
    2f60:	d8800915 	stw	r2,36(sp)
    2f64:	8001651e 	bne	r16,zero,34fc <_dtoa_r+0x700>
    2f68:	dd800217 	ldw	r22,8(sp)
    2f6c:	dc000117 	ldw	r16,4(sp)
    2f70:	00800804 	movi	r2,32
    2f74:	b421883a 	add	r16,r22,r16
    2f78:	80c10c84 	addi	r3,r16,1074
    2f7c:	10c2d10e 	bge	r2,r3,3ac4 <_dtoa_r+0xcc8>
    2f80:	00801004 	movi	r2,64
    2f84:	81010484 	addi	r4,r16,1042
    2f88:	10c7c83a 	sub	r3,r2,r3
    2f8c:	9108d83a 	srl	r4,r18,r4
    2f90:	88e2983a 	sll	r17,r17,r3
    2f94:	2448b03a 	or	r4,r4,r17
    2f98:	000cc600 	call	cc60 <__floatunsidf>
    2f9c:	017f8434 	movhi	r5,65040
    2fa0:	01800044 	movi	r6,1
    2fa4:	1009883a 	mov	r4,r2
    2fa8:	194b883a 	add	r5,r3,r5
    2fac:	843fffc4 	addi	r16,r16,-1
    2fb0:	d9801115 	stw	r6,68(sp)
    2fb4:	000d883a 	mov	r6,zero
    2fb8:	01cffe34 	movhi	r7,16376
    2fbc:	000c2080 	call	c208 <__subdf3>
    2fc0:	0198dbf4 	movhi	r6,25455
    2fc4:	01cff4f4 	movhi	r7,16339
    2fc8:	3190d844 	addi	r6,r6,17249
    2fcc:	39e1e9c4 	addi	r7,r7,-30809
    2fd0:	1009883a 	mov	r4,r2
    2fd4:	180b883a 	mov	r5,r3
    2fd8:	000baf00 	call	baf0 <__muldf3>
    2fdc:	01a2d874 	movhi	r6,35681
    2fe0:	01cff1f4 	movhi	r7,16327
    2fe4:	31b22cc4 	addi	r6,r6,-14157
    2fe8:	39e28a04 	addi	r7,r7,-30168
    2fec:	180b883a 	mov	r5,r3
    2ff0:	1009883a 	mov	r4,r2
    2ff4:	000a7040 	call	a704 <__adddf3>
    2ff8:	8009883a 	mov	r4,r16
    2ffc:	1029883a 	mov	r20,r2
    3000:	1823883a 	mov	r17,r3
    3004:	000cb840 	call	cb84 <__floatsidf>
    3008:	019427f4 	movhi	r6,20639
    300c:	01cff4f4 	movhi	r7,16339
    3010:	319e7ec4 	addi	r6,r6,31227
    3014:	39d104c4 	addi	r7,r7,17427
    3018:	1009883a 	mov	r4,r2
    301c:	180b883a 	mov	r5,r3
    3020:	000baf00 	call	baf0 <__muldf3>
    3024:	100d883a 	mov	r6,r2
    3028:	180f883a 	mov	r7,r3
    302c:	a009883a 	mov	r4,r20
    3030:	880b883a 	mov	r5,r17
    3034:	000a7040 	call	a704 <__adddf3>
    3038:	1009883a 	mov	r4,r2
    303c:	180b883a 	mov	r5,r3
    3040:	1029883a 	mov	r20,r2
    3044:	1823883a 	mov	r17,r3
    3048:	000cb040 	call	cb04 <__fixdfsi>
    304c:	000d883a 	mov	r6,zero
    3050:	000f883a 	mov	r7,zero
    3054:	a009883a 	mov	r4,r20
    3058:	880b883a 	mov	r5,r17
    305c:	d8800515 	stw	r2,20(sp)
    3060:	000b9fc0 	call	b9fc <__ledf2>
    3064:	10028716 	blt	r2,zero,3a84 <_dtoa_r+0xc88>
    3068:	d8c00517 	ldw	r3,20(sp)
    306c:	00800584 	movi	r2,22
    3070:	10c27536 	bltu	r2,r3,3a48 <_dtoa_r+0xc4c>
    3074:	180490fa 	slli	r2,r3,3
    3078:	00c00074 	movhi	r3,1
    307c:	18fd7604 	addi	r3,r3,-2600
    3080:	1885883a 	add	r2,r3,r2
    3084:	11000017 	ldw	r4,0(r2)
    3088:	11400117 	ldw	r5,4(r2)
    308c:	900d883a 	mov	r6,r18
    3090:	980f883a 	mov	r7,r19
    3094:	000b9200 	call	b920 <__gedf2>
    3098:	00828d0e 	bge	zero,r2,3ad0 <_dtoa_r+0xcd4>
    309c:	d9000517 	ldw	r4,20(sp)
    30a0:	d8000e15 	stw	zero,56(sp)
    30a4:	213fffc4 	addi	r4,r4,-1
    30a8:	d9000515 	stw	r4,20(sp)
    30ac:	b42dc83a 	sub	r22,r22,r16
    30b0:	b5bfffc4 	addi	r22,r22,-1
    30b4:	b0026f16 	blt	r22,zero,3a74 <_dtoa_r+0xc78>
    30b8:	d8000815 	stw	zero,32(sp)
    30bc:	d9c00517 	ldw	r7,20(sp)
    30c0:	38026416 	blt	r7,zero,3a54 <_dtoa_r+0xc58>
    30c4:	b1ed883a 	add	r22,r22,r7
    30c8:	d9c00d15 	stw	r7,52(sp)
    30cc:	d8000a15 	stw	zero,40(sp)
    30d0:	d9800317 	ldw	r6,12(sp)
    30d4:	00800244 	movi	r2,9
    30d8:	11811436 	bltu	r2,r6,352c <_dtoa_r+0x730>
    30dc:	00800144 	movi	r2,5
    30e0:	1184e10e 	bge	r2,r6,4468 <_dtoa_r+0x166c>
    30e4:	31bfff04 	addi	r6,r6,-4
    30e8:	d9800315 	stw	r6,12(sp)
    30ec:	0023883a 	mov	r17,zero
    30f0:	d9800317 	ldw	r6,12(sp)
    30f4:	008000c4 	movi	r2,3
    30f8:	30836726 	beq	r6,r2,3e98 <_dtoa_r+0x109c>
    30fc:	1183410e 	bge	r2,r6,3e04 <_dtoa_r+0x1008>
    3100:	d9c00317 	ldw	r7,12(sp)
    3104:	00800104 	movi	r2,4
    3108:	38827c26 	beq	r7,r2,3afc <_dtoa_r+0xd00>
    310c:	00800144 	movi	r2,5
    3110:	3884c41e 	bne	r7,r2,4424 <_dtoa_r+0x1628>
    3114:	00800044 	movi	r2,1
    3118:	d8800b15 	stw	r2,44(sp)
    311c:	d8c00517 	ldw	r3,20(sp)
    3120:	d9002217 	ldw	r4,136(sp)
    3124:	1907883a 	add	r3,r3,r4
    3128:	19800044 	addi	r6,r3,1
    312c:	d8c00c15 	stw	r3,48(sp)
    3130:	d9800615 	stw	r6,24(sp)
    3134:	0183a40e 	bge	zero,r6,3fc8 <_dtoa_r+0x11cc>
    3138:	d9800617 	ldw	r6,24(sp)
    313c:	3021883a 	mov	r16,r6
    3140:	e0001115 	stw	zero,68(fp)
    3144:	008005c4 	movi	r2,23
    3148:	1184c92e 	bgeu	r2,r6,4470 <_dtoa_r+0x1674>
    314c:	00c00044 	movi	r3,1
    3150:	00800104 	movi	r2,4
    3154:	1085883a 	add	r2,r2,r2
    3158:	11000504 	addi	r4,r2,20
    315c:	180b883a 	mov	r5,r3
    3160:	18c00044 	addi	r3,r3,1
    3164:	313ffb2e 	bgeu	r6,r4,3154 <__alt_data_end+0xfffe3154>
    3168:	e1401115 	stw	r5,68(fp)
    316c:	e009883a 	mov	r4,fp
    3170:	00064980 	call	6498 <_Balloc>
    3174:	d8800715 	stw	r2,28(sp)
    3178:	e0801015 	stw	r2,64(fp)
    317c:	00800384 	movi	r2,14
    3180:	1400f736 	bltu	r2,r16,3560 <_dtoa_r+0x764>
    3184:	8800f626 	beq	r17,zero,3560 <_dtoa_r+0x764>
    3188:	d9c00517 	ldw	r7,20(sp)
    318c:	01c39a0e 	bge	zero,r7,3ff8 <_dtoa_r+0x11fc>
    3190:	388003cc 	andi	r2,r7,15
    3194:	100490fa 	slli	r2,r2,3
    3198:	382bd13a 	srai	r21,r7,4
    319c:	00c00074 	movhi	r3,1
    31a0:	18fd7604 	addi	r3,r3,-2600
    31a4:	1885883a 	add	r2,r3,r2
    31a8:	a8c0040c 	andi	r3,r21,16
    31ac:	12400017 	ldw	r9,0(r2)
    31b0:	12000117 	ldw	r8,4(r2)
    31b4:	18037926 	beq	r3,zero,3f9c <_dtoa_r+0x11a0>
    31b8:	00800074 	movhi	r2,1
    31bc:	10bd6c04 	addi	r2,r2,-2640
    31c0:	11800817 	ldw	r6,32(r2)
    31c4:	11c00917 	ldw	r7,36(r2)
    31c8:	9009883a 	mov	r4,r18
    31cc:	980b883a 	mov	r5,r19
    31d0:	da001715 	stw	r8,92(sp)
    31d4:	da401615 	stw	r9,88(sp)
    31d8:	000afb00 	call	afb0 <__divdf3>
    31dc:	da001717 	ldw	r8,92(sp)
    31e0:	da401617 	ldw	r9,88(sp)
    31e4:	ad4003cc 	andi	r21,r21,15
    31e8:	040000c4 	movi	r16,3
    31ec:	1023883a 	mov	r17,r2
    31f0:	1829883a 	mov	r20,r3
    31f4:	a8001126 	beq	r21,zero,323c <_dtoa_r+0x440>
    31f8:	05c00074 	movhi	r23,1
    31fc:	bdfd6c04 	addi	r23,r23,-2640
    3200:	4805883a 	mov	r2,r9
    3204:	4007883a 	mov	r3,r8
    3208:	a980004c 	andi	r6,r21,1
    320c:	1009883a 	mov	r4,r2
    3210:	a82bd07a 	srai	r21,r21,1
    3214:	180b883a 	mov	r5,r3
    3218:	30000426 	beq	r6,zero,322c <_dtoa_r+0x430>
    321c:	b9800017 	ldw	r6,0(r23)
    3220:	b9c00117 	ldw	r7,4(r23)
    3224:	84000044 	addi	r16,r16,1
    3228:	000baf00 	call	baf0 <__muldf3>
    322c:	bdc00204 	addi	r23,r23,8
    3230:	a83ff51e 	bne	r21,zero,3208 <__alt_data_end+0xfffe3208>
    3234:	1013883a 	mov	r9,r2
    3238:	1811883a 	mov	r8,r3
    323c:	480d883a 	mov	r6,r9
    3240:	400f883a 	mov	r7,r8
    3244:	8809883a 	mov	r4,r17
    3248:	a00b883a 	mov	r5,r20
    324c:	000afb00 	call	afb0 <__divdf3>
    3250:	d8800f15 	stw	r2,60(sp)
    3254:	d8c01015 	stw	r3,64(sp)
    3258:	d8c00e17 	ldw	r3,56(sp)
    325c:	18000626 	beq	r3,zero,3278 <_dtoa_r+0x47c>
    3260:	d9000f17 	ldw	r4,60(sp)
    3264:	d9401017 	ldw	r5,64(sp)
    3268:	000d883a 	mov	r6,zero
    326c:	01cffc34 	movhi	r7,16368
    3270:	000b9fc0 	call	b9fc <__ledf2>
    3274:	10040b16 	blt	r2,zero,42a4 <_dtoa_r+0x14a8>
    3278:	8009883a 	mov	r4,r16
    327c:	000cb840 	call	cb84 <__floatsidf>
    3280:	d9800f17 	ldw	r6,60(sp)
    3284:	d9c01017 	ldw	r7,64(sp)
    3288:	1009883a 	mov	r4,r2
    328c:	180b883a 	mov	r5,r3
    3290:	000baf00 	call	baf0 <__muldf3>
    3294:	000d883a 	mov	r6,zero
    3298:	01d00734 	movhi	r7,16412
    329c:	1009883a 	mov	r4,r2
    32a0:	180b883a 	mov	r5,r3
    32a4:	000a7040 	call	a704 <__adddf3>
    32a8:	1021883a 	mov	r16,r2
    32ac:	d8800617 	ldw	r2,24(sp)
    32b0:	047f3034 	movhi	r17,64704
    32b4:	1c63883a 	add	r17,r3,r17
    32b8:	10031826 	beq	r2,zero,3f1c <_dtoa_r+0x1120>
    32bc:	d8c00517 	ldw	r3,20(sp)
    32c0:	db000617 	ldw	r12,24(sp)
    32c4:	d8c01315 	stw	r3,76(sp)
    32c8:	d9000b17 	ldw	r4,44(sp)
    32cc:	20038f26 	beq	r4,zero,410c <_dtoa_r+0x1310>
    32d0:	60bfffc4 	addi	r2,r12,-1
    32d4:	100490fa 	slli	r2,r2,3
    32d8:	00c00074 	movhi	r3,1
    32dc:	18fd7604 	addi	r3,r3,-2600
    32e0:	1885883a 	add	r2,r3,r2
    32e4:	11800017 	ldw	r6,0(r2)
    32e8:	11c00117 	ldw	r7,4(r2)
    32ec:	d8800717 	ldw	r2,28(sp)
    32f0:	0009883a 	mov	r4,zero
    32f4:	014ff834 	movhi	r5,16352
    32f8:	db001615 	stw	r12,88(sp)
    32fc:	15c00044 	addi	r23,r2,1
    3300:	000afb00 	call	afb0 <__divdf3>
    3304:	800d883a 	mov	r6,r16
    3308:	880f883a 	mov	r7,r17
    330c:	1009883a 	mov	r4,r2
    3310:	180b883a 	mov	r5,r3
    3314:	000c2080 	call	c208 <__subdf3>
    3318:	d9401017 	ldw	r5,64(sp)
    331c:	d9000f17 	ldw	r4,60(sp)
    3320:	102b883a 	mov	r21,r2
    3324:	d8c01215 	stw	r3,72(sp)
    3328:	000cb040 	call	cb04 <__fixdfsi>
    332c:	1009883a 	mov	r4,r2
    3330:	1029883a 	mov	r20,r2
    3334:	000cb840 	call	cb84 <__floatsidf>
    3338:	d9000f17 	ldw	r4,60(sp)
    333c:	d9401017 	ldw	r5,64(sp)
    3340:	100d883a 	mov	r6,r2
    3344:	180f883a 	mov	r7,r3
    3348:	000c2080 	call	c208 <__subdf3>
    334c:	1823883a 	mov	r17,r3
    3350:	d8c00717 	ldw	r3,28(sp)
    3354:	d9401217 	ldw	r5,72(sp)
    3358:	a2000c04 	addi	r8,r20,48
    335c:	1021883a 	mov	r16,r2
    3360:	1a000005 	stb	r8,0(r3)
    3364:	800d883a 	mov	r6,r16
    3368:	880f883a 	mov	r7,r17
    336c:	a809883a 	mov	r4,r21
    3370:	4029883a 	mov	r20,r8
    3374:	000b9200 	call	b920 <__gedf2>
    3378:	00841d16 	blt	zero,r2,43f0 <_dtoa_r+0x15f4>
    337c:	800d883a 	mov	r6,r16
    3380:	880f883a 	mov	r7,r17
    3384:	0009883a 	mov	r4,zero
    3388:	014ffc34 	movhi	r5,16368
    338c:	000c2080 	call	c208 <__subdf3>
    3390:	d9401217 	ldw	r5,72(sp)
    3394:	100d883a 	mov	r6,r2
    3398:	180f883a 	mov	r7,r3
    339c:	a809883a 	mov	r4,r21
    33a0:	000b9200 	call	b920 <__gedf2>
    33a4:	db001617 	ldw	r12,88(sp)
    33a8:	00840e16 	blt	zero,r2,43e4 <_dtoa_r+0x15e8>
    33ac:	00800044 	movi	r2,1
    33b0:	13006b0e 	bge	r2,r12,3560 <_dtoa_r+0x764>
    33b4:	d9000717 	ldw	r4,28(sp)
    33b8:	dd800f15 	stw	r22,60(sp)
    33bc:	dcc01015 	stw	r19,64(sp)
    33c0:	2319883a 	add	r12,r4,r12
    33c4:	dcc01217 	ldw	r19,72(sp)
    33c8:	602d883a 	mov	r22,r12
    33cc:	dc801215 	stw	r18,72(sp)
    33d0:	b825883a 	mov	r18,r23
    33d4:	00000906 	br	33fc <_dtoa_r+0x600>
    33d8:	000c2080 	call	c208 <__subdf3>
    33dc:	a80d883a 	mov	r6,r21
    33e0:	980f883a 	mov	r7,r19
    33e4:	1009883a 	mov	r4,r2
    33e8:	180b883a 	mov	r5,r3
    33ec:	000b9fc0 	call	b9fc <__ledf2>
    33f0:	1003e816 	blt	r2,zero,4394 <_dtoa_r+0x1598>
    33f4:	b825883a 	mov	r18,r23
    33f8:	bd83e926 	beq	r23,r22,43a0 <_dtoa_r+0x15a4>
    33fc:	a809883a 	mov	r4,r21
    3400:	980b883a 	mov	r5,r19
    3404:	000d883a 	mov	r6,zero
    3408:	01d00934 	movhi	r7,16420
    340c:	000baf00 	call	baf0 <__muldf3>
    3410:	000d883a 	mov	r6,zero
    3414:	01d00934 	movhi	r7,16420
    3418:	8009883a 	mov	r4,r16
    341c:	880b883a 	mov	r5,r17
    3420:	102b883a 	mov	r21,r2
    3424:	1827883a 	mov	r19,r3
    3428:	000baf00 	call	baf0 <__muldf3>
    342c:	180b883a 	mov	r5,r3
    3430:	1009883a 	mov	r4,r2
    3434:	1821883a 	mov	r16,r3
    3438:	1023883a 	mov	r17,r2
    343c:	000cb040 	call	cb04 <__fixdfsi>
    3440:	1009883a 	mov	r4,r2
    3444:	1029883a 	mov	r20,r2
    3448:	000cb840 	call	cb84 <__floatsidf>
    344c:	8809883a 	mov	r4,r17
    3450:	800b883a 	mov	r5,r16
    3454:	100d883a 	mov	r6,r2
    3458:	180f883a 	mov	r7,r3
    345c:	000c2080 	call	c208 <__subdf3>
    3460:	a5000c04 	addi	r20,r20,48
    3464:	a80d883a 	mov	r6,r21
    3468:	980f883a 	mov	r7,r19
    346c:	1009883a 	mov	r4,r2
    3470:	180b883a 	mov	r5,r3
    3474:	95000005 	stb	r20,0(r18)
    3478:	1021883a 	mov	r16,r2
    347c:	1823883a 	mov	r17,r3
    3480:	000b9fc0 	call	b9fc <__ledf2>
    3484:	bdc00044 	addi	r23,r23,1
    3488:	800d883a 	mov	r6,r16
    348c:	880f883a 	mov	r7,r17
    3490:	0009883a 	mov	r4,zero
    3494:	014ffc34 	movhi	r5,16368
    3498:	103fcf0e 	bge	r2,zero,33d8 <__alt_data_end+0xfffe33d8>
    349c:	d8c01317 	ldw	r3,76(sp)
    34a0:	d8c00515 	stw	r3,20(sp)
    34a4:	d9400917 	ldw	r5,36(sp)
    34a8:	e009883a 	mov	r4,fp
    34ac:	00065400 	call	6540 <_Bfree>
    34b0:	d9000517 	ldw	r4,20(sp)
    34b4:	d9802317 	ldw	r6,140(sp)
    34b8:	d9c02517 	ldw	r7,148(sp)
    34bc:	b8000005 	stb	zero,0(r23)
    34c0:	20800044 	addi	r2,r4,1
    34c4:	30800015 	stw	r2,0(r6)
    34c8:	3802aa26 	beq	r7,zero,3f74 <_dtoa_r+0x1178>
    34cc:	3dc00015 	stw	r23,0(r7)
    34d0:	d8800717 	ldw	r2,28(sp)
    34d4:	003e7906 	br	2ebc <__alt_data_end+0xfffe2ebc>
    34d8:	00800434 	movhi	r2,16
    34dc:	10bfffc4 	addi	r2,r2,-1
    34e0:	88a2703a 	and	r17,r17,r2
    34e4:	883e851e 	bne	r17,zero,2efc <__alt_data_end+0xfffe2efc>
    34e8:	00800074 	movhi	r2,1
    34ec:	10bd5704 	addi	r2,r2,-2724
    34f0:	003e8406 	br	2f04 <__alt_data_end+0xfffe2f04>
    34f4:	10c00204 	addi	r3,r2,8
    34f8:	003e8706 	br	2f18 <__alt_data_end+0xfffe2f18>
    34fc:	01400434 	movhi	r5,16
    3500:	297fffc4 	addi	r5,r5,-1
    3504:	994a703a 	and	r5,r19,r5
    3508:	9009883a 	mov	r4,r18
    350c:	843f0044 	addi	r16,r16,-1023
    3510:	294ffc34 	orhi	r5,r5,16368
    3514:	dd800217 	ldw	r22,8(sp)
    3518:	d8001115 	stw	zero,68(sp)
    351c:	003ea506 	br	2fb4 <__alt_data_end+0xfffe2fb4>
    3520:	00800074 	movhi	r2,1
    3524:	10bd4e04 	addi	r2,r2,-2760
    3528:	003e6406 	br	2ebc <__alt_data_end+0xfffe2ebc>
    352c:	e0001115 	stw	zero,68(fp)
    3530:	000b883a 	mov	r5,zero
    3534:	e009883a 	mov	r4,fp
    3538:	00064980 	call	6498 <_Balloc>
    353c:	01bfffc4 	movi	r6,-1
    3540:	01c00044 	movi	r7,1
    3544:	d8800715 	stw	r2,28(sp)
    3548:	d9800c15 	stw	r6,48(sp)
    354c:	e0801015 	stw	r2,64(fp)
    3550:	d8000315 	stw	zero,12(sp)
    3554:	d9c00b15 	stw	r7,44(sp)
    3558:	d9800615 	stw	r6,24(sp)
    355c:	d8002215 	stw	zero,136(sp)
    3560:	d8800117 	ldw	r2,4(sp)
    3564:	10008916 	blt	r2,zero,378c <_dtoa_r+0x990>
    3568:	d9000517 	ldw	r4,20(sp)
    356c:	00c00384 	movi	r3,14
    3570:	19008616 	blt	r3,r4,378c <_dtoa_r+0x990>
    3574:	200490fa 	slli	r2,r4,3
    3578:	00c00074 	movhi	r3,1
    357c:	d9802217 	ldw	r6,136(sp)
    3580:	18fd7604 	addi	r3,r3,-2600
    3584:	1885883a 	add	r2,r3,r2
    3588:	14000017 	ldw	r16,0(r2)
    358c:	14400117 	ldw	r17,4(r2)
    3590:	30016316 	blt	r6,zero,3b20 <_dtoa_r+0xd24>
    3594:	800d883a 	mov	r6,r16
    3598:	880f883a 	mov	r7,r17
    359c:	9009883a 	mov	r4,r18
    35a0:	980b883a 	mov	r5,r19
    35a4:	000afb00 	call	afb0 <__divdf3>
    35a8:	180b883a 	mov	r5,r3
    35ac:	1009883a 	mov	r4,r2
    35b0:	000cb040 	call	cb04 <__fixdfsi>
    35b4:	1009883a 	mov	r4,r2
    35b8:	102b883a 	mov	r21,r2
    35bc:	000cb840 	call	cb84 <__floatsidf>
    35c0:	800d883a 	mov	r6,r16
    35c4:	880f883a 	mov	r7,r17
    35c8:	1009883a 	mov	r4,r2
    35cc:	180b883a 	mov	r5,r3
    35d0:	000baf00 	call	baf0 <__muldf3>
    35d4:	100d883a 	mov	r6,r2
    35d8:	180f883a 	mov	r7,r3
    35dc:	9009883a 	mov	r4,r18
    35e0:	980b883a 	mov	r5,r19
    35e4:	000c2080 	call	c208 <__subdf3>
    35e8:	d9c00717 	ldw	r7,28(sp)
    35ec:	1009883a 	mov	r4,r2
    35f0:	a8800c04 	addi	r2,r21,48
    35f4:	38800005 	stb	r2,0(r7)
    35f8:	3dc00044 	addi	r23,r7,1
    35fc:	d9c00617 	ldw	r7,24(sp)
    3600:	01800044 	movi	r6,1
    3604:	180b883a 	mov	r5,r3
    3608:	2005883a 	mov	r2,r4
    360c:	39803826 	beq	r7,r6,36f0 <_dtoa_r+0x8f4>
    3610:	000d883a 	mov	r6,zero
    3614:	01d00934 	movhi	r7,16420
    3618:	000baf00 	call	baf0 <__muldf3>
    361c:	000d883a 	mov	r6,zero
    3620:	000f883a 	mov	r7,zero
    3624:	1009883a 	mov	r4,r2
    3628:	180b883a 	mov	r5,r3
    362c:	1025883a 	mov	r18,r2
    3630:	1827883a 	mov	r19,r3
    3634:	000b8980 	call	b898 <__eqdf2>
    3638:	103f9a26 	beq	r2,zero,34a4 <__alt_data_end+0xfffe34a4>
    363c:	d9c00617 	ldw	r7,24(sp)
    3640:	d8c00717 	ldw	r3,28(sp)
    3644:	b829883a 	mov	r20,r23
    3648:	38bfffc4 	addi	r2,r7,-1
    364c:	18ad883a 	add	r22,r3,r2
    3650:	00000a06 	br	367c <_dtoa_r+0x880>
    3654:	000baf00 	call	baf0 <__muldf3>
    3658:	000d883a 	mov	r6,zero
    365c:	000f883a 	mov	r7,zero
    3660:	1009883a 	mov	r4,r2
    3664:	180b883a 	mov	r5,r3
    3668:	1025883a 	mov	r18,r2
    366c:	1827883a 	mov	r19,r3
    3670:	b829883a 	mov	r20,r23
    3674:	000b8980 	call	b898 <__eqdf2>
    3678:	103f8a26 	beq	r2,zero,34a4 <__alt_data_end+0xfffe34a4>
    367c:	800d883a 	mov	r6,r16
    3680:	880f883a 	mov	r7,r17
    3684:	9009883a 	mov	r4,r18
    3688:	980b883a 	mov	r5,r19
    368c:	000afb00 	call	afb0 <__divdf3>
    3690:	180b883a 	mov	r5,r3
    3694:	1009883a 	mov	r4,r2
    3698:	000cb040 	call	cb04 <__fixdfsi>
    369c:	1009883a 	mov	r4,r2
    36a0:	102b883a 	mov	r21,r2
    36a4:	000cb840 	call	cb84 <__floatsidf>
    36a8:	800d883a 	mov	r6,r16
    36ac:	880f883a 	mov	r7,r17
    36b0:	1009883a 	mov	r4,r2
    36b4:	180b883a 	mov	r5,r3
    36b8:	000baf00 	call	baf0 <__muldf3>
    36bc:	100d883a 	mov	r6,r2
    36c0:	180f883a 	mov	r7,r3
    36c4:	9009883a 	mov	r4,r18
    36c8:	980b883a 	mov	r5,r19
    36cc:	000c2080 	call	c208 <__subdf3>
    36d0:	aa000c04 	addi	r8,r21,48
    36d4:	a2000005 	stb	r8,0(r20)
    36d8:	000d883a 	mov	r6,zero
    36dc:	01d00934 	movhi	r7,16420
    36e0:	1009883a 	mov	r4,r2
    36e4:	180b883a 	mov	r5,r3
    36e8:	a5c00044 	addi	r23,r20,1
    36ec:	b53fd91e 	bne	r22,r20,3654 <__alt_data_end+0xfffe3654>
    36f0:	100d883a 	mov	r6,r2
    36f4:	180f883a 	mov	r7,r3
    36f8:	1009883a 	mov	r4,r2
    36fc:	180b883a 	mov	r5,r3
    3700:	000a7040 	call	a704 <__adddf3>
    3704:	100d883a 	mov	r6,r2
    3708:	180f883a 	mov	r7,r3
    370c:	8009883a 	mov	r4,r16
    3710:	880b883a 	mov	r5,r17
    3714:	1027883a 	mov	r19,r2
    3718:	1825883a 	mov	r18,r3
    371c:	000b9fc0 	call	b9fc <__ledf2>
    3720:	10000816 	blt	r2,zero,3744 <_dtoa_r+0x948>
    3724:	980d883a 	mov	r6,r19
    3728:	900f883a 	mov	r7,r18
    372c:	8009883a 	mov	r4,r16
    3730:	880b883a 	mov	r5,r17
    3734:	000b8980 	call	b898 <__eqdf2>
    3738:	103f5a1e 	bne	r2,zero,34a4 <__alt_data_end+0xfffe34a4>
    373c:	ad40004c 	andi	r21,r21,1
    3740:	a83f5826 	beq	r21,zero,34a4 <__alt_data_end+0xfffe34a4>
    3744:	bd3fffc3 	ldbu	r20,-1(r23)
    3748:	b8bfffc4 	addi	r2,r23,-1
    374c:	1007883a 	mov	r3,r2
    3750:	01400e44 	movi	r5,57
    3754:	d9800717 	ldw	r6,28(sp)
    3758:	00000506 	br	3770 <_dtoa_r+0x974>
    375c:	18ffffc4 	addi	r3,r3,-1
    3760:	11824726 	beq	r2,r6,4080 <_dtoa_r+0x1284>
    3764:	1d000003 	ldbu	r20,0(r3)
    3768:	102f883a 	mov	r23,r2
    376c:	10bfffc4 	addi	r2,r2,-1
    3770:	a1003fcc 	andi	r4,r20,255
    3774:	2100201c 	xori	r4,r4,128
    3778:	213fe004 	addi	r4,r4,-128
    377c:	217ff726 	beq	r4,r5,375c <__alt_data_end+0xfffe375c>
    3780:	a2000044 	addi	r8,r20,1
    3784:	12000005 	stb	r8,0(r2)
    3788:	003f4606 	br	34a4 <__alt_data_end+0xfffe34a4>
    378c:	d9000b17 	ldw	r4,44(sp)
    3790:	2000c826 	beq	r4,zero,3ab4 <_dtoa_r+0xcb8>
    3794:	d9800317 	ldw	r6,12(sp)
    3798:	00c00044 	movi	r3,1
    379c:	1980f90e 	bge	r3,r6,3b84 <_dtoa_r+0xd88>
    37a0:	d8800617 	ldw	r2,24(sp)
    37a4:	d8c00a17 	ldw	r3,40(sp)
    37a8:	157fffc4 	addi	r21,r2,-1
    37ac:	1d41f316 	blt	r3,r21,3f7c <_dtoa_r+0x1180>
    37b0:	1d6bc83a 	sub	r21,r3,r21
    37b4:	d9c00617 	ldw	r7,24(sp)
    37b8:	3802aa16 	blt	r7,zero,4264 <_dtoa_r+0x1468>
    37bc:	dd000817 	ldw	r20,32(sp)
    37c0:	d8800617 	ldw	r2,24(sp)
    37c4:	d8c00817 	ldw	r3,32(sp)
    37c8:	01400044 	movi	r5,1
    37cc:	e009883a 	mov	r4,fp
    37d0:	1887883a 	add	r3,r3,r2
    37d4:	d8c00815 	stw	r3,32(sp)
    37d8:	b0ad883a 	add	r22,r22,r2
    37dc:	00068a40 	call	68a4 <__i2b>
    37e0:	1023883a 	mov	r17,r2
    37e4:	a0000826 	beq	r20,zero,3808 <_dtoa_r+0xa0c>
    37e8:	0580070e 	bge	zero,r22,3808 <_dtoa_r+0xa0c>
    37ec:	a005883a 	mov	r2,r20
    37f0:	b500b916 	blt	r22,r20,3ad8 <_dtoa_r+0xcdc>
    37f4:	d9000817 	ldw	r4,32(sp)
    37f8:	a0a9c83a 	sub	r20,r20,r2
    37fc:	b0adc83a 	sub	r22,r22,r2
    3800:	2089c83a 	sub	r4,r4,r2
    3804:	d9000815 	stw	r4,32(sp)
    3808:	d9800a17 	ldw	r6,40(sp)
    380c:	0181810e 	bge	zero,r6,3e14 <_dtoa_r+0x1018>
    3810:	d9c00b17 	ldw	r7,44(sp)
    3814:	3800b326 	beq	r7,zero,3ae4 <_dtoa_r+0xce8>
    3818:	a800b226 	beq	r21,zero,3ae4 <_dtoa_r+0xce8>
    381c:	880b883a 	mov	r5,r17
    3820:	a80d883a 	mov	r6,r21
    3824:	e009883a 	mov	r4,fp
    3828:	0006ad80 	call	6ad8 <__pow5mult>
    382c:	d9800917 	ldw	r6,36(sp)
    3830:	100b883a 	mov	r5,r2
    3834:	e009883a 	mov	r4,fp
    3838:	1023883a 	mov	r17,r2
    383c:	00068e00 	call	68e0 <__multiply>
    3840:	1021883a 	mov	r16,r2
    3844:	d8800a17 	ldw	r2,40(sp)
    3848:	d9400917 	ldw	r5,36(sp)
    384c:	e009883a 	mov	r4,fp
    3850:	1545c83a 	sub	r2,r2,r21
    3854:	d8800a15 	stw	r2,40(sp)
    3858:	00065400 	call	6540 <_Bfree>
    385c:	d8c00a17 	ldw	r3,40(sp)
    3860:	18009f1e 	bne	r3,zero,3ae0 <_dtoa_r+0xce4>
    3864:	05c00044 	movi	r23,1
    3868:	e009883a 	mov	r4,fp
    386c:	b80b883a 	mov	r5,r23
    3870:	00068a40 	call	68a4 <__i2b>
    3874:	d9000d17 	ldw	r4,52(sp)
    3878:	102b883a 	mov	r21,r2
    387c:	2000ce26 	beq	r4,zero,3bb8 <_dtoa_r+0xdbc>
    3880:	200d883a 	mov	r6,r4
    3884:	100b883a 	mov	r5,r2
    3888:	e009883a 	mov	r4,fp
    388c:	0006ad80 	call	6ad8 <__pow5mult>
    3890:	d9800317 	ldw	r6,12(sp)
    3894:	102b883a 	mov	r21,r2
    3898:	b981810e 	bge	r23,r6,3ea0 <_dtoa_r+0x10a4>
    389c:	0027883a 	mov	r19,zero
    38a0:	a8800417 	ldw	r2,16(r21)
    38a4:	05c00804 	movi	r23,32
    38a8:	10800104 	addi	r2,r2,4
    38ac:	1085883a 	add	r2,r2,r2
    38b0:	1085883a 	add	r2,r2,r2
    38b4:	a885883a 	add	r2,r21,r2
    38b8:	11000017 	ldw	r4,0(r2)
    38bc:	000678c0 	call	678c <__hi0bits>
    38c0:	b885c83a 	sub	r2,r23,r2
    38c4:	1585883a 	add	r2,r2,r22
    38c8:	108007cc 	andi	r2,r2,31
    38cc:	1000b326 	beq	r2,zero,3b9c <_dtoa_r+0xda0>
    38d0:	00c00804 	movi	r3,32
    38d4:	1887c83a 	sub	r3,r3,r2
    38d8:	01000104 	movi	r4,4
    38dc:	20c2cd0e 	bge	r4,r3,4414 <_dtoa_r+0x1618>
    38e0:	00c00704 	movi	r3,28
    38e4:	1885c83a 	sub	r2,r3,r2
    38e8:	d8c00817 	ldw	r3,32(sp)
    38ec:	a0a9883a 	add	r20,r20,r2
    38f0:	b0ad883a 	add	r22,r22,r2
    38f4:	1887883a 	add	r3,r3,r2
    38f8:	d8c00815 	stw	r3,32(sp)
    38fc:	d9800817 	ldw	r6,32(sp)
    3900:	0180040e 	bge	zero,r6,3914 <_dtoa_r+0xb18>
    3904:	800b883a 	mov	r5,r16
    3908:	e009883a 	mov	r4,fp
    390c:	0006c180 	call	6c18 <__lshift>
    3910:	1021883a 	mov	r16,r2
    3914:	0580050e 	bge	zero,r22,392c <_dtoa_r+0xb30>
    3918:	a80b883a 	mov	r5,r21
    391c:	b00d883a 	mov	r6,r22
    3920:	e009883a 	mov	r4,fp
    3924:	0006c180 	call	6c18 <__lshift>
    3928:	102b883a 	mov	r21,r2
    392c:	d9c00e17 	ldw	r7,56(sp)
    3930:	3801211e 	bne	r7,zero,3db8 <_dtoa_r+0xfbc>
    3934:	d9800617 	ldw	r6,24(sp)
    3938:	0181380e 	bge	zero,r6,3e1c <_dtoa_r+0x1020>
    393c:	d8c00b17 	ldw	r3,44(sp)
    3940:	1800ab1e 	bne	r3,zero,3bf0 <_dtoa_r+0xdf4>
    3944:	dc800717 	ldw	r18,28(sp)
    3948:	dcc00617 	ldw	r19,24(sp)
    394c:	9029883a 	mov	r20,r18
    3950:	00000206 	br	395c <_dtoa_r+0xb60>
    3954:	00065680 	call	6568 <__multadd>
    3958:	1021883a 	mov	r16,r2
    395c:	a80b883a 	mov	r5,r21
    3960:	8009883a 	mov	r4,r16
    3964:	0002bfc0 	call	2bfc <quorem>
    3968:	10800c04 	addi	r2,r2,48
    396c:	90800005 	stb	r2,0(r18)
    3970:	94800044 	addi	r18,r18,1
    3974:	9507c83a 	sub	r3,r18,r20
    3978:	000f883a 	mov	r7,zero
    397c:	01800284 	movi	r6,10
    3980:	800b883a 	mov	r5,r16
    3984:	e009883a 	mov	r4,fp
    3988:	1cfff216 	blt	r3,r19,3954 <__alt_data_end+0xfffe3954>
    398c:	1011883a 	mov	r8,r2
    3990:	d8800617 	ldw	r2,24(sp)
    3994:	0082370e 	bge	zero,r2,4274 <_dtoa_r+0x1478>
    3998:	d9000717 	ldw	r4,28(sp)
    399c:	0025883a 	mov	r18,zero
    39a0:	20af883a 	add	r23,r4,r2
    39a4:	01800044 	movi	r6,1
    39a8:	800b883a 	mov	r5,r16
    39ac:	e009883a 	mov	r4,fp
    39b0:	da001715 	stw	r8,92(sp)
    39b4:	0006c180 	call	6c18 <__lshift>
    39b8:	a80b883a 	mov	r5,r21
    39bc:	1009883a 	mov	r4,r2
    39c0:	d8800915 	stw	r2,36(sp)
    39c4:	0006d600 	call	6d60 <__mcmp>
    39c8:	da001717 	ldw	r8,92(sp)
    39cc:	0081800e 	bge	zero,r2,3fd0 <_dtoa_r+0x11d4>
    39d0:	b93fffc3 	ldbu	r4,-1(r23)
    39d4:	b8bfffc4 	addi	r2,r23,-1
    39d8:	1007883a 	mov	r3,r2
    39dc:	01800e44 	movi	r6,57
    39e0:	d9c00717 	ldw	r7,28(sp)
    39e4:	00000506 	br	39fc <_dtoa_r+0xc00>
    39e8:	18ffffc4 	addi	r3,r3,-1
    39ec:	11c12326 	beq	r2,r7,3e7c <_dtoa_r+0x1080>
    39f0:	19000003 	ldbu	r4,0(r3)
    39f4:	102f883a 	mov	r23,r2
    39f8:	10bfffc4 	addi	r2,r2,-1
    39fc:	21403fcc 	andi	r5,r4,255
    3a00:	2940201c 	xori	r5,r5,128
    3a04:	297fe004 	addi	r5,r5,-128
    3a08:	29bff726 	beq	r5,r6,39e8 <__alt_data_end+0xfffe39e8>
    3a0c:	21000044 	addi	r4,r4,1
    3a10:	11000005 	stb	r4,0(r2)
    3a14:	a80b883a 	mov	r5,r21
    3a18:	e009883a 	mov	r4,fp
    3a1c:	00065400 	call	6540 <_Bfree>
    3a20:	883ea026 	beq	r17,zero,34a4 <__alt_data_end+0xfffe34a4>
    3a24:	90000426 	beq	r18,zero,3a38 <_dtoa_r+0xc3c>
    3a28:	94400326 	beq	r18,r17,3a38 <_dtoa_r+0xc3c>
    3a2c:	900b883a 	mov	r5,r18
    3a30:	e009883a 	mov	r4,fp
    3a34:	00065400 	call	6540 <_Bfree>
    3a38:	880b883a 	mov	r5,r17
    3a3c:	e009883a 	mov	r4,fp
    3a40:	00065400 	call	6540 <_Bfree>
    3a44:	003e9706 	br	34a4 <__alt_data_end+0xfffe34a4>
    3a48:	01800044 	movi	r6,1
    3a4c:	d9800e15 	stw	r6,56(sp)
    3a50:	003d9606 	br	30ac <__alt_data_end+0xfffe30ac>
    3a54:	d8800817 	ldw	r2,32(sp)
    3a58:	d8c00517 	ldw	r3,20(sp)
    3a5c:	d8000d15 	stw	zero,52(sp)
    3a60:	10c5c83a 	sub	r2,r2,r3
    3a64:	00c9c83a 	sub	r4,zero,r3
    3a68:	d8800815 	stw	r2,32(sp)
    3a6c:	d9000a15 	stw	r4,40(sp)
    3a70:	003d9706 	br	30d0 <__alt_data_end+0xfffe30d0>
    3a74:	05adc83a 	sub	r22,zero,r22
    3a78:	dd800815 	stw	r22,32(sp)
    3a7c:	002d883a 	mov	r22,zero
    3a80:	003d8e06 	br	30bc <__alt_data_end+0xfffe30bc>
    3a84:	d9000517 	ldw	r4,20(sp)
    3a88:	000cb840 	call	cb84 <__floatsidf>
    3a8c:	100d883a 	mov	r6,r2
    3a90:	180f883a 	mov	r7,r3
    3a94:	a009883a 	mov	r4,r20
    3a98:	880b883a 	mov	r5,r17
    3a9c:	000b8980 	call	b898 <__eqdf2>
    3aa0:	103d7126 	beq	r2,zero,3068 <__alt_data_end+0xfffe3068>
    3aa4:	d9c00517 	ldw	r7,20(sp)
    3aa8:	39ffffc4 	addi	r7,r7,-1
    3aac:	d9c00515 	stw	r7,20(sp)
    3ab0:	003d6d06 	br	3068 <__alt_data_end+0xfffe3068>
    3ab4:	dd400a17 	ldw	r21,40(sp)
    3ab8:	dd000817 	ldw	r20,32(sp)
    3abc:	0023883a 	mov	r17,zero
    3ac0:	003f4806 	br	37e4 <__alt_data_end+0xfffe37e4>
    3ac4:	10e3c83a 	sub	r17,r2,r3
    3ac8:	9448983a 	sll	r4,r18,r17
    3acc:	003d3206 	br	2f98 <__alt_data_end+0xfffe2f98>
    3ad0:	d8000e15 	stw	zero,56(sp)
    3ad4:	003d7506 	br	30ac <__alt_data_end+0xfffe30ac>
    3ad8:	b005883a 	mov	r2,r22
    3adc:	003f4506 	br	37f4 <__alt_data_end+0xfffe37f4>
    3ae0:	dc000915 	stw	r16,36(sp)
    3ae4:	d9800a17 	ldw	r6,40(sp)
    3ae8:	d9400917 	ldw	r5,36(sp)
    3aec:	e009883a 	mov	r4,fp
    3af0:	0006ad80 	call	6ad8 <__pow5mult>
    3af4:	1021883a 	mov	r16,r2
    3af8:	003f5a06 	br	3864 <__alt_data_end+0xfffe3864>
    3afc:	01c00044 	movi	r7,1
    3b00:	d9c00b15 	stw	r7,44(sp)
    3b04:	d8802217 	ldw	r2,136(sp)
    3b08:	0081280e 	bge	zero,r2,3fac <_dtoa_r+0x11b0>
    3b0c:	100d883a 	mov	r6,r2
    3b10:	1021883a 	mov	r16,r2
    3b14:	d8800c15 	stw	r2,48(sp)
    3b18:	d8800615 	stw	r2,24(sp)
    3b1c:	003d8806 	br	3140 <__alt_data_end+0xfffe3140>
    3b20:	d8800617 	ldw	r2,24(sp)
    3b24:	00be9b16 	blt	zero,r2,3594 <__alt_data_end+0xfffe3594>
    3b28:	10010f1e 	bne	r2,zero,3f68 <_dtoa_r+0x116c>
    3b2c:	880b883a 	mov	r5,r17
    3b30:	000d883a 	mov	r6,zero
    3b34:	01d00534 	movhi	r7,16404
    3b38:	8009883a 	mov	r4,r16
    3b3c:	000baf00 	call	baf0 <__muldf3>
    3b40:	900d883a 	mov	r6,r18
    3b44:	980f883a 	mov	r7,r19
    3b48:	1009883a 	mov	r4,r2
    3b4c:	180b883a 	mov	r5,r3
    3b50:	000b9200 	call	b920 <__gedf2>
    3b54:	002b883a 	mov	r21,zero
    3b58:	0023883a 	mov	r17,zero
    3b5c:	1000bf16 	blt	r2,zero,3e5c <_dtoa_r+0x1060>
    3b60:	d9802217 	ldw	r6,136(sp)
    3b64:	ddc00717 	ldw	r23,28(sp)
    3b68:	018c303a 	nor	r6,zero,r6
    3b6c:	d9800515 	stw	r6,20(sp)
    3b70:	a80b883a 	mov	r5,r21
    3b74:	e009883a 	mov	r4,fp
    3b78:	00065400 	call	6540 <_Bfree>
    3b7c:	883e4926 	beq	r17,zero,34a4 <__alt_data_end+0xfffe34a4>
    3b80:	003fad06 	br	3a38 <__alt_data_end+0xfffe3a38>
    3b84:	d9c01117 	ldw	r7,68(sp)
    3b88:	3801bc26 	beq	r7,zero,427c <_dtoa_r+0x1480>
    3b8c:	10810cc4 	addi	r2,r2,1075
    3b90:	dd400a17 	ldw	r21,40(sp)
    3b94:	dd000817 	ldw	r20,32(sp)
    3b98:	003f0a06 	br	37c4 <__alt_data_end+0xfffe37c4>
    3b9c:	00800704 	movi	r2,28
    3ba0:	d9000817 	ldw	r4,32(sp)
    3ba4:	a0a9883a 	add	r20,r20,r2
    3ba8:	b0ad883a 	add	r22,r22,r2
    3bac:	2089883a 	add	r4,r4,r2
    3bb0:	d9000815 	stw	r4,32(sp)
    3bb4:	003f5106 	br	38fc <__alt_data_end+0xfffe38fc>
    3bb8:	d8c00317 	ldw	r3,12(sp)
    3bbc:	b8c1fc0e 	bge	r23,r3,43b0 <_dtoa_r+0x15b4>
    3bc0:	0027883a 	mov	r19,zero
    3bc4:	b805883a 	mov	r2,r23
    3bc8:	003f3e06 	br	38c4 <__alt_data_end+0xfffe38c4>
    3bcc:	880b883a 	mov	r5,r17
    3bd0:	e009883a 	mov	r4,fp
    3bd4:	000f883a 	mov	r7,zero
    3bd8:	01800284 	movi	r6,10
    3bdc:	00065680 	call	6568 <__multadd>
    3be0:	d9000c17 	ldw	r4,48(sp)
    3be4:	1023883a 	mov	r17,r2
    3be8:	0102040e 	bge	zero,r4,43fc <_dtoa_r+0x1600>
    3bec:	d9000615 	stw	r4,24(sp)
    3bf0:	0500050e 	bge	zero,r20,3c08 <_dtoa_r+0xe0c>
    3bf4:	880b883a 	mov	r5,r17
    3bf8:	a00d883a 	mov	r6,r20
    3bfc:	e009883a 	mov	r4,fp
    3c00:	0006c180 	call	6c18 <__lshift>
    3c04:	1023883a 	mov	r17,r2
    3c08:	9801241e 	bne	r19,zero,409c <_dtoa_r+0x12a0>
    3c0c:	8829883a 	mov	r20,r17
    3c10:	d9000617 	ldw	r4,24(sp)
    3c14:	dcc00717 	ldw	r19,28(sp)
    3c18:	9480004c 	andi	r18,r18,1
    3c1c:	20bfffc4 	addi	r2,r4,-1
    3c20:	9885883a 	add	r2,r19,r2
    3c24:	d8800415 	stw	r2,16(sp)
    3c28:	dc800615 	stw	r18,24(sp)
    3c2c:	a80b883a 	mov	r5,r21
    3c30:	8009883a 	mov	r4,r16
    3c34:	0002bfc0 	call	2bfc <quorem>
    3c38:	880b883a 	mov	r5,r17
    3c3c:	8009883a 	mov	r4,r16
    3c40:	102f883a 	mov	r23,r2
    3c44:	0006d600 	call	6d60 <__mcmp>
    3c48:	a80b883a 	mov	r5,r21
    3c4c:	a00d883a 	mov	r6,r20
    3c50:	e009883a 	mov	r4,fp
    3c54:	102d883a 	mov	r22,r2
    3c58:	0006dc00 	call	6dc0 <__mdiff>
    3c5c:	1007883a 	mov	r3,r2
    3c60:	10800317 	ldw	r2,12(r2)
    3c64:	bc800c04 	addi	r18,r23,48
    3c68:	180b883a 	mov	r5,r3
    3c6c:	10004e1e 	bne	r2,zero,3da8 <_dtoa_r+0xfac>
    3c70:	8009883a 	mov	r4,r16
    3c74:	d8c01615 	stw	r3,88(sp)
    3c78:	0006d600 	call	6d60 <__mcmp>
    3c7c:	d8c01617 	ldw	r3,88(sp)
    3c80:	e009883a 	mov	r4,fp
    3c84:	d8801615 	stw	r2,88(sp)
    3c88:	180b883a 	mov	r5,r3
    3c8c:	00065400 	call	6540 <_Bfree>
    3c90:	d8801617 	ldw	r2,88(sp)
    3c94:	1000041e 	bne	r2,zero,3ca8 <_dtoa_r+0xeac>
    3c98:	d9800317 	ldw	r6,12(sp)
    3c9c:	3000021e 	bne	r6,zero,3ca8 <_dtoa_r+0xeac>
    3ca0:	d8c00617 	ldw	r3,24(sp)
    3ca4:	18003726 	beq	r3,zero,3d84 <_dtoa_r+0xf88>
    3ca8:	b0002016 	blt	r22,zero,3d2c <_dtoa_r+0xf30>
    3cac:	b000041e 	bne	r22,zero,3cc0 <_dtoa_r+0xec4>
    3cb0:	d9000317 	ldw	r4,12(sp)
    3cb4:	2000021e 	bne	r4,zero,3cc0 <_dtoa_r+0xec4>
    3cb8:	d8c00617 	ldw	r3,24(sp)
    3cbc:	18001b26 	beq	r3,zero,3d2c <_dtoa_r+0xf30>
    3cc0:	00810716 	blt	zero,r2,40e0 <_dtoa_r+0x12e4>
    3cc4:	d8c00417 	ldw	r3,16(sp)
    3cc8:	9d800044 	addi	r22,r19,1
    3ccc:	9c800005 	stb	r18,0(r19)
    3cd0:	b02f883a 	mov	r23,r22
    3cd4:	98c10626 	beq	r19,r3,40f0 <_dtoa_r+0x12f4>
    3cd8:	800b883a 	mov	r5,r16
    3cdc:	000f883a 	mov	r7,zero
    3ce0:	01800284 	movi	r6,10
    3ce4:	e009883a 	mov	r4,fp
    3ce8:	00065680 	call	6568 <__multadd>
    3cec:	1021883a 	mov	r16,r2
    3cf0:	000f883a 	mov	r7,zero
    3cf4:	01800284 	movi	r6,10
    3cf8:	880b883a 	mov	r5,r17
    3cfc:	e009883a 	mov	r4,fp
    3d00:	8d002526 	beq	r17,r20,3d98 <_dtoa_r+0xf9c>
    3d04:	00065680 	call	6568 <__multadd>
    3d08:	a00b883a 	mov	r5,r20
    3d0c:	000f883a 	mov	r7,zero
    3d10:	01800284 	movi	r6,10
    3d14:	e009883a 	mov	r4,fp
    3d18:	1023883a 	mov	r17,r2
    3d1c:	00065680 	call	6568 <__multadd>
    3d20:	1029883a 	mov	r20,r2
    3d24:	b027883a 	mov	r19,r22
    3d28:	003fc006 	br	3c2c <__alt_data_end+0xfffe3c2c>
    3d2c:	9011883a 	mov	r8,r18
    3d30:	00800e0e 	bge	zero,r2,3d6c <_dtoa_r+0xf70>
    3d34:	800b883a 	mov	r5,r16
    3d38:	01800044 	movi	r6,1
    3d3c:	e009883a 	mov	r4,fp
    3d40:	da001715 	stw	r8,92(sp)
    3d44:	0006c180 	call	6c18 <__lshift>
    3d48:	a80b883a 	mov	r5,r21
    3d4c:	1009883a 	mov	r4,r2
    3d50:	1021883a 	mov	r16,r2
    3d54:	0006d600 	call	6d60 <__mcmp>
    3d58:	da001717 	ldw	r8,92(sp)
    3d5c:	0081960e 	bge	zero,r2,43b8 <_dtoa_r+0x15bc>
    3d60:	00800e44 	movi	r2,57
    3d64:	40817026 	beq	r8,r2,4328 <_dtoa_r+0x152c>
    3d68:	ba000c44 	addi	r8,r23,49
    3d6c:	8825883a 	mov	r18,r17
    3d70:	9dc00044 	addi	r23,r19,1
    3d74:	9a000005 	stb	r8,0(r19)
    3d78:	a023883a 	mov	r17,r20
    3d7c:	dc000915 	stw	r16,36(sp)
    3d80:	003f2406 	br	3a14 <__alt_data_end+0xfffe3a14>
    3d84:	00800e44 	movi	r2,57
    3d88:	9011883a 	mov	r8,r18
    3d8c:	90816626 	beq	r18,r2,4328 <_dtoa_r+0x152c>
    3d90:	05bff516 	blt	zero,r22,3d68 <__alt_data_end+0xfffe3d68>
    3d94:	003ff506 	br	3d6c <__alt_data_end+0xfffe3d6c>
    3d98:	00065680 	call	6568 <__multadd>
    3d9c:	1023883a 	mov	r17,r2
    3da0:	1029883a 	mov	r20,r2
    3da4:	003fdf06 	br	3d24 <__alt_data_end+0xfffe3d24>
    3da8:	e009883a 	mov	r4,fp
    3dac:	00065400 	call	6540 <_Bfree>
    3db0:	00800044 	movi	r2,1
    3db4:	003fbc06 	br	3ca8 <__alt_data_end+0xfffe3ca8>
    3db8:	a80b883a 	mov	r5,r21
    3dbc:	8009883a 	mov	r4,r16
    3dc0:	0006d600 	call	6d60 <__mcmp>
    3dc4:	103edb0e 	bge	r2,zero,3934 <__alt_data_end+0xfffe3934>
    3dc8:	800b883a 	mov	r5,r16
    3dcc:	000f883a 	mov	r7,zero
    3dd0:	01800284 	movi	r6,10
    3dd4:	e009883a 	mov	r4,fp
    3dd8:	00065680 	call	6568 <__multadd>
    3ddc:	1021883a 	mov	r16,r2
    3de0:	d8800517 	ldw	r2,20(sp)
    3de4:	d8c00b17 	ldw	r3,44(sp)
    3de8:	10bfffc4 	addi	r2,r2,-1
    3dec:	d8800515 	stw	r2,20(sp)
    3df0:	183f761e 	bne	r3,zero,3bcc <__alt_data_end+0xfffe3bcc>
    3df4:	d9000c17 	ldw	r4,48(sp)
    3df8:	0101730e 	bge	zero,r4,43c8 <_dtoa_r+0x15cc>
    3dfc:	d9000615 	stw	r4,24(sp)
    3e00:	003ed006 	br	3944 <__alt_data_end+0xfffe3944>
    3e04:	00800084 	movi	r2,2
    3e08:	3081861e 	bne	r6,r2,4424 <_dtoa_r+0x1628>
    3e0c:	d8000b15 	stw	zero,44(sp)
    3e10:	003f3c06 	br	3b04 <__alt_data_end+0xfffe3b04>
    3e14:	dc000917 	ldw	r16,36(sp)
    3e18:	003e9206 	br	3864 <__alt_data_end+0xfffe3864>
    3e1c:	d9c00317 	ldw	r7,12(sp)
    3e20:	00800084 	movi	r2,2
    3e24:	11fec50e 	bge	r2,r7,393c <__alt_data_end+0xfffe393c>
    3e28:	d9000617 	ldw	r4,24(sp)
    3e2c:	20013c1e 	bne	r4,zero,4320 <_dtoa_r+0x1524>
    3e30:	a80b883a 	mov	r5,r21
    3e34:	000f883a 	mov	r7,zero
    3e38:	01800144 	movi	r6,5
    3e3c:	e009883a 	mov	r4,fp
    3e40:	00065680 	call	6568 <__multadd>
    3e44:	100b883a 	mov	r5,r2
    3e48:	8009883a 	mov	r4,r16
    3e4c:	102b883a 	mov	r21,r2
    3e50:	0006d600 	call	6d60 <__mcmp>
    3e54:	dc000915 	stw	r16,36(sp)
    3e58:	00bf410e 	bge	zero,r2,3b60 <__alt_data_end+0xfffe3b60>
    3e5c:	d9c00717 	ldw	r7,28(sp)
    3e60:	00800c44 	movi	r2,49
    3e64:	38800005 	stb	r2,0(r7)
    3e68:	d8800517 	ldw	r2,20(sp)
    3e6c:	3dc00044 	addi	r23,r7,1
    3e70:	10800044 	addi	r2,r2,1
    3e74:	d8800515 	stw	r2,20(sp)
    3e78:	003f3d06 	br	3b70 <__alt_data_end+0xfffe3b70>
    3e7c:	d9800517 	ldw	r6,20(sp)
    3e80:	d9c00717 	ldw	r7,28(sp)
    3e84:	00800c44 	movi	r2,49
    3e88:	31800044 	addi	r6,r6,1
    3e8c:	d9800515 	stw	r6,20(sp)
    3e90:	38800005 	stb	r2,0(r7)
    3e94:	003edf06 	br	3a14 <__alt_data_end+0xfffe3a14>
    3e98:	d8000b15 	stw	zero,44(sp)
    3e9c:	003c9f06 	br	311c <__alt_data_end+0xfffe311c>
    3ea0:	903e7e1e 	bne	r18,zero,389c <__alt_data_end+0xfffe389c>
    3ea4:	00800434 	movhi	r2,16
    3ea8:	10bfffc4 	addi	r2,r2,-1
    3eac:	9884703a 	and	r2,r19,r2
    3eb0:	1000ea1e 	bne	r2,zero,425c <_dtoa_r+0x1460>
    3eb4:	9cdffc2c 	andhi	r19,r19,32752
    3eb8:	9800e826 	beq	r19,zero,425c <_dtoa_r+0x1460>
    3ebc:	d9c00817 	ldw	r7,32(sp)
    3ec0:	b5800044 	addi	r22,r22,1
    3ec4:	04c00044 	movi	r19,1
    3ec8:	39c00044 	addi	r7,r7,1
    3ecc:	d9c00815 	stw	r7,32(sp)
    3ed0:	d8800d17 	ldw	r2,52(sp)
    3ed4:	103e721e 	bne	r2,zero,38a0 <__alt_data_end+0xfffe38a0>
    3ed8:	00800044 	movi	r2,1
    3edc:	003e7906 	br	38c4 <__alt_data_end+0xfffe38c4>
    3ee0:	8009883a 	mov	r4,r16
    3ee4:	000cb840 	call	cb84 <__floatsidf>
    3ee8:	d9800f17 	ldw	r6,60(sp)
    3eec:	d9c01017 	ldw	r7,64(sp)
    3ef0:	1009883a 	mov	r4,r2
    3ef4:	180b883a 	mov	r5,r3
    3ef8:	000baf00 	call	baf0 <__muldf3>
    3efc:	000d883a 	mov	r6,zero
    3f00:	01d00734 	movhi	r7,16412
    3f04:	1009883a 	mov	r4,r2
    3f08:	180b883a 	mov	r5,r3
    3f0c:	000a7040 	call	a704 <__adddf3>
    3f10:	047f3034 	movhi	r17,64704
    3f14:	1021883a 	mov	r16,r2
    3f18:	1c63883a 	add	r17,r3,r17
    3f1c:	d9000f17 	ldw	r4,60(sp)
    3f20:	d9401017 	ldw	r5,64(sp)
    3f24:	000d883a 	mov	r6,zero
    3f28:	01d00534 	movhi	r7,16404
    3f2c:	000c2080 	call	c208 <__subdf3>
    3f30:	800d883a 	mov	r6,r16
    3f34:	880f883a 	mov	r7,r17
    3f38:	1009883a 	mov	r4,r2
    3f3c:	180b883a 	mov	r5,r3
    3f40:	102b883a 	mov	r21,r2
    3f44:	1829883a 	mov	r20,r3
    3f48:	000b9200 	call	b920 <__gedf2>
    3f4c:	00806c16 	blt	zero,r2,4100 <_dtoa_r+0x1304>
    3f50:	89e0003c 	xorhi	r7,r17,32768
    3f54:	800d883a 	mov	r6,r16
    3f58:	a809883a 	mov	r4,r21
    3f5c:	a00b883a 	mov	r5,r20
    3f60:	000b9fc0 	call	b9fc <__ledf2>
    3f64:	103d7e0e 	bge	r2,zero,3560 <__alt_data_end+0xfffe3560>
    3f68:	002b883a 	mov	r21,zero
    3f6c:	0023883a 	mov	r17,zero
    3f70:	003efb06 	br	3b60 <__alt_data_end+0xfffe3b60>
    3f74:	d8800717 	ldw	r2,28(sp)
    3f78:	003bd006 	br	2ebc <__alt_data_end+0xfffe2ebc>
    3f7c:	d9000a17 	ldw	r4,40(sp)
    3f80:	d9800d17 	ldw	r6,52(sp)
    3f84:	dd400a15 	stw	r21,40(sp)
    3f88:	a905c83a 	sub	r2,r21,r4
    3f8c:	308d883a 	add	r6,r6,r2
    3f90:	d9800d15 	stw	r6,52(sp)
    3f94:	002b883a 	mov	r21,zero
    3f98:	003e0606 	br	37b4 <__alt_data_end+0xfffe37b4>
    3f9c:	9023883a 	mov	r17,r18
    3fa0:	9829883a 	mov	r20,r19
    3fa4:	04000084 	movi	r16,2
    3fa8:	003c9206 	br	31f4 <__alt_data_end+0xfffe31f4>
    3fac:	04000044 	movi	r16,1
    3fb0:	dc000c15 	stw	r16,48(sp)
    3fb4:	dc000615 	stw	r16,24(sp)
    3fb8:	dc002215 	stw	r16,136(sp)
    3fbc:	e0001115 	stw	zero,68(fp)
    3fc0:	000b883a 	mov	r5,zero
    3fc4:	003c6906 	br	316c <__alt_data_end+0xfffe316c>
    3fc8:	3021883a 	mov	r16,r6
    3fcc:	003ffb06 	br	3fbc <__alt_data_end+0xfffe3fbc>
    3fd0:	1000021e 	bne	r2,zero,3fdc <_dtoa_r+0x11e0>
    3fd4:	4200004c 	andi	r8,r8,1
    3fd8:	403e7d1e 	bne	r8,zero,39d0 <__alt_data_end+0xfffe39d0>
    3fdc:	01000c04 	movi	r4,48
    3fe0:	00000106 	br	3fe8 <_dtoa_r+0x11ec>
    3fe4:	102f883a 	mov	r23,r2
    3fe8:	b8bfffc4 	addi	r2,r23,-1
    3fec:	10c00007 	ldb	r3,0(r2)
    3ff0:	193ffc26 	beq	r3,r4,3fe4 <__alt_data_end+0xfffe3fe4>
    3ff4:	003e8706 	br	3a14 <__alt_data_end+0xfffe3a14>
    3ff8:	d8800517 	ldw	r2,20(sp)
    3ffc:	00a3c83a 	sub	r17,zero,r2
    4000:	8800a426 	beq	r17,zero,4294 <_dtoa_r+0x1498>
    4004:	888003cc 	andi	r2,r17,15
    4008:	100490fa 	slli	r2,r2,3
    400c:	00c00074 	movhi	r3,1
    4010:	18fd7604 	addi	r3,r3,-2600
    4014:	1885883a 	add	r2,r3,r2
    4018:	11800017 	ldw	r6,0(r2)
    401c:	11c00117 	ldw	r7,4(r2)
    4020:	9009883a 	mov	r4,r18
    4024:	980b883a 	mov	r5,r19
    4028:	8823d13a 	srai	r17,r17,4
    402c:	000baf00 	call	baf0 <__muldf3>
    4030:	d8800f15 	stw	r2,60(sp)
    4034:	d8c01015 	stw	r3,64(sp)
    4038:	8800e826 	beq	r17,zero,43dc <_dtoa_r+0x15e0>
    403c:	05000074 	movhi	r20,1
    4040:	a53d6c04 	addi	r20,r20,-2640
    4044:	04000084 	movi	r16,2
    4048:	8980004c 	andi	r6,r17,1
    404c:	1009883a 	mov	r4,r2
    4050:	8823d07a 	srai	r17,r17,1
    4054:	180b883a 	mov	r5,r3
    4058:	30000426 	beq	r6,zero,406c <_dtoa_r+0x1270>
    405c:	a1800017 	ldw	r6,0(r20)
    4060:	a1c00117 	ldw	r7,4(r20)
    4064:	84000044 	addi	r16,r16,1
    4068:	000baf00 	call	baf0 <__muldf3>
    406c:	a5000204 	addi	r20,r20,8
    4070:	883ff51e 	bne	r17,zero,4048 <__alt_data_end+0xfffe4048>
    4074:	d8800f15 	stw	r2,60(sp)
    4078:	d8c01015 	stw	r3,64(sp)
    407c:	003c7606 	br	3258 <__alt_data_end+0xfffe3258>
    4080:	00c00c04 	movi	r3,48
    4084:	10c00005 	stb	r3,0(r2)
    4088:	d8c00517 	ldw	r3,20(sp)
    408c:	bd3fffc3 	ldbu	r20,-1(r23)
    4090:	18c00044 	addi	r3,r3,1
    4094:	d8c00515 	stw	r3,20(sp)
    4098:	003db906 	br	3780 <__alt_data_end+0xfffe3780>
    409c:	89400117 	ldw	r5,4(r17)
    40a0:	e009883a 	mov	r4,fp
    40a4:	00064980 	call	6498 <_Balloc>
    40a8:	89800417 	ldw	r6,16(r17)
    40ac:	89400304 	addi	r5,r17,12
    40b0:	11000304 	addi	r4,r2,12
    40b4:	31800084 	addi	r6,r6,2
    40b8:	318d883a 	add	r6,r6,r6
    40bc:	318d883a 	add	r6,r6,r6
    40c0:	1027883a 	mov	r19,r2
    40c4:	00060cc0 	call	60cc <memcpy>
    40c8:	01800044 	movi	r6,1
    40cc:	980b883a 	mov	r5,r19
    40d0:	e009883a 	mov	r4,fp
    40d4:	0006c180 	call	6c18 <__lshift>
    40d8:	1029883a 	mov	r20,r2
    40dc:	003ecc06 	br	3c10 <__alt_data_end+0xfffe3c10>
    40e0:	00800e44 	movi	r2,57
    40e4:	90809026 	beq	r18,r2,4328 <_dtoa_r+0x152c>
    40e8:	92000044 	addi	r8,r18,1
    40ec:	003f1f06 	br	3d6c <__alt_data_end+0xfffe3d6c>
    40f0:	9011883a 	mov	r8,r18
    40f4:	8825883a 	mov	r18,r17
    40f8:	a023883a 	mov	r17,r20
    40fc:	003e2906 	br	39a4 <__alt_data_end+0xfffe39a4>
    4100:	002b883a 	mov	r21,zero
    4104:	0023883a 	mov	r17,zero
    4108:	003f5406 	br	3e5c <__alt_data_end+0xfffe3e5c>
    410c:	61bfffc4 	addi	r6,r12,-1
    4110:	300490fa 	slli	r2,r6,3
    4114:	00c00074 	movhi	r3,1
    4118:	18fd7604 	addi	r3,r3,-2600
    411c:	1885883a 	add	r2,r3,r2
    4120:	11000017 	ldw	r4,0(r2)
    4124:	11400117 	ldw	r5,4(r2)
    4128:	d8800717 	ldw	r2,28(sp)
    412c:	880f883a 	mov	r7,r17
    4130:	d9801215 	stw	r6,72(sp)
    4134:	800d883a 	mov	r6,r16
    4138:	db001615 	stw	r12,88(sp)
    413c:	15c00044 	addi	r23,r2,1
    4140:	000baf00 	call	baf0 <__muldf3>
    4144:	d9401017 	ldw	r5,64(sp)
    4148:	d9000f17 	ldw	r4,60(sp)
    414c:	d8c01515 	stw	r3,84(sp)
    4150:	d8801415 	stw	r2,80(sp)
    4154:	000cb040 	call	cb04 <__fixdfsi>
    4158:	1009883a 	mov	r4,r2
    415c:	1021883a 	mov	r16,r2
    4160:	000cb840 	call	cb84 <__floatsidf>
    4164:	d9000f17 	ldw	r4,60(sp)
    4168:	d9401017 	ldw	r5,64(sp)
    416c:	100d883a 	mov	r6,r2
    4170:	180f883a 	mov	r7,r3
    4174:	000c2080 	call	c208 <__subdf3>
    4178:	1829883a 	mov	r20,r3
    417c:	d8c00717 	ldw	r3,28(sp)
    4180:	84000c04 	addi	r16,r16,48
    4184:	1023883a 	mov	r17,r2
    4188:	1c000005 	stb	r16,0(r3)
    418c:	db001617 	ldw	r12,88(sp)
    4190:	00800044 	movi	r2,1
    4194:	60802226 	beq	r12,r2,4220 <_dtoa_r+0x1424>
    4198:	d9c00717 	ldw	r7,28(sp)
    419c:	8805883a 	mov	r2,r17
    41a0:	b82b883a 	mov	r21,r23
    41a4:	3b19883a 	add	r12,r7,r12
    41a8:	6023883a 	mov	r17,r12
    41ac:	a007883a 	mov	r3,r20
    41b0:	dc800f15 	stw	r18,60(sp)
    41b4:	000d883a 	mov	r6,zero
    41b8:	01d00934 	movhi	r7,16420
    41bc:	1009883a 	mov	r4,r2
    41c0:	180b883a 	mov	r5,r3
    41c4:	000baf00 	call	baf0 <__muldf3>
    41c8:	180b883a 	mov	r5,r3
    41cc:	1009883a 	mov	r4,r2
    41d0:	1829883a 	mov	r20,r3
    41d4:	1025883a 	mov	r18,r2
    41d8:	000cb040 	call	cb04 <__fixdfsi>
    41dc:	1009883a 	mov	r4,r2
    41e0:	1021883a 	mov	r16,r2
    41e4:	000cb840 	call	cb84 <__floatsidf>
    41e8:	100d883a 	mov	r6,r2
    41ec:	180f883a 	mov	r7,r3
    41f0:	9009883a 	mov	r4,r18
    41f4:	a00b883a 	mov	r5,r20
    41f8:	84000c04 	addi	r16,r16,48
    41fc:	000c2080 	call	c208 <__subdf3>
    4200:	ad400044 	addi	r21,r21,1
    4204:	ac3fffc5 	stb	r16,-1(r21)
    4208:	ac7fea1e 	bne	r21,r17,41b4 <__alt_data_end+0xfffe41b4>
    420c:	1023883a 	mov	r17,r2
    4210:	d8801217 	ldw	r2,72(sp)
    4214:	dc800f17 	ldw	r18,60(sp)
    4218:	1829883a 	mov	r20,r3
    421c:	b8af883a 	add	r23,r23,r2
    4220:	d9001417 	ldw	r4,80(sp)
    4224:	d9401517 	ldw	r5,84(sp)
    4228:	000d883a 	mov	r6,zero
    422c:	01cff834 	movhi	r7,16352
    4230:	000a7040 	call	a704 <__adddf3>
    4234:	880d883a 	mov	r6,r17
    4238:	a00f883a 	mov	r7,r20
    423c:	1009883a 	mov	r4,r2
    4240:	180b883a 	mov	r5,r3
    4244:	000b9fc0 	call	b9fc <__ledf2>
    4248:	10003e0e 	bge	r2,zero,4344 <_dtoa_r+0x1548>
    424c:	d9001317 	ldw	r4,76(sp)
    4250:	bd3fffc3 	ldbu	r20,-1(r23)
    4254:	d9000515 	stw	r4,20(sp)
    4258:	003d3b06 	br	3748 <__alt_data_end+0xfffe3748>
    425c:	0027883a 	mov	r19,zero
    4260:	003f1b06 	br	3ed0 <__alt_data_end+0xfffe3ed0>
    4264:	d8800817 	ldw	r2,32(sp)
    4268:	11e9c83a 	sub	r20,r2,r7
    426c:	0005883a 	mov	r2,zero
    4270:	003d5406 	br	37c4 <__alt_data_end+0xfffe37c4>
    4274:	00800044 	movi	r2,1
    4278:	003dc706 	br	3998 <__alt_data_end+0xfffe3998>
    427c:	d8c00217 	ldw	r3,8(sp)
    4280:	00800d84 	movi	r2,54
    4284:	dd400a17 	ldw	r21,40(sp)
    4288:	10c5c83a 	sub	r2,r2,r3
    428c:	dd000817 	ldw	r20,32(sp)
    4290:	003d4c06 	br	37c4 <__alt_data_end+0xfffe37c4>
    4294:	dc800f15 	stw	r18,60(sp)
    4298:	dcc01015 	stw	r19,64(sp)
    429c:	04000084 	movi	r16,2
    42a0:	003bed06 	br	3258 <__alt_data_end+0xfffe3258>
    42a4:	d9000617 	ldw	r4,24(sp)
    42a8:	203f0d26 	beq	r4,zero,3ee0 <__alt_data_end+0xfffe3ee0>
    42ac:	d9800c17 	ldw	r6,48(sp)
    42b0:	01bcab0e 	bge	zero,r6,3560 <__alt_data_end+0xfffe3560>
    42b4:	d9401017 	ldw	r5,64(sp)
    42b8:	d9000f17 	ldw	r4,60(sp)
    42bc:	000d883a 	mov	r6,zero
    42c0:	01d00934 	movhi	r7,16420
    42c4:	000baf00 	call	baf0 <__muldf3>
    42c8:	81000044 	addi	r4,r16,1
    42cc:	d8800f15 	stw	r2,60(sp)
    42d0:	d8c01015 	stw	r3,64(sp)
    42d4:	000cb840 	call	cb84 <__floatsidf>
    42d8:	d9800f17 	ldw	r6,60(sp)
    42dc:	d9c01017 	ldw	r7,64(sp)
    42e0:	1009883a 	mov	r4,r2
    42e4:	180b883a 	mov	r5,r3
    42e8:	000baf00 	call	baf0 <__muldf3>
    42ec:	01d00734 	movhi	r7,16412
    42f0:	000d883a 	mov	r6,zero
    42f4:	1009883a 	mov	r4,r2
    42f8:	180b883a 	mov	r5,r3
    42fc:	000a7040 	call	a704 <__adddf3>
    4300:	d9c00517 	ldw	r7,20(sp)
    4304:	047f3034 	movhi	r17,64704
    4308:	1021883a 	mov	r16,r2
    430c:	39ffffc4 	addi	r7,r7,-1
    4310:	d9c01315 	stw	r7,76(sp)
    4314:	1c63883a 	add	r17,r3,r17
    4318:	db000c17 	ldw	r12,48(sp)
    431c:	003bea06 	br	32c8 <__alt_data_end+0xfffe32c8>
    4320:	dc000915 	stw	r16,36(sp)
    4324:	003e0e06 	br	3b60 <__alt_data_end+0xfffe3b60>
    4328:	01000e44 	movi	r4,57
    432c:	8825883a 	mov	r18,r17
    4330:	9dc00044 	addi	r23,r19,1
    4334:	99000005 	stb	r4,0(r19)
    4338:	a023883a 	mov	r17,r20
    433c:	dc000915 	stw	r16,36(sp)
    4340:	003da406 	br	39d4 <__alt_data_end+0xfffe39d4>
    4344:	d9801417 	ldw	r6,80(sp)
    4348:	d9c01517 	ldw	r7,84(sp)
    434c:	0009883a 	mov	r4,zero
    4350:	014ff834 	movhi	r5,16352
    4354:	000c2080 	call	c208 <__subdf3>
    4358:	880d883a 	mov	r6,r17
    435c:	a00f883a 	mov	r7,r20
    4360:	1009883a 	mov	r4,r2
    4364:	180b883a 	mov	r5,r3
    4368:	000b9200 	call	b920 <__gedf2>
    436c:	00bc7c0e 	bge	zero,r2,3560 <__alt_data_end+0xfffe3560>
    4370:	01000c04 	movi	r4,48
    4374:	00000106 	br	437c <_dtoa_r+0x1580>
    4378:	102f883a 	mov	r23,r2
    437c:	b8bfffc4 	addi	r2,r23,-1
    4380:	10c00007 	ldb	r3,0(r2)
    4384:	193ffc26 	beq	r3,r4,4378 <__alt_data_end+0xfffe4378>
    4388:	d9801317 	ldw	r6,76(sp)
    438c:	d9800515 	stw	r6,20(sp)
    4390:	003c4406 	br	34a4 <__alt_data_end+0xfffe34a4>
    4394:	d9801317 	ldw	r6,76(sp)
    4398:	d9800515 	stw	r6,20(sp)
    439c:	003cea06 	br	3748 <__alt_data_end+0xfffe3748>
    43a0:	dd800f17 	ldw	r22,60(sp)
    43a4:	dcc01017 	ldw	r19,64(sp)
    43a8:	dc801217 	ldw	r18,72(sp)
    43ac:	003c6c06 	br	3560 <__alt_data_end+0xfffe3560>
    43b0:	903e031e 	bne	r18,zero,3bc0 <__alt_data_end+0xfffe3bc0>
    43b4:	003ebb06 	br	3ea4 <__alt_data_end+0xfffe3ea4>
    43b8:	103e6c1e 	bne	r2,zero,3d6c <__alt_data_end+0xfffe3d6c>
    43bc:	4080004c 	andi	r2,r8,1
    43c0:	103e6a26 	beq	r2,zero,3d6c <__alt_data_end+0xfffe3d6c>
    43c4:	003e6606 	br	3d60 <__alt_data_end+0xfffe3d60>
    43c8:	d8c00317 	ldw	r3,12(sp)
    43cc:	00800084 	movi	r2,2
    43d0:	10c02916 	blt	r2,r3,4478 <_dtoa_r+0x167c>
    43d4:	d9000c17 	ldw	r4,48(sp)
    43d8:	003e8806 	br	3dfc <__alt_data_end+0xfffe3dfc>
    43dc:	04000084 	movi	r16,2
    43e0:	003b9d06 	br	3258 <__alt_data_end+0xfffe3258>
    43e4:	d9001317 	ldw	r4,76(sp)
    43e8:	d9000515 	stw	r4,20(sp)
    43ec:	003cd606 	br	3748 <__alt_data_end+0xfffe3748>
    43f0:	d8801317 	ldw	r2,76(sp)
    43f4:	d8800515 	stw	r2,20(sp)
    43f8:	003c2a06 	br	34a4 <__alt_data_end+0xfffe34a4>
    43fc:	d9800317 	ldw	r6,12(sp)
    4400:	00800084 	movi	r2,2
    4404:	11801516 	blt	r2,r6,445c <_dtoa_r+0x1660>
    4408:	d9c00c17 	ldw	r7,48(sp)
    440c:	d9c00615 	stw	r7,24(sp)
    4410:	003df706 	br	3bf0 <__alt_data_end+0xfffe3bf0>
    4414:	193d3926 	beq	r3,r4,38fc <__alt_data_end+0xfffe38fc>
    4418:	00c00f04 	movi	r3,60
    441c:	1885c83a 	sub	r2,r3,r2
    4420:	003ddf06 	br	3ba0 <__alt_data_end+0xfffe3ba0>
    4424:	e009883a 	mov	r4,fp
    4428:	e0001115 	stw	zero,68(fp)
    442c:	000b883a 	mov	r5,zero
    4430:	00064980 	call	6498 <_Balloc>
    4434:	d8800715 	stw	r2,28(sp)
    4438:	d8c00717 	ldw	r3,28(sp)
    443c:	00bfffc4 	movi	r2,-1
    4440:	01000044 	movi	r4,1
    4444:	d8800c15 	stw	r2,48(sp)
    4448:	e0c01015 	stw	r3,64(fp)
    444c:	d9000b15 	stw	r4,44(sp)
    4450:	d8800615 	stw	r2,24(sp)
    4454:	d8002215 	stw	zero,136(sp)
    4458:	003c4106 	br	3560 <__alt_data_end+0xfffe3560>
    445c:	d8c00c17 	ldw	r3,48(sp)
    4460:	d8c00615 	stw	r3,24(sp)
    4464:	003e7006 	br	3e28 <__alt_data_end+0xfffe3e28>
    4468:	04400044 	movi	r17,1
    446c:	003b2006 	br	30f0 <__alt_data_end+0xfffe30f0>
    4470:	000b883a 	mov	r5,zero
    4474:	003b3d06 	br	316c <__alt_data_end+0xfffe316c>
    4478:	d8800c17 	ldw	r2,48(sp)
    447c:	d8800615 	stw	r2,24(sp)
    4480:	003e6906 	br	3e28 <__alt_data_end+0xfffe3e28>

00004484 <__sflush_r>:
    4484:	2880030b 	ldhu	r2,12(r5)
    4488:	defffb04 	addi	sp,sp,-20
    448c:	dcc00315 	stw	r19,12(sp)
    4490:	dc400115 	stw	r17,4(sp)
    4494:	dfc00415 	stw	ra,16(sp)
    4498:	dc800215 	stw	r18,8(sp)
    449c:	dc000015 	stw	r16,0(sp)
    44a0:	10c0020c 	andi	r3,r2,8
    44a4:	2823883a 	mov	r17,r5
    44a8:	2027883a 	mov	r19,r4
    44ac:	1800311e 	bne	r3,zero,4574 <__sflush_r+0xf0>
    44b0:	28c00117 	ldw	r3,4(r5)
    44b4:	10820014 	ori	r2,r2,2048
    44b8:	2880030d 	sth	r2,12(r5)
    44bc:	00c04b0e 	bge	zero,r3,45ec <__sflush_r+0x168>
    44c0:	8a000a17 	ldw	r8,40(r17)
    44c4:	40002326 	beq	r8,zero,4554 <__sflush_r+0xd0>
    44c8:	9c000017 	ldw	r16,0(r19)
    44cc:	10c4000c 	andi	r3,r2,4096
    44d0:	98000015 	stw	zero,0(r19)
    44d4:	18004826 	beq	r3,zero,45f8 <__sflush_r+0x174>
    44d8:	89801417 	ldw	r6,80(r17)
    44dc:	10c0010c 	andi	r3,r2,4
    44e0:	18000626 	beq	r3,zero,44fc <__sflush_r+0x78>
    44e4:	88c00117 	ldw	r3,4(r17)
    44e8:	88800c17 	ldw	r2,48(r17)
    44ec:	30cdc83a 	sub	r6,r6,r3
    44f0:	10000226 	beq	r2,zero,44fc <__sflush_r+0x78>
    44f4:	88800f17 	ldw	r2,60(r17)
    44f8:	308dc83a 	sub	r6,r6,r2
    44fc:	89400717 	ldw	r5,28(r17)
    4500:	000f883a 	mov	r7,zero
    4504:	9809883a 	mov	r4,r19
    4508:	403ee83a 	callr	r8
    450c:	00ffffc4 	movi	r3,-1
    4510:	10c04426 	beq	r2,r3,4624 <__sflush_r+0x1a0>
    4514:	88c0030b 	ldhu	r3,12(r17)
    4518:	89000417 	ldw	r4,16(r17)
    451c:	88000115 	stw	zero,4(r17)
    4520:	197dffcc 	andi	r5,r3,63487
    4524:	8940030d 	sth	r5,12(r17)
    4528:	89000015 	stw	r4,0(r17)
    452c:	18c4000c 	andi	r3,r3,4096
    4530:	18002c1e 	bne	r3,zero,45e4 <__sflush_r+0x160>
    4534:	89400c17 	ldw	r5,48(r17)
    4538:	9c000015 	stw	r16,0(r19)
    453c:	28000526 	beq	r5,zero,4554 <__sflush_r+0xd0>
    4540:	88801004 	addi	r2,r17,64
    4544:	28800226 	beq	r5,r2,4550 <__sflush_r+0xcc>
    4548:	9809883a 	mov	r4,r19
    454c:	0004bf00 	call	4bf0 <_free_r>
    4550:	88000c15 	stw	zero,48(r17)
    4554:	0005883a 	mov	r2,zero
    4558:	dfc00417 	ldw	ra,16(sp)
    455c:	dcc00317 	ldw	r19,12(sp)
    4560:	dc800217 	ldw	r18,8(sp)
    4564:	dc400117 	ldw	r17,4(sp)
    4568:	dc000017 	ldw	r16,0(sp)
    456c:	dec00504 	addi	sp,sp,20
    4570:	f800283a 	ret
    4574:	2c800417 	ldw	r18,16(r5)
    4578:	903ff626 	beq	r18,zero,4554 <__alt_data_end+0xfffe4554>
    457c:	2c000017 	ldw	r16,0(r5)
    4580:	108000cc 	andi	r2,r2,3
    4584:	2c800015 	stw	r18,0(r5)
    4588:	84a1c83a 	sub	r16,r16,r18
    458c:	1000131e 	bne	r2,zero,45dc <__sflush_r+0x158>
    4590:	28800517 	ldw	r2,20(r5)
    4594:	88800215 	stw	r2,8(r17)
    4598:	04000316 	blt	zero,r16,45a8 <__sflush_r+0x124>
    459c:	003fed06 	br	4554 <__alt_data_end+0xfffe4554>
    45a0:	90a5883a 	add	r18,r18,r2
    45a4:	043feb0e 	bge	zero,r16,4554 <__alt_data_end+0xfffe4554>
    45a8:	88800917 	ldw	r2,36(r17)
    45ac:	89400717 	ldw	r5,28(r17)
    45b0:	800f883a 	mov	r7,r16
    45b4:	900d883a 	mov	r6,r18
    45b8:	9809883a 	mov	r4,r19
    45bc:	103ee83a 	callr	r2
    45c0:	80a1c83a 	sub	r16,r16,r2
    45c4:	00bff616 	blt	zero,r2,45a0 <__alt_data_end+0xfffe45a0>
    45c8:	88c0030b 	ldhu	r3,12(r17)
    45cc:	00bfffc4 	movi	r2,-1
    45d0:	18c01014 	ori	r3,r3,64
    45d4:	88c0030d 	sth	r3,12(r17)
    45d8:	003fdf06 	br	4558 <__alt_data_end+0xfffe4558>
    45dc:	0005883a 	mov	r2,zero
    45e0:	003fec06 	br	4594 <__alt_data_end+0xfffe4594>
    45e4:	88801415 	stw	r2,80(r17)
    45e8:	003fd206 	br	4534 <__alt_data_end+0xfffe4534>
    45ec:	28c00f17 	ldw	r3,60(r5)
    45f0:	00ffb316 	blt	zero,r3,44c0 <__alt_data_end+0xfffe44c0>
    45f4:	003fd706 	br	4554 <__alt_data_end+0xfffe4554>
    45f8:	89400717 	ldw	r5,28(r17)
    45fc:	000d883a 	mov	r6,zero
    4600:	01c00044 	movi	r7,1
    4604:	9809883a 	mov	r4,r19
    4608:	403ee83a 	callr	r8
    460c:	100d883a 	mov	r6,r2
    4610:	00bfffc4 	movi	r2,-1
    4614:	30801426 	beq	r6,r2,4668 <__sflush_r+0x1e4>
    4618:	8880030b 	ldhu	r2,12(r17)
    461c:	8a000a17 	ldw	r8,40(r17)
    4620:	003fae06 	br	44dc <__alt_data_end+0xfffe44dc>
    4624:	98c00017 	ldw	r3,0(r19)
    4628:	183fba26 	beq	r3,zero,4514 <__alt_data_end+0xfffe4514>
    462c:	01000744 	movi	r4,29
    4630:	19000626 	beq	r3,r4,464c <__sflush_r+0x1c8>
    4634:	01000584 	movi	r4,22
    4638:	19000426 	beq	r3,r4,464c <__sflush_r+0x1c8>
    463c:	88c0030b 	ldhu	r3,12(r17)
    4640:	18c01014 	ori	r3,r3,64
    4644:	88c0030d 	sth	r3,12(r17)
    4648:	003fc306 	br	4558 <__alt_data_end+0xfffe4558>
    464c:	8880030b 	ldhu	r2,12(r17)
    4650:	88c00417 	ldw	r3,16(r17)
    4654:	88000115 	stw	zero,4(r17)
    4658:	10bdffcc 	andi	r2,r2,63487
    465c:	8880030d 	sth	r2,12(r17)
    4660:	88c00015 	stw	r3,0(r17)
    4664:	003fb306 	br	4534 <__alt_data_end+0xfffe4534>
    4668:	98800017 	ldw	r2,0(r19)
    466c:	103fea26 	beq	r2,zero,4618 <__alt_data_end+0xfffe4618>
    4670:	00c00744 	movi	r3,29
    4674:	10c00226 	beq	r2,r3,4680 <__sflush_r+0x1fc>
    4678:	00c00584 	movi	r3,22
    467c:	10c0031e 	bne	r2,r3,468c <__sflush_r+0x208>
    4680:	9c000015 	stw	r16,0(r19)
    4684:	0005883a 	mov	r2,zero
    4688:	003fb306 	br	4558 <__alt_data_end+0xfffe4558>
    468c:	88c0030b 	ldhu	r3,12(r17)
    4690:	3005883a 	mov	r2,r6
    4694:	18c01014 	ori	r3,r3,64
    4698:	88c0030d 	sth	r3,12(r17)
    469c:	003fae06 	br	4558 <__alt_data_end+0xfffe4558>

000046a0 <_fflush_r>:
    46a0:	defffd04 	addi	sp,sp,-12
    46a4:	dc000115 	stw	r16,4(sp)
    46a8:	dfc00215 	stw	ra,8(sp)
    46ac:	2021883a 	mov	r16,r4
    46b0:	20000226 	beq	r4,zero,46bc <_fflush_r+0x1c>
    46b4:	20800e17 	ldw	r2,56(r4)
    46b8:	10000c26 	beq	r2,zero,46ec <_fflush_r+0x4c>
    46bc:	2880030f 	ldh	r2,12(r5)
    46c0:	1000051e 	bne	r2,zero,46d8 <_fflush_r+0x38>
    46c4:	0005883a 	mov	r2,zero
    46c8:	dfc00217 	ldw	ra,8(sp)
    46cc:	dc000117 	ldw	r16,4(sp)
    46d0:	dec00304 	addi	sp,sp,12
    46d4:	f800283a 	ret
    46d8:	8009883a 	mov	r4,r16
    46dc:	dfc00217 	ldw	ra,8(sp)
    46e0:	dc000117 	ldw	r16,4(sp)
    46e4:	dec00304 	addi	sp,sp,12
    46e8:	00044841 	jmpi	4484 <__sflush_r>
    46ec:	d9400015 	stw	r5,0(sp)
    46f0:	0004a7c0 	call	4a7c <__sinit>
    46f4:	d9400017 	ldw	r5,0(sp)
    46f8:	003ff006 	br	46bc <__alt_data_end+0xfffe46bc>

000046fc <fflush>:
    46fc:	20000526 	beq	r4,zero,4714 <fflush+0x18>
    4700:	00800074 	movhi	r2,1
    4704:	1084a904 	addi	r2,r2,4772
    4708:	200b883a 	mov	r5,r4
    470c:	11000017 	ldw	r4,0(r2)
    4710:	00046a01 	jmpi	46a0 <_fflush_r>
    4714:	00800074 	movhi	r2,1
    4718:	1084a804 	addi	r2,r2,4768
    471c:	11000017 	ldw	r4,0(r2)
    4720:	01400034 	movhi	r5,0
    4724:	2951a804 	addi	r5,r5,18080
    4728:	00054801 	jmpi	5480 <_fwalk_reent>

0000472c <__fp_unlock>:
    472c:	0005883a 	mov	r2,zero
    4730:	f800283a 	ret

00004734 <_cleanup_r>:
    4734:	01400074 	movhi	r5,1
    4738:	29652604 	addi	r5,r5,-27496
    473c:	00054801 	jmpi	5480 <_fwalk_reent>

00004740 <__sinit.part.1>:
    4740:	defff704 	addi	sp,sp,-36
    4744:	00c00034 	movhi	r3,0
    4748:	dfc00815 	stw	ra,32(sp)
    474c:	ddc00715 	stw	r23,28(sp)
    4750:	dd800615 	stw	r22,24(sp)
    4754:	dd400515 	stw	r21,20(sp)
    4758:	dd000415 	stw	r20,16(sp)
    475c:	dcc00315 	stw	r19,12(sp)
    4760:	dc800215 	stw	r18,8(sp)
    4764:	dc400115 	stw	r17,4(sp)
    4768:	dc000015 	stw	r16,0(sp)
    476c:	18d1cd04 	addi	r3,r3,18228
    4770:	24000117 	ldw	r16,4(r4)
    4774:	20c00f15 	stw	r3,60(r4)
    4778:	2080bb04 	addi	r2,r4,748
    477c:	00c000c4 	movi	r3,3
    4780:	20c0b915 	stw	r3,740(r4)
    4784:	2080ba15 	stw	r2,744(r4)
    4788:	2000b815 	stw	zero,736(r4)
    478c:	05c00204 	movi	r23,8
    4790:	00800104 	movi	r2,4
    4794:	2025883a 	mov	r18,r4
    4798:	b80d883a 	mov	r6,r23
    479c:	81001704 	addi	r4,r16,92
    47a0:	000b883a 	mov	r5,zero
    47a4:	80000015 	stw	zero,0(r16)
    47a8:	80000115 	stw	zero,4(r16)
    47ac:	80000215 	stw	zero,8(r16)
    47b0:	8080030d 	sth	r2,12(r16)
    47b4:	80001915 	stw	zero,100(r16)
    47b8:	8000038d 	sth	zero,14(r16)
    47bc:	80000415 	stw	zero,16(r16)
    47c0:	80000515 	stw	zero,20(r16)
    47c4:	80000615 	stw	zero,24(r16)
    47c8:	00063700 	call	6370 <memset>
    47cc:	05800034 	movhi	r22,0
    47d0:	94400217 	ldw	r17,8(r18)
    47d4:	05400034 	movhi	r21,0
    47d8:	05000034 	movhi	r20,0
    47dc:	04c00034 	movhi	r19,0
    47e0:	b59eb004 	addi	r22,r22,31424
    47e4:	ad5ec704 	addi	r21,r21,31516
    47e8:	a51ee604 	addi	r20,r20,31640
    47ec:	9cdefd04 	addi	r19,r19,31732
    47f0:	85800815 	stw	r22,32(r16)
    47f4:	85400915 	stw	r21,36(r16)
    47f8:	85000a15 	stw	r20,40(r16)
    47fc:	84c00b15 	stw	r19,44(r16)
    4800:	84000715 	stw	r16,28(r16)
    4804:	00800284 	movi	r2,10
    4808:	8880030d 	sth	r2,12(r17)
    480c:	00800044 	movi	r2,1
    4810:	b80d883a 	mov	r6,r23
    4814:	89001704 	addi	r4,r17,92
    4818:	000b883a 	mov	r5,zero
    481c:	88000015 	stw	zero,0(r17)
    4820:	88000115 	stw	zero,4(r17)
    4824:	88000215 	stw	zero,8(r17)
    4828:	88001915 	stw	zero,100(r17)
    482c:	8880038d 	sth	r2,14(r17)
    4830:	88000415 	stw	zero,16(r17)
    4834:	88000515 	stw	zero,20(r17)
    4838:	88000615 	stw	zero,24(r17)
    483c:	00063700 	call	6370 <memset>
    4840:	94000317 	ldw	r16,12(r18)
    4844:	00800484 	movi	r2,18
    4848:	8c400715 	stw	r17,28(r17)
    484c:	8d800815 	stw	r22,32(r17)
    4850:	8d400915 	stw	r21,36(r17)
    4854:	8d000a15 	stw	r20,40(r17)
    4858:	8cc00b15 	stw	r19,44(r17)
    485c:	8080030d 	sth	r2,12(r16)
    4860:	00800084 	movi	r2,2
    4864:	80000015 	stw	zero,0(r16)
    4868:	80000115 	stw	zero,4(r16)
    486c:	80000215 	stw	zero,8(r16)
    4870:	80001915 	stw	zero,100(r16)
    4874:	8080038d 	sth	r2,14(r16)
    4878:	80000415 	stw	zero,16(r16)
    487c:	80000515 	stw	zero,20(r16)
    4880:	80000615 	stw	zero,24(r16)
    4884:	b80d883a 	mov	r6,r23
    4888:	000b883a 	mov	r5,zero
    488c:	81001704 	addi	r4,r16,92
    4890:	00063700 	call	6370 <memset>
    4894:	00800044 	movi	r2,1
    4898:	84000715 	stw	r16,28(r16)
    489c:	85800815 	stw	r22,32(r16)
    48a0:	85400915 	stw	r21,36(r16)
    48a4:	85000a15 	stw	r20,40(r16)
    48a8:	84c00b15 	stw	r19,44(r16)
    48ac:	90800e15 	stw	r2,56(r18)
    48b0:	dfc00817 	ldw	ra,32(sp)
    48b4:	ddc00717 	ldw	r23,28(sp)
    48b8:	dd800617 	ldw	r22,24(sp)
    48bc:	dd400517 	ldw	r21,20(sp)
    48c0:	dd000417 	ldw	r20,16(sp)
    48c4:	dcc00317 	ldw	r19,12(sp)
    48c8:	dc800217 	ldw	r18,8(sp)
    48cc:	dc400117 	ldw	r17,4(sp)
    48d0:	dc000017 	ldw	r16,0(sp)
    48d4:	dec00904 	addi	sp,sp,36
    48d8:	f800283a 	ret

000048dc <__fp_lock>:
    48dc:	0005883a 	mov	r2,zero
    48e0:	f800283a 	ret

000048e4 <__sfmoreglue>:
    48e4:	defffc04 	addi	sp,sp,-16
    48e8:	dc400115 	stw	r17,4(sp)
    48ec:	2c7fffc4 	addi	r17,r5,-1
    48f0:	8c401a24 	muli	r17,r17,104
    48f4:	dc800215 	stw	r18,8(sp)
    48f8:	2825883a 	mov	r18,r5
    48fc:	89401d04 	addi	r5,r17,116
    4900:	dc000015 	stw	r16,0(sp)
    4904:	dfc00315 	stw	ra,12(sp)
    4908:	00057dc0 	call	57dc <_malloc_r>
    490c:	1021883a 	mov	r16,r2
    4910:	10000726 	beq	r2,zero,4930 <__sfmoreglue+0x4c>
    4914:	11000304 	addi	r4,r2,12
    4918:	10000015 	stw	zero,0(r2)
    491c:	14800115 	stw	r18,4(r2)
    4920:	11000215 	stw	r4,8(r2)
    4924:	89801a04 	addi	r6,r17,104
    4928:	000b883a 	mov	r5,zero
    492c:	00063700 	call	6370 <memset>
    4930:	8005883a 	mov	r2,r16
    4934:	dfc00317 	ldw	ra,12(sp)
    4938:	dc800217 	ldw	r18,8(sp)
    493c:	dc400117 	ldw	r17,4(sp)
    4940:	dc000017 	ldw	r16,0(sp)
    4944:	dec00404 	addi	sp,sp,16
    4948:	f800283a 	ret

0000494c <__sfp>:
    494c:	defffb04 	addi	sp,sp,-20
    4950:	dc000015 	stw	r16,0(sp)
    4954:	04000074 	movhi	r16,1
    4958:	8404a804 	addi	r16,r16,4768
    495c:	dcc00315 	stw	r19,12(sp)
    4960:	2027883a 	mov	r19,r4
    4964:	81000017 	ldw	r4,0(r16)
    4968:	dfc00415 	stw	ra,16(sp)
    496c:	dc800215 	stw	r18,8(sp)
    4970:	20800e17 	ldw	r2,56(r4)
    4974:	dc400115 	stw	r17,4(sp)
    4978:	1000021e 	bne	r2,zero,4984 <__sfp+0x38>
    497c:	00047400 	call	4740 <__sinit.part.1>
    4980:	81000017 	ldw	r4,0(r16)
    4984:	2480b804 	addi	r18,r4,736
    4988:	047fffc4 	movi	r17,-1
    498c:	91000117 	ldw	r4,4(r18)
    4990:	94000217 	ldw	r16,8(r18)
    4994:	213fffc4 	addi	r4,r4,-1
    4998:	20000a16 	blt	r4,zero,49c4 <__sfp+0x78>
    499c:	8080030f 	ldh	r2,12(r16)
    49a0:	10000c26 	beq	r2,zero,49d4 <__sfp+0x88>
    49a4:	80c01d04 	addi	r3,r16,116
    49a8:	00000206 	br	49b4 <__sfp+0x68>
    49ac:	18bfe60f 	ldh	r2,-104(r3)
    49b0:	10000826 	beq	r2,zero,49d4 <__sfp+0x88>
    49b4:	213fffc4 	addi	r4,r4,-1
    49b8:	1c3ffd04 	addi	r16,r3,-12
    49bc:	18c01a04 	addi	r3,r3,104
    49c0:	247ffa1e 	bne	r4,r17,49ac <__alt_data_end+0xfffe49ac>
    49c4:	90800017 	ldw	r2,0(r18)
    49c8:	10001d26 	beq	r2,zero,4a40 <__sfp+0xf4>
    49cc:	1025883a 	mov	r18,r2
    49d0:	003fee06 	br	498c <__alt_data_end+0xfffe498c>
    49d4:	00bfffc4 	movi	r2,-1
    49d8:	8080038d 	sth	r2,14(r16)
    49dc:	00800044 	movi	r2,1
    49e0:	8080030d 	sth	r2,12(r16)
    49e4:	80001915 	stw	zero,100(r16)
    49e8:	80000015 	stw	zero,0(r16)
    49ec:	80000215 	stw	zero,8(r16)
    49f0:	80000115 	stw	zero,4(r16)
    49f4:	80000415 	stw	zero,16(r16)
    49f8:	80000515 	stw	zero,20(r16)
    49fc:	80000615 	stw	zero,24(r16)
    4a00:	01800204 	movi	r6,8
    4a04:	000b883a 	mov	r5,zero
    4a08:	81001704 	addi	r4,r16,92
    4a0c:	00063700 	call	6370 <memset>
    4a10:	8005883a 	mov	r2,r16
    4a14:	80000c15 	stw	zero,48(r16)
    4a18:	80000d15 	stw	zero,52(r16)
    4a1c:	80001115 	stw	zero,68(r16)
    4a20:	80001215 	stw	zero,72(r16)
    4a24:	dfc00417 	ldw	ra,16(sp)
    4a28:	dcc00317 	ldw	r19,12(sp)
    4a2c:	dc800217 	ldw	r18,8(sp)
    4a30:	dc400117 	ldw	r17,4(sp)
    4a34:	dc000017 	ldw	r16,0(sp)
    4a38:	dec00504 	addi	sp,sp,20
    4a3c:	f800283a 	ret
    4a40:	01400104 	movi	r5,4
    4a44:	9809883a 	mov	r4,r19
    4a48:	00048e40 	call	48e4 <__sfmoreglue>
    4a4c:	90800015 	stw	r2,0(r18)
    4a50:	103fde1e 	bne	r2,zero,49cc <__alt_data_end+0xfffe49cc>
    4a54:	00800304 	movi	r2,12
    4a58:	98800015 	stw	r2,0(r19)
    4a5c:	0005883a 	mov	r2,zero
    4a60:	003ff006 	br	4a24 <__alt_data_end+0xfffe4a24>

00004a64 <_cleanup>:
    4a64:	00800074 	movhi	r2,1
    4a68:	1084a804 	addi	r2,r2,4768
    4a6c:	11000017 	ldw	r4,0(r2)
    4a70:	01400074 	movhi	r5,1
    4a74:	29652604 	addi	r5,r5,-27496
    4a78:	00054801 	jmpi	5480 <_fwalk_reent>

00004a7c <__sinit>:
    4a7c:	20800e17 	ldw	r2,56(r4)
    4a80:	10000126 	beq	r2,zero,4a88 <__sinit+0xc>
    4a84:	f800283a 	ret
    4a88:	00047401 	jmpi	4740 <__sinit.part.1>

00004a8c <__sfp_lock_acquire>:
    4a8c:	f800283a 	ret

00004a90 <__sfp_lock_release>:
    4a90:	f800283a 	ret

00004a94 <__sinit_lock_acquire>:
    4a94:	f800283a 	ret

00004a98 <__sinit_lock_release>:
    4a98:	f800283a 	ret

00004a9c <__fp_lock_all>:
    4a9c:	00800074 	movhi	r2,1
    4aa0:	1084a904 	addi	r2,r2,4772
    4aa4:	11000017 	ldw	r4,0(r2)
    4aa8:	01400034 	movhi	r5,0
    4aac:	29523704 	addi	r5,r5,18652
    4ab0:	00053bc1 	jmpi	53bc <_fwalk>

00004ab4 <__fp_unlock_all>:
    4ab4:	00800074 	movhi	r2,1
    4ab8:	1084a904 	addi	r2,r2,4772
    4abc:	11000017 	ldw	r4,0(r2)
    4ac0:	01400034 	movhi	r5,0
    4ac4:	2951cb04 	addi	r5,r5,18220
    4ac8:	00053bc1 	jmpi	53bc <_fwalk>

00004acc <_malloc_trim_r>:
    4acc:	defffb04 	addi	sp,sp,-20
    4ad0:	dcc00315 	stw	r19,12(sp)
    4ad4:	04c00074 	movhi	r19,1
    4ad8:	dc800215 	stw	r18,8(sp)
    4adc:	dc400115 	stw	r17,4(sp)
    4ae0:	dc000015 	stw	r16,0(sp)
    4ae4:	dfc00415 	stw	ra,16(sp)
    4ae8:	2821883a 	mov	r16,r5
    4aec:	9cff2404 	addi	r19,r19,-880
    4af0:	2025883a 	mov	r18,r4
    4af4:	000d2e80 	call	d2e8 <__malloc_lock>
    4af8:	98800217 	ldw	r2,8(r19)
    4afc:	14400117 	ldw	r17,4(r2)
    4b00:	00bfff04 	movi	r2,-4
    4b04:	88a2703a 	and	r17,r17,r2
    4b08:	8c21c83a 	sub	r16,r17,r16
    4b0c:	8403fbc4 	addi	r16,r16,4079
    4b10:	8020d33a 	srli	r16,r16,12
    4b14:	0083ffc4 	movi	r2,4095
    4b18:	843fffc4 	addi	r16,r16,-1
    4b1c:	8020933a 	slli	r16,r16,12
    4b20:	1400060e 	bge	r2,r16,4b3c <_malloc_trim_r+0x70>
    4b24:	000b883a 	mov	r5,zero
    4b28:	9009883a 	mov	r4,r18
    4b2c:	0007a6c0 	call	7a6c <_sbrk_r>
    4b30:	98c00217 	ldw	r3,8(r19)
    4b34:	1c47883a 	add	r3,r3,r17
    4b38:	10c00a26 	beq	r2,r3,4b64 <_malloc_trim_r+0x98>
    4b3c:	9009883a 	mov	r4,r18
    4b40:	000d30c0 	call	d30c <__malloc_unlock>
    4b44:	0005883a 	mov	r2,zero
    4b48:	dfc00417 	ldw	ra,16(sp)
    4b4c:	dcc00317 	ldw	r19,12(sp)
    4b50:	dc800217 	ldw	r18,8(sp)
    4b54:	dc400117 	ldw	r17,4(sp)
    4b58:	dc000017 	ldw	r16,0(sp)
    4b5c:	dec00504 	addi	sp,sp,20
    4b60:	f800283a 	ret
    4b64:	040bc83a 	sub	r5,zero,r16
    4b68:	9009883a 	mov	r4,r18
    4b6c:	0007a6c0 	call	7a6c <_sbrk_r>
    4b70:	00ffffc4 	movi	r3,-1
    4b74:	10c00d26 	beq	r2,r3,4bac <_malloc_trim_r+0xe0>
    4b78:	00c00074 	movhi	r3,1
    4b7c:	18cb8004 	addi	r3,r3,11776
    4b80:	18800017 	ldw	r2,0(r3)
    4b84:	99000217 	ldw	r4,8(r19)
    4b88:	8c23c83a 	sub	r17,r17,r16
    4b8c:	8c400054 	ori	r17,r17,1
    4b90:	1421c83a 	sub	r16,r2,r16
    4b94:	24400115 	stw	r17,4(r4)
    4b98:	9009883a 	mov	r4,r18
    4b9c:	1c000015 	stw	r16,0(r3)
    4ba0:	000d30c0 	call	d30c <__malloc_unlock>
    4ba4:	00800044 	movi	r2,1
    4ba8:	003fe706 	br	4b48 <__alt_data_end+0xfffe4b48>
    4bac:	000b883a 	mov	r5,zero
    4bb0:	9009883a 	mov	r4,r18
    4bb4:	0007a6c0 	call	7a6c <_sbrk_r>
    4bb8:	99000217 	ldw	r4,8(r19)
    4bbc:	014003c4 	movi	r5,15
    4bc0:	1107c83a 	sub	r3,r2,r4
    4bc4:	28ffdd0e 	bge	r5,r3,4b3c <__alt_data_end+0xfffe4b3c>
    4bc8:	01400074 	movhi	r5,1
    4bcc:	2944ab04 	addi	r5,r5,4780
    4bd0:	29400017 	ldw	r5,0(r5)
    4bd4:	18c00054 	ori	r3,r3,1
    4bd8:	20c00115 	stw	r3,4(r4)
    4bdc:	00c00074 	movhi	r3,1
    4be0:	1145c83a 	sub	r2,r2,r5
    4be4:	18cb8004 	addi	r3,r3,11776
    4be8:	18800015 	stw	r2,0(r3)
    4bec:	003fd306 	br	4b3c <__alt_data_end+0xfffe4b3c>

00004bf0 <_free_r>:
    4bf0:	28004126 	beq	r5,zero,4cf8 <_free_r+0x108>
    4bf4:	defffd04 	addi	sp,sp,-12
    4bf8:	dc400115 	stw	r17,4(sp)
    4bfc:	dc000015 	stw	r16,0(sp)
    4c00:	2023883a 	mov	r17,r4
    4c04:	2821883a 	mov	r16,r5
    4c08:	dfc00215 	stw	ra,8(sp)
    4c0c:	000d2e80 	call	d2e8 <__malloc_lock>
    4c10:	81ffff17 	ldw	r7,-4(r16)
    4c14:	00bfff84 	movi	r2,-2
    4c18:	01000074 	movhi	r4,1
    4c1c:	81bffe04 	addi	r6,r16,-8
    4c20:	3884703a 	and	r2,r7,r2
    4c24:	213f2404 	addi	r4,r4,-880
    4c28:	308b883a 	add	r5,r6,r2
    4c2c:	2a400117 	ldw	r9,4(r5)
    4c30:	22000217 	ldw	r8,8(r4)
    4c34:	00ffff04 	movi	r3,-4
    4c38:	48c6703a 	and	r3,r9,r3
    4c3c:	2a005726 	beq	r5,r8,4d9c <_free_r+0x1ac>
    4c40:	28c00115 	stw	r3,4(r5)
    4c44:	39c0004c 	andi	r7,r7,1
    4c48:	3800091e 	bne	r7,zero,4c70 <_free_r+0x80>
    4c4c:	823ffe17 	ldw	r8,-8(r16)
    4c50:	22400204 	addi	r9,r4,8
    4c54:	320dc83a 	sub	r6,r6,r8
    4c58:	31c00217 	ldw	r7,8(r6)
    4c5c:	1205883a 	add	r2,r2,r8
    4c60:	3a406526 	beq	r7,r9,4df8 <_free_r+0x208>
    4c64:	32000317 	ldw	r8,12(r6)
    4c68:	3a000315 	stw	r8,12(r7)
    4c6c:	41c00215 	stw	r7,8(r8)
    4c70:	28cf883a 	add	r7,r5,r3
    4c74:	39c00117 	ldw	r7,4(r7)
    4c78:	39c0004c 	andi	r7,r7,1
    4c7c:	38003a26 	beq	r7,zero,4d68 <_free_r+0x178>
    4c80:	10c00054 	ori	r3,r2,1
    4c84:	30c00115 	stw	r3,4(r6)
    4c88:	3087883a 	add	r3,r6,r2
    4c8c:	18800015 	stw	r2,0(r3)
    4c90:	00c07fc4 	movi	r3,511
    4c94:	18801936 	bltu	r3,r2,4cfc <_free_r+0x10c>
    4c98:	1004d0fa 	srli	r2,r2,3
    4c9c:	01c00044 	movi	r7,1
    4ca0:	21400117 	ldw	r5,4(r4)
    4ca4:	10c00044 	addi	r3,r2,1
    4ca8:	18c7883a 	add	r3,r3,r3
    4cac:	1005d0ba 	srai	r2,r2,2
    4cb0:	18c7883a 	add	r3,r3,r3
    4cb4:	18c7883a 	add	r3,r3,r3
    4cb8:	1907883a 	add	r3,r3,r4
    4cbc:	3884983a 	sll	r2,r7,r2
    4cc0:	19c00017 	ldw	r7,0(r3)
    4cc4:	1a3ffe04 	addi	r8,r3,-8
    4cc8:	1144b03a 	or	r2,r2,r5
    4ccc:	32000315 	stw	r8,12(r6)
    4cd0:	31c00215 	stw	r7,8(r6)
    4cd4:	20800115 	stw	r2,4(r4)
    4cd8:	19800015 	stw	r6,0(r3)
    4cdc:	39800315 	stw	r6,12(r7)
    4ce0:	8809883a 	mov	r4,r17
    4ce4:	dfc00217 	ldw	ra,8(sp)
    4ce8:	dc400117 	ldw	r17,4(sp)
    4cec:	dc000017 	ldw	r16,0(sp)
    4cf0:	dec00304 	addi	sp,sp,12
    4cf4:	000d30c1 	jmpi	d30c <__malloc_unlock>
    4cf8:	f800283a 	ret
    4cfc:	100ad27a 	srli	r5,r2,9
    4d00:	00c00104 	movi	r3,4
    4d04:	19404a36 	bltu	r3,r5,4e30 <_free_r+0x240>
    4d08:	100ad1ba 	srli	r5,r2,6
    4d0c:	28c00e44 	addi	r3,r5,57
    4d10:	18c7883a 	add	r3,r3,r3
    4d14:	29400e04 	addi	r5,r5,56
    4d18:	18c7883a 	add	r3,r3,r3
    4d1c:	18c7883a 	add	r3,r3,r3
    4d20:	1909883a 	add	r4,r3,r4
    4d24:	20c00017 	ldw	r3,0(r4)
    4d28:	01c00074 	movhi	r7,1
    4d2c:	213ffe04 	addi	r4,r4,-8
    4d30:	39ff2404 	addi	r7,r7,-880
    4d34:	20c04426 	beq	r4,r3,4e48 <_free_r+0x258>
    4d38:	01ffff04 	movi	r7,-4
    4d3c:	19400117 	ldw	r5,4(r3)
    4d40:	29ca703a 	and	r5,r5,r7
    4d44:	1140022e 	bgeu	r2,r5,4d50 <_free_r+0x160>
    4d48:	18c00217 	ldw	r3,8(r3)
    4d4c:	20fffb1e 	bne	r4,r3,4d3c <__alt_data_end+0xfffe4d3c>
    4d50:	19000317 	ldw	r4,12(r3)
    4d54:	31000315 	stw	r4,12(r6)
    4d58:	30c00215 	stw	r3,8(r6)
    4d5c:	21800215 	stw	r6,8(r4)
    4d60:	19800315 	stw	r6,12(r3)
    4d64:	003fde06 	br	4ce0 <__alt_data_end+0xfffe4ce0>
    4d68:	29c00217 	ldw	r7,8(r5)
    4d6c:	10c5883a 	add	r2,r2,r3
    4d70:	00c00074 	movhi	r3,1
    4d74:	18ff2604 	addi	r3,r3,-872
    4d78:	38c03b26 	beq	r7,r3,4e68 <_free_r+0x278>
    4d7c:	2a000317 	ldw	r8,12(r5)
    4d80:	11400054 	ori	r5,r2,1
    4d84:	3087883a 	add	r3,r6,r2
    4d88:	3a000315 	stw	r8,12(r7)
    4d8c:	41c00215 	stw	r7,8(r8)
    4d90:	31400115 	stw	r5,4(r6)
    4d94:	18800015 	stw	r2,0(r3)
    4d98:	003fbd06 	br	4c90 <__alt_data_end+0xfffe4c90>
    4d9c:	39c0004c 	andi	r7,r7,1
    4da0:	10c5883a 	add	r2,r2,r3
    4da4:	3800071e 	bne	r7,zero,4dc4 <_free_r+0x1d4>
    4da8:	81fffe17 	ldw	r7,-8(r16)
    4dac:	31cdc83a 	sub	r6,r6,r7
    4db0:	30c00317 	ldw	r3,12(r6)
    4db4:	31400217 	ldw	r5,8(r6)
    4db8:	11c5883a 	add	r2,r2,r7
    4dbc:	28c00315 	stw	r3,12(r5)
    4dc0:	19400215 	stw	r5,8(r3)
    4dc4:	10c00054 	ori	r3,r2,1
    4dc8:	30c00115 	stw	r3,4(r6)
    4dcc:	00c00074 	movhi	r3,1
    4dd0:	18c4ac04 	addi	r3,r3,4784
    4dd4:	18c00017 	ldw	r3,0(r3)
    4dd8:	21800215 	stw	r6,8(r4)
    4ddc:	10ffc036 	bltu	r2,r3,4ce0 <__alt_data_end+0xfffe4ce0>
    4de0:	00800074 	movhi	r2,1
    4de4:	108b7804 	addi	r2,r2,11744
    4de8:	11400017 	ldw	r5,0(r2)
    4dec:	8809883a 	mov	r4,r17
    4df0:	0004acc0 	call	4acc <_malloc_trim_r>
    4df4:	003fba06 	br	4ce0 <__alt_data_end+0xfffe4ce0>
    4df8:	28c9883a 	add	r4,r5,r3
    4dfc:	21000117 	ldw	r4,4(r4)
    4e00:	2100004c 	andi	r4,r4,1
    4e04:	2000391e 	bne	r4,zero,4eec <_free_r+0x2fc>
    4e08:	29c00217 	ldw	r7,8(r5)
    4e0c:	29000317 	ldw	r4,12(r5)
    4e10:	1885883a 	add	r2,r3,r2
    4e14:	10c00054 	ori	r3,r2,1
    4e18:	39000315 	stw	r4,12(r7)
    4e1c:	21c00215 	stw	r7,8(r4)
    4e20:	30c00115 	stw	r3,4(r6)
    4e24:	308d883a 	add	r6,r6,r2
    4e28:	30800015 	stw	r2,0(r6)
    4e2c:	003fac06 	br	4ce0 <__alt_data_end+0xfffe4ce0>
    4e30:	00c00504 	movi	r3,20
    4e34:	19401536 	bltu	r3,r5,4e8c <_free_r+0x29c>
    4e38:	28c01704 	addi	r3,r5,92
    4e3c:	18c7883a 	add	r3,r3,r3
    4e40:	294016c4 	addi	r5,r5,91
    4e44:	003fb406 	br	4d18 <__alt_data_end+0xfffe4d18>
    4e48:	280bd0ba 	srai	r5,r5,2
    4e4c:	00c00044 	movi	r3,1
    4e50:	38800117 	ldw	r2,4(r7)
    4e54:	194a983a 	sll	r5,r3,r5
    4e58:	2007883a 	mov	r3,r4
    4e5c:	2884b03a 	or	r2,r5,r2
    4e60:	38800115 	stw	r2,4(r7)
    4e64:	003fbb06 	br	4d54 <__alt_data_end+0xfffe4d54>
    4e68:	21800515 	stw	r6,20(r4)
    4e6c:	21800415 	stw	r6,16(r4)
    4e70:	10c00054 	ori	r3,r2,1
    4e74:	31c00315 	stw	r7,12(r6)
    4e78:	31c00215 	stw	r7,8(r6)
    4e7c:	30c00115 	stw	r3,4(r6)
    4e80:	308d883a 	add	r6,r6,r2
    4e84:	30800015 	stw	r2,0(r6)
    4e88:	003f9506 	br	4ce0 <__alt_data_end+0xfffe4ce0>
    4e8c:	00c01504 	movi	r3,84
    4e90:	19400536 	bltu	r3,r5,4ea8 <_free_r+0x2b8>
    4e94:	100ad33a 	srli	r5,r2,12
    4e98:	28c01bc4 	addi	r3,r5,111
    4e9c:	18c7883a 	add	r3,r3,r3
    4ea0:	29401b84 	addi	r5,r5,110
    4ea4:	003f9c06 	br	4d18 <__alt_data_end+0xfffe4d18>
    4ea8:	00c05504 	movi	r3,340
    4eac:	19400536 	bltu	r3,r5,4ec4 <_free_r+0x2d4>
    4eb0:	100ad3fa 	srli	r5,r2,15
    4eb4:	28c01e04 	addi	r3,r5,120
    4eb8:	18c7883a 	add	r3,r3,r3
    4ebc:	29401dc4 	addi	r5,r5,119
    4ec0:	003f9506 	br	4d18 <__alt_data_end+0xfffe4d18>
    4ec4:	00c15504 	movi	r3,1364
    4ec8:	19400536 	bltu	r3,r5,4ee0 <_free_r+0x2f0>
    4ecc:	100ad4ba 	srli	r5,r2,18
    4ed0:	28c01f44 	addi	r3,r5,125
    4ed4:	18c7883a 	add	r3,r3,r3
    4ed8:	29401f04 	addi	r5,r5,124
    4edc:	003f8e06 	br	4d18 <__alt_data_end+0xfffe4d18>
    4ee0:	00c03f84 	movi	r3,254
    4ee4:	01401f84 	movi	r5,126
    4ee8:	003f8b06 	br	4d18 <__alt_data_end+0xfffe4d18>
    4eec:	10c00054 	ori	r3,r2,1
    4ef0:	30c00115 	stw	r3,4(r6)
    4ef4:	308d883a 	add	r6,r6,r2
    4ef8:	30800015 	stw	r2,0(r6)
    4efc:	003f7806 	br	4ce0 <__alt_data_end+0xfffe4ce0>

00004f00 <__sfvwrite_r>:
    4f00:	30800217 	ldw	r2,8(r6)
    4f04:	10006726 	beq	r2,zero,50a4 <__sfvwrite_r+0x1a4>
    4f08:	28c0030b 	ldhu	r3,12(r5)
    4f0c:	defff404 	addi	sp,sp,-48
    4f10:	dd400715 	stw	r21,28(sp)
    4f14:	dd000615 	stw	r20,24(sp)
    4f18:	dc000215 	stw	r16,8(sp)
    4f1c:	dfc00b15 	stw	ra,44(sp)
    4f20:	df000a15 	stw	fp,40(sp)
    4f24:	ddc00915 	stw	r23,36(sp)
    4f28:	dd800815 	stw	r22,32(sp)
    4f2c:	dcc00515 	stw	r19,20(sp)
    4f30:	dc800415 	stw	r18,16(sp)
    4f34:	dc400315 	stw	r17,12(sp)
    4f38:	1880020c 	andi	r2,r3,8
    4f3c:	2821883a 	mov	r16,r5
    4f40:	202b883a 	mov	r21,r4
    4f44:	3029883a 	mov	r20,r6
    4f48:	10002726 	beq	r2,zero,4fe8 <__sfvwrite_r+0xe8>
    4f4c:	28800417 	ldw	r2,16(r5)
    4f50:	10002526 	beq	r2,zero,4fe8 <__sfvwrite_r+0xe8>
    4f54:	1880008c 	andi	r2,r3,2
    4f58:	a4400017 	ldw	r17,0(r20)
    4f5c:	10002a26 	beq	r2,zero,5008 <__sfvwrite_r+0x108>
    4f60:	05a00034 	movhi	r22,32768
    4f64:	0027883a 	mov	r19,zero
    4f68:	0025883a 	mov	r18,zero
    4f6c:	b5bf0004 	addi	r22,r22,-1024
    4f70:	980d883a 	mov	r6,r19
    4f74:	a809883a 	mov	r4,r21
    4f78:	90004626 	beq	r18,zero,5094 <__sfvwrite_r+0x194>
    4f7c:	900f883a 	mov	r7,r18
    4f80:	b480022e 	bgeu	r22,r18,4f8c <__sfvwrite_r+0x8c>
    4f84:	01e00034 	movhi	r7,32768
    4f88:	39ff0004 	addi	r7,r7,-1024
    4f8c:	80800917 	ldw	r2,36(r16)
    4f90:	81400717 	ldw	r5,28(r16)
    4f94:	103ee83a 	callr	r2
    4f98:	0080570e 	bge	zero,r2,50f8 <__sfvwrite_r+0x1f8>
    4f9c:	a0c00217 	ldw	r3,8(r20)
    4fa0:	98a7883a 	add	r19,r19,r2
    4fa4:	90a5c83a 	sub	r18,r18,r2
    4fa8:	1885c83a 	sub	r2,r3,r2
    4fac:	a0800215 	stw	r2,8(r20)
    4fb0:	103fef1e 	bne	r2,zero,4f70 <__alt_data_end+0xfffe4f70>
    4fb4:	0005883a 	mov	r2,zero
    4fb8:	dfc00b17 	ldw	ra,44(sp)
    4fbc:	df000a17 	ldw	fp,40(sp)
    4fc0:	ddc00917 	ldw	r23,36(sp)
    4fc4:	dd800817 	ldw	r22,32(sp)
    4fc8:	dd400717 	ldw	r21,28(sp)
    4fcc:	dd000617 	ldw	r20,24(sp)
    4fd0:	dcc00517 	ldw	r19,20(sp)
    4fd4:	dc800417 	ldw	r18,16(sp)
    4fd8:	dc400317 	ldw	r17,12(sp)
    4fdc:	dc000217 	ldw	r16,8(sp)
    4fe0:	dec00c04 	addi	sp,sp,48
    4fe4:	f800283a 	ret
    4fe8:	800b883a 	mov	r5,r16
    4fec:	a809883a 	mov	r4,r21
    4ff0:	0002aa80 	call	2aa8 <__swsetup_r>
    4ff4:	1000eb1e 	bne	r2,zero,53a4 <__sfvwrite_r+0x4a4>
    4ff8:	80c0030b 	ldhu	r3,12(r16)
    4ffc:	a4400017 	ldw	r17,0(r20)
    5000:	1880008c 	andi	r2,r3,2
    5004:	103fd61e 	bne	r2,zero,4f60 <__alt_data_end+0xfffe4f60>
    5008:	1880004c 	andi	r2,r3,1
    500c:	10003f1e 	bne	r2,zero,510c <__sfvwrite_r+0x20c>
    5010:	0039883a 	mov	fp,zero
    5014:	0025883a 	mov	r18,zero
    5018:	90001a26 	beq	r18,zero,5084 <__sfvwrite_r+0x184>
    501c:	1880800c 	andi	r2,r3,512
    5020:	84c00217 	ldw	r19,8(r16)
    5024:	10002126 	beq	r2,zero,50ac <__sfvwrite_r+0x1ac>
    5028:	982f883a 	mov	r23,r19
    502c:	94c09336 	bltu	r18,r19,527c <__sfvwrite_r+0x37c>
    5030:	1881200c 	andi	r2,r3,1152
    5034:	10009e1e 	bne	r2,zero,52b0 <__sfvwrite_r+0x3b0>
    5038:	81000017 	ldw	r4,0(r16)
    503c:	b80d883a 	mov	r6,r23
    5040:	e00b883a 	mov	r5,fp
    5044:	00062140 	call	6214 <memmove>
    5048:	80c00217 	ldw	r3,8(r16)
    504c:	81000017 	ldw	r4,0(r16)
    5050:	9005883a 	mov	r2,r18
    5054:	1ce7c83a 	sub	r19,r3,r19
    5058:	25cf883a 	add	r7,r4,r23
    505c:	84c00215 	stw	r19,8(r16)
    5060:	81c00015 	stw	r7,0(r16)
    5064:	a0c00217 	ldw	r3,8(r20)
    5068:	e0b9883a 	add	fp,fp,r2
    506c:	90a5c83a 	sub	r18,r18,r2
    5070:	18a7c83a 	sub	r19,r3,r2
    5074:	a4c00215 	stw	r19,8(r20)
    5078:	983fce26 	beq	r19,zero,4fb4 <__alt_data_end+0xfffe4fb4>
    507c:	80c0030b 	ldhu	r3,12(r16)
    5080:	903fe61e 	bne	r18,zero,501c <__alt_data_end+0xfffe501c>
    5084:	8f000017 	ldw	fp,0(r17)
    5088:	8c800117 	ldw	r18,4(r17)
    508c:	8c400204 	addi	r17,r17,8
    5090:	003fe106 	br	5018 <__alt_data_end+0xfffe5018>
    5094:	8cc00017 	ldw	r19,0(r17)
    5098:	8c800117 	ldw	r18,4(r17)
    509c:	8c400204 	addi	r17,r17,8
    50a0:	003fb306 	br	4f70 <__alt_data_end+0xfffe4f70>
    50a4:	0005883a 	mov	r2,zero
    50a8:	f800283a 	ret
    50ac:	81000017 	ldw	r4,0(r16)
    50b0:	80800417 	ldw	r2,16(r16)
    50b4:	11005736 	bltu	r2,r4,5214 <__sfvwrite_r+0x314>
    50b8:	85c00517 	ldw	r23,20(r16)
    50bc:	95c05536 	bltu	r18,r23,5214 <__sfvwrite_r+0x314>
    50c0:	00a00034 	movhi	r2,32768
    50c4:	10bfffc4 	addi	r2,r2,-1
    50c8:	9009883a 	mov	r4,r18
    50cc:	1480012e 	bgeu	r2,r18,50d4 <__sfvwrite_r+0x1d4>
    50d0:	1009883a 	mov	r4,r2
    50d4:	b80b883a 	mov	r5,r23
    50d8:	000044c0 	call	44c <__divsi3>
    50dc:	15cf383a 	mul	r7,r2,r23
    50e0:	81400717 	ldw	r5,28(r16)
    50e4:	80800917 	ldw	r2,36(r16)
    50e8:	e00d883a 	mov	r6,fp
    50ec:	a809883a 	mov	r4,r21
    50f0:	103ee83a 	callr	r2
    50f4:	00bfdb16 	blt	zero,r2,5064 <__alt_data_end+0xfffe5064>
    50f8:	8080030b 	ldhu	r2,12(r16)
    50fc:	10801014 	ori	r2,r2,64
    5100:	8080030d 	sth	r2,12(r16)
    5104:	00bfffc4 	movi	r2,-1
    5108:	003fab06 	br	4fb8 <__alt_data_end+0xfffe4fb8>
    510c:	0027883a 	mov	r19,zero
    5110:	0011883a 	mov	r8,zero
    5114:	0039883a 	mov	fp,zero
    5118:	0025883a 	mov	r18,zero
    511c:	90001f26 	beq	r18,zero,519c <__sfvwrite_r+0x29c>
    5120:	40005a26 	beq	r8,zero,528c <__sfvwrite_r+0x38c>
    5124:	982d883a 	mov	r22,r19
    5128:	94c0012e 	bgeu	r18,r19,5130 <__sfvwrite_r+0x230>
    512c:	902d883a 	mov	r22,r18
    5130:	81000017 	ldw	r4,0(r16)
    5134:	80800417 	ldw	r2,16(r16)
    5138:	b02f883a 	mov	r23,r22
    513c:	81c00517 	ldw	r7,20(r16)
    5140:	1100032e 	bgeu	r2,r4,5150 <__sfvwrite_r+0x250>
    5144:	80c00217 	ldw	r3,8(r16)
    5148:	38c7883a 	add	r3,r7,r3
    514c:	1d801816 	blt	r3,r22,51b0 <__sfvwrite_r+0x2b0>
    5150:	b1c03e16 	blt	r22,r7,524c <__sfvwrite_r+0x34c>
    5154:	80800917 	ldw	r2,36(r16)
    5158:	81400717 	ldw	r5,28(r16)
    515c:	e00d883a 	mov	r6,fp
    5160:	da000115 	stw	r8,4(sp)
    5164:	a809883a 	mov	r4,r21
    5168:	103ee83a 	callr	r2
    516c:	102f883a 	mov	r23,r2
    5170:	da000117 	ldw	r8,4(sp)
    5174:	00bfe00e 	bge	zero,r2,50f8 <__alt_data_end+0xfffe50f8>
    5178:	9de7c83a 	sub	r19,r19,r23
    517c:	98001f26 	beq	r19,zero,51fc <__sfvwrite_r+0x2fc>
    5180:	a0800217 	ldw	r2,8(r20)
    5184:	e5f9883a 	add	fp,fp,r23
    5188:	95e5c83a 	sub	r18,r18,r23
    518c:	15efc83a 	sub	r23,r2,r23
    5190:	a5c00215 	stw	r23,8(r20)
    5194:	b83f8726 	beq	r23,zero,4fb4 <__alt_data_end+0xfffe4fb4>
    5198:	903fe11e 	bne	r18,zero,5120 <__alt_data_end+0xfffe5120>
    519c:	8f000017 	ldw	fp,0(r17)
    51a0:	8c800117 	ldw	r18,4(r17)
    51a4:	0011883a 	mov	r8,zero
    51a8:	8c400204 	addi	r17,r17,8
    51ac:	003fdb06 	br	511c <__alt_data_end+0xfffe511c>
    51b0:	180d883a 	mov	r6,r3
    51b4:	e00b883a 	mov	r5,fp
    51b8:	da000115 	stw	r8,4(sp)
    51bc:	d8c00015 	stw	r3,0(sp)
    51c0:	00062140 	call	6214 <memmove>
    51c4:	d8c00017 	ldw	r3,0(sp)
    51c8:	80800017 	ldw	r2,0(r16)
    51cc:	800b883a 	mov	r5,r16
    51d0:	a809883a 	mov	r4,r21
    51d4:	10c5883a 	add	r2,r2,r3
    51d8:	80800015 	stw	r2,0(r16)
    51dc:	d8c00015 	stw	r3,0(sp)
    51e0:	00046a00 	call	46a0 <_fflush_r>
    51e4:	d8c00017 	ldw	r3,0(sp)
    51e8:	da000117 	ldw	r8,4(sp)
    51ec:	103fc21e 	bne	r2,zero,50f8 <__alt_data_end+0xfffe50f8>
    51f0:	182f883a 	mov	r23,r3
    51f4:	9de7c83a 	sub	r19,r19,r23
    51f8:	983fe11e 	bne	r19,zero,5180 <__alt_data_end+0xfffe5180>
    51fc:	800b883a 	mov	r5,r16
    5200:	a809883a 	mov	r4,r21
    5204:	00046a00 	call	46a0 <_fflush_r>
    5208:	103fbb1e 	bne	r2,zero,50f8 <__alt_data_end+0xfffe50f8>
    520c:	0011883a 	mov	r8,zero
    5210:	003fdb06 	br	5180 <__alt_data_end+0xfffe5180>
    5214:	94c0012e 	bgeu	r18,r19,521c <__sfvwrite_r+0x31c>
    5218:	9027883a 	mov	r19,r18
    521c:	980d883a 	mov	r6,r19
    5220:	e00b883a 	mov	r5,fp
    5224:	00062140 	call	6214 <memmove>
    5228:	80800217 	ldw	r2,8(r16)
    522c:	80c00017 	ldw	r3,0(r16)
    5230:	14c5c83a 	sub	r2,r2,r19
    5234:	1cc7883a 	add	r3,r3,r19
    5238:	80800215 	stw	r2,8(r16)
    523c:	80c00015 	stw	r3,0(r16)
    5240:	10004326 	beq	r2,zero,5350 <__sfvwrite_r+0x450>
    5244:	9805883a 	mov	r2,r19
    5248:	003f8606 	br	5064 <__alt_data_end+0xfffe5064>
    524c:	b00d883a 	mov	r6,r22
    5250:	e00b883a 	mov	r5,fp
    5254:	da000115 	stw	r8,4(sp)
    5258:	00062140 	call	6214 <memmove>
    525c:	80800217 	ldw	r2,8(r16)
    5260:	80c00017 	ldw	r3,0(r16)
    5264:	da000117 	ldw	r8,4(sp)
    5268:	1585c83a 	sub	r2,r2,r22
    526c:	1dad883a 	add	r22,r3,r22
    5270:	80800215 	stw	r2,8(r16)
    5274:	85800015 	stw	r22,0(r16)
    5278:	003fbf06 	br	5178 <__alt_data_end+0xfffe5178>
    527c:	81000017 	ldw	r4,0(r16)
    5280:	9027883a 	mov	r19,r18
    5284:	902f883a 	mov	r23,r18
    5288:	003f6c06 	br	503c <__alt_data_end+0xfffe503c>
    528c:	900d883a 	mov	r6,r18
    5290:	01400284 	movi	r5,10
    5294:	e009883a 	mov	r4,fp
    5298:	0005fe80 	call	5fe8 <memchr>
    529c:	10003e26 	beq	r2,zero,5398 <__sfvwrite_r+0x498>
    52a0:	10800044 	addi	r2,r2,1
    52a4:	1727c83a 	sub	r19,r2,fp
    52a8:	02000044 	movi	r8,1
    52ac:	003f9d06 	br	5124 <__alt_data_end+0xfffe5124>
    52b0:	80800517 	ldw	r2,20(r16)
    52b4:	81400417 	ldw	r5,16(r16)
    52b8:	81c00017 	ldw	r7,0(r16)
    52bc:	10a7883a 	add	r19,r2,r2
    52c0:	9885883a 	add	r2,r19,r2
    52c4:	1026d7fa 	srli	r19,r2,31
    52c8:	396dc83a 	sub	r22,r7,r5
    52cc:	b1000044 	addi	r4,r22,1
    52d0:	9885883a 	add	r2,r19,r2
    52d4:	1027d07a 	srai	r19,r2,1
    52d8:	2485883a 	add	r2,r4,r18
    52dc:	980d883a 	mov	r6,r19
    52e0:	9880022e 	bgeu	r19,r2,52ec <__sfvwrite_r+0x3ec>
    52e4:	1027883a 	mov	r19,r2
    52e8:	100d883a 	mov	r6,r2
    52ec:	18c1000c 	andi	r3,r3,1024
    52f0:	18001c26 	beq	r3,zero,5364 <__sfvwrite_r+0x464>
    52f4:	300b883a 	mov	r5,r6
    52f8:	a809883a 	mov	r4,r21
    52fc:	00057dc0 	call	57dc <_malloc_r>
    5300:	102f883a 	mov	r23,r2
    5304:	10002926 	beq	r2,zero,53ac <__sfvwrite_r+0x4ac>
    5308:	81400417 	ldw	r5,16(r16)
    530c:	b00d883a 	mov	r6,r22
    5310:	1009883a 	mov	r4,r2
    5314:	00060cc0 	call	60cc <memcpy>
    5318:	8080030b 	ldhu	r2,12(r16)
    531c:	00fedfc4 	movi	r3,-1153
    5320:	10c4703a 	and	r2,r2,r3
    5324:	10802014 	ori	r2,r2,128
    5328:	8080030d 	sth	r2,12(r16)
    532c:	bd89883a 	add	r4,r23,r22
    5330:	9d8fc83a 	sub	r7,r19,r22
    5334:	85c00415 	stw	r23,16(r16)
    5338:	84c00515 	stw	r19,20(r16)
    533c:	81000015 	stw	r4,0(r16)
    5340:	9027883a 	mov	r19,r18
    5344:	81c00215 	stw	r7,8(r16)
    5348:	902f883a 	mov	r23,r18
    534c:	003f3b06 	br	503c <__alt_data_end+0xfffe503c>
    5350:	800b883a 	mov	r5,r16
    5354:	a809883a 	mov	r4,r21
    5358:	00046a00 	call	46a0 <_fflush_r>
    535c:	103fb926 	beq	r2,zero,5244 <__alt_data_end+0xfffe5244>
    5360:	003f6506 	br	50f8 <__alt_data_end+0xfffe50f8>
    5364:	a809883a 	mov	r4,r21
    5368:	00074940 	call	7494 <_realloc_r>
    536c:	102f883a 	mov	r23,r2
    5370:	103fee1e 	bne	r2,zero,532c <__alt_data_end+0xfffe532c>
    5374:	81400417 	ldw	r5,16(r16)
    5378:	a809883a 	mov	r4,r21
    537c:	0004bf00 	call	4bf0 <_free_r>
    5380:	8080030b 	ldhu	r2,12(r16)
    5384:	00ffdfc4 	movi	r3,-129
    5388:	1884703a 	and	r2,r3,r2
    538c:	00c00304 	movi	r3,12
    5390:	a8c00015 	stw	r3,0(r21)
    5394:	003f5906 	br	50fc <__alt_data_end+0xfffe50fc>
    5398:	94c00044 	addi	r19,r18,1
    539c:	02000044 	movi	r8,1
    53a0:	003f6006 	br	5124 <__alt_data_end+0xfffe5124>
    53a4:	00bfffc4 	movi	r2,-1
    53a8:	003f0306 	br	4fb8 <__alt_data_end+0xfffe4fb8>
    53ac:	00800304 	movi	r2,12
    53b0:	a8800015 	stw	r2,0(r21)
    53b4:	8080030b 	ldhu	r2,12(r16)
    53b8:	003f5006 	br	50fc <__alt_data_end+0xfffe50fc>

000053bc <_fwalk>:
    53bc:	defff704 	addi	sp,sp,-36
    53c0:	dd000415 	stw	r20,16(sp)
    53c4:	dfc00815 	stw	ra,32(sp)
    53c8:	ddc00715 	stw	r23,28(sp)
    53cc:	dd800615 	stw	r22,24(sp)
    53d0:	dd400515 	stw	r21,20(sp)
    53d4:	dcc00315 	stw	r19,12(sp)
    53d8:	dc800215 	stw	r18,8(sp)
    53dc:	dc400115 	stw	r17,4(sp)
    53e0:	dc000015 	stw	r16,0(sp)
    53e4:	2500b804 	addi	r20,r4,736
    53e8:	a0002326 	beq	r20,zero,5478 <_fwalk+0xbc>
    53ec:	282b883a 	mov	r21,r5
    53f0:	002f883a 	mov	r23,zero
    53f4:	05800044 	movi	r22,1
    53f8:	04ffffc4 	movi	r19,-1
    53fc:	a4400117 	ldw	r17,4(r20)
    5400:	a4800217 	ldw	r18,8(r20)
    5404:	8c7fffc4 	addi	r17,r17,-1
    5408:	88000d16 	blt	r17,zero,5440 <_fwalk+0x84>
    540c:	94000304 	addi	r16,r18,12
    5410:	94800384 	addi	r18,r18,14
    5414:	8080000b 	ldhu	r2,0(r16)
    5418:	8c7fffc4 	addi	r17,r17,-1
    541c:	813ffd04 	addi	r4,r16,-12
    5420:	b080042e 	bgeu	r22,r2,5434 <_fwalk+0x78>
    5424:	9080000f 	ldh	r2,0(r18)
    5428:	14c00226 	beq	r2,r19,5434 <_fwalk+0x78>
    542c:	a83ee83a 	callr	r21
    5430:	b8aeb03a 	or	r23,r23,r2
    5434:	84001a04 	addi	r16,r16,104
    5438:	94801a04 	addi	r18,r18,104
    543c:	8cfff51e 	bne	r17,r19,5414 <__alt_data_end+0xfffe5414>
    5440:	a5000017 	ldw	r20,0(r20)
    5444:	a03fed1e 	bne	r20,zero,53fc <__alt_data_end+0xfffe53fc>
    5448:	b805883a 	mov	r2,r23
    544c:	dfc00817 	ldw	ra,32(sp)
    5450:	ddc00717 	ldw	r23,28(sp)
    5454:	dd800617 	ldw	r22,24(sp)
    5458:	dd400517 	ldw	r21,20(sp)
    545c:	dd000417 	ldw	r20,16(sp)
    5460:	dcc00317 	ldw	r19,12(sp)
    5464:	dc800217 	ldw	r18,8(sp)
    5468:	dc400117 	ldw	r17,4(sp)
    546c:	dc000017 	ldw	r16,0(sp)
    5470:	dec00904 	addi	sp,sp,36
    5474:	f800283a 	ret
    5478:	002f883a 	mov	r23,zero
    547c:	003ff206 	br	5448 <__alt_data_end+0xfffe5448>

00005480 <_fwalk_reent>:
    5480:	defff704 	addi	sp,sp,-36
    5484:	dd000415 	stw	r20,16(sp)
    5488:	dfc00815 	stw	ra,32(sp)
    548c:	ddc00715 	stw	r23,28(sp)
    5490:	dd800615 	stw	r22,24(sp)
    5494:	dd400515 	stw	r21,20(sp)
    5498:	dcc00315 	stw	r19,12(sp)
    549c:	dc800215 	stw	r18,8(sp)
    54a0:	dc400115 	stw	r17,4(sp)
    54a4:	dc000015 	stw	r16,0(sp)
    54a8:	2500b804 	addi	r20,r4,736
    54ac:	a0002326 	beq	r20,zero,553c <_fwalk_reent+0xbc>
    54b0:	282b883a 	mov	r21,r5
    54b4:	2027883a 	mov	r19,r4
    54b8:	002f883a 	mov	r23,zero
    54bc:	05800044 	movi	r22,1
    54c0:	04bfffc4 	movi	r18,-1
    54c4:	a4400117 	ldw	r17,4(r20)
    54c8:	a4000217 	ldw	r16,8(r20)
    54cc:	8c7fffc4 	addi	r17,r17,-1
    54d0:	88000c16 	blt	r17,zero,5504 <_fwalk_reent+0x84>
    54d4:	84000304 	addi	r16,r16,12
    54d8:	8080000b 	ldhu	r2,0(r16)
    54dc:	8c7fffc4 	addi	r17,r17,-1
    54e0:	817ffd04 	addi	r5,r16,-12
    54e4:	b080052e 	bgeu	r22,r2,54fc <_fwalk_reent+0x7c>
    54e8:	8080008f 	ldh	r2,2(r16)
    54ec:	9809883a 	mov	r4,r19
    54f0:	14800226 	beq	r2,r18,54fc <_fwalk_reent+0x7c>
    54f4:	a83ee83a 	callr	r21
    54f8:	b8aeb03a 	or	r23,r23,r2
    54fc:	84001a04 	addi	r16,r16,104
    5500:	8cbff51e 	bne	r17,r18,54d8 <__alt_data_end+0xfffe54d8>
    5504:	a5000017 	ldw	r20,0(r20)
    5508:	a03fee1e 	bne	r20,zero,54c4 <__alt_data_end+0xfffe54c4>
    550c:	b805883a 	mov	r2,r23
    5510:	dfc00817 	ldw	ra,32(sp)
    5514:	ddc00717 	ldw	r23,28(sp)
    5518:	dd800617 	ldw	r22,24(sp)
    551c:	dd400517 	ldw	r21,20(sp)
    5520:	dd000417 	ldw	r20,16(sp)
    5524:	dcc00317 	ldw	r19,12(sp)
    5528:	dc800217 	ldw	r18,8(sp)
    552c:	dc400117 	ldw	r17,4(sp)
    5530:	dc000017 	ldw	r16,0(sp)
    5534:	dec00904 	addi	sp,sp,36
    5538:	f800283a 	ret
    553c:	002f883a 	mov	r23,zero
    5540:	003ff206 	br	550c <__alt_data_end+0xfffe550c>

00005544 <_setlocale_r>:
    5544:	30001b26 	beq	r6,zero,55b4 <_setlocale_r+0x70>
    5548:	01400074 	movhi	r5,1
    554c:	defffe04 	addi	sp,sp,-8
    5550:	297d5c04 	addi	r5,r5,-2704
    5554:	3009883a 	mov	r4,r6
    5558:	dc000015 	stw	r16,0(sp)
    555c:	dfc00115 	stw	ra,4(sp)
    5560:	3021883a 	mov	r16,r6
    5564:	0007bfc0 	call	7bfc <strcmp>
    5568:	1000061e 	bne	r2,zero,5584 <_setlocale_r+0x40>
    556c:	00800074 	movhi	r2,1
    5570:	10bd5b04 	addi	r2,r2,-2708
    5574:	dfc00117 	ldw	ra,4(sp)
    5578:	dc000017 	ldw	r16,0(sp)
    557c:	dec00204 	addi	sp,sp,8
    5580:	f800283a 	ret
    5584:	01400074 	movhi	r5,1
    5588:	297d5b04 	addi	r5,r5,-2708
    558c:	8009883a 	mov	r4,r16
    5590:	0007bfc0 	call	7bfc <strcmp>
    5594:	103ff526 	beq	r2,zero,556c <__alt_data_end+0xfffe556c>
    5598:	01400074 	movhi	r5,1
    559c:	297d4604 	addi	r5,r5,-2792
    55a0:	8009883a 	mov	r4,r16
    55a4:	0007bfc0 	call	7bfc <strcmp>
    55a8:	103ff026 	beq	r2,zero,556c <__alt_data_end+0xfffe556c>
    55ac:	0005883a 	mov	r2,zero
    55b0:	003ff006 	br	5574 <__alt_data_end+0xfffe5574>
    55b4:	00800074 	movhi	r2,1
    55b8:	10bd5b04 	addi	r2,r2,-2708
    55bc:	f800283a 	ret

000055c0 <__locale_charset>:
    55c0:	00800074 	movhi	r2,1
    55c4:	10bf0e04 	addi	r2,r2,-968
    55c8:	f800283a 	ret

000055cc <__locale_mb_cur_max>:
    55cc:	00800074 	movhi	r2,1
    55d0:	1084aa04 	addi	r2,r2,4776
    55d4:	10800017 	ldw	r2,0(r2)
    55d8:	f800283a 	ret

000055dc <__locale_msgcharset>:
    55dc:	00800074 	movhi	r2,1
    55e0:	10bf0604 	addi	r2,r2,-1000
    55e4:	f800283a 	ret

000055e8 <__locale_cjk_lang>:
    55e8:	0005883a 	mov	r2,zero
    55ec:	f800283a 	ret

000055f0 <_localeconv_r>:
    55f0:	00800074 	movhi	r2,1
    55f4:	10bf1604 	addi	r2,r2,-936
    55f8:	f800283a 	ret

000055fc <setlocale>:
    55fc:	00800074 	movhi	r2,1
    5600:	1084a904 	addi	r2,r2,4772
    5604:	280d883a 	mov	r6,r5
    5608:	200b883a 	mov	r5,r4
    560c:	11000017 	ldw	r4,0(r2)
    5610:	00055441 	jmpi	5544 <_setlocale_r>

00005614 <localeconv>:
    5614:	00800074 	movhi	r2,1
    5618:	10bf1604 	addi	r2,r2,-936
    561c:	f800283a 	ret

00005620 <__smakebuf_r>:
    5620:	2880030b 	ldhu	r2,12(r5)
    5624:	10c0008c 	andi	r3,r2,2
    5628:	1800411e 	bne	r3,zero,5730 <__smakebuf_r+0x110>
    562c:	deffec04 	addi	sp,sp,-80
    5630:	dc000f15 	stw	r16,60(sp)
    5634:	2821883a 	mov	r16,r5
    5638:	2940038f 	ldh	r5,14(r5)
    563c:	dc401015 	stw	r17,64(sp)
    5640:	dfc01315 	stw	ra,76(sp)
    5644:	dcc01215 	stw	r19,72(sp)
    5648:	dc801115 	stw	r18,68(sp)
    564c:	2023883a 	mov	r17,r4
    5650:	28001c16 	blt	r5,zero,56c4 <__smakebuf_r+0xa4>
    5654:	d80d883a 	mov	r6,sp
    5658:	00097a40 	call	97a4 <_fstat_r>
    565c:	10001816 	blt	r2,zero,56c0 <__smakebuf_r+0xa0>
    5660:	d8800117 	ldw	r2,4(sp)
    5664:	00e00014 	movui	r3,32768
    5668:	10bc000c 	andi	r2,r2,61440
    566c:	14c80020 	cmpeqi	r19,r2,8192
    5670:	10c03726 	beq	r2,r3,5750 <__smakebuf_r+0x130>
    5674:	80c0030b 	ldhu	r3,12(r16)
    5678:	18c20014 	ori	r3,r3,2048
    567c:	80c0030d 	sth	r3,12(r16)
    5680:	00c80004 	movi	r3,8192
    5684:	10c0521e 	bne	r2,r3,57d0 <__smakebuf_r+0x1b0>
    5688:	8140038f 	ldh	r5,14(r16)
    568c:	8809883a 	mov	r4,r17
    5690:	00098000 	call	9800 <_isatty_r>
    5694:	10004c26 	beq	r2,zero,57c8 <__smakebuf_r+0x1a8>
    5698:	8080030b 	ldhu	r2,12(r16)
    569c:	80c010c4 	addi	r3,r16,67
    56a0:	80c00015 	stw	r3,0(r16)
    56a4:	10800054 	ori	r2,r2,1
    56a8:	8080030d 	sth	r2,12(r16)
    56ac:	00800044 	movi	r2,1
    56b0:	80c00415 	stw	r3,16(r16)
    56b4:	80800515 	stw	r2,20(r16)
    56b8:	04810004 	movi	r18,1024
    56bc:	00000706 	br	56dc <__smakebuf_r+0xbc>
    56c0:	8080030b 	ldhu	r2,12(r16)
    56c4:	10c0200c 	andi	r3,r2,128
    56c8:	18001f1e 	bne	r3,zero,5748 <__smakebuf_r+0x128>
    56cc:	04810004 	movi	r18,1024
    56d0:	10820014 	ori	r2,r2,2048
    56d4:	8080030d 	sth	r2,12(r16)
    56d8:	0027883a 	mov	r19,zero
    56dc:	900b883a 	mov	r5,r18
    56e0:	8809883a 	mov	r4,r17
    56e4:	00057dc0 	call	57dc <_malloc_r>
    56e8:	10002c26 	beq	r2,zero,579c <__smakebuf_r+0x17c>
    56ec:	80c0030b 	ldhu	r3,12(r16)
    56f0:	01000034 	movhi	r4,0
    56f4:	2111cd04 	addi	r4,r4,18228
    56f8:	89000f15 	stw	r4,60(r17)
    56fc:	18c02014 	ori	r3,r3,128
    5700:	80c0030d 	sth	r3,12(r16)
    5704:	80800015 	stw	r2,0(r16)
    5708:	80800415 	stw	r2,16(r16)
    570c:	84800515 	stw	r18,20(r16)
    5710:	98001a1e 	bne	r19,zero,577c <__smakebuf_r+0x15c>
    5714:	dfc01317 	ldw	ra,76(sp)
    5718:	dcc01217 	ldw	r19,72(sp)
    571c:	dc801117 	ldw	r18,68(sp)
    5720:	dc401017 	ldw	r17,64(sp)
    5724:	dc000f17 	ldw	r16,60(sp)
    5728:	dec01404 	addi	sp,sp,80
    572c:	f800283a 	ret
    5730:	288010c4 	addi	r2,r5,67
    5734:	28800015 	stw	r2,0(r5)
    5738:	28800415 	stw	r2,16(r5)
    573c:	00800044 	movi	r2,1
    5740:	28800515 	stw	r2,20(r5)
    5744:	f800283a 	ret
    5748:	04801004 	movi	r18,64
    574c:	003fe006 	br	56d0 <__alt_data_end+0xfffe56d0>
    5750:	81000a17 	ldw	r4,40(r16)
    5754:	00c00034 	movhi	r3,0
    5758:	18dee604 	addi	r3,r3,31640
    575c:	20ffc51e 	bne	r4,r3,5674 <__alt_data_end+0xfffe5674>
    5760:	8080030b 	ldhu	r2,12(r16)
    5764:	04810004 	movi	r18,1024
    5768:	84801315 	stw	r18,76(r16)
    576c:	1484b03a 	or	r2,r2,r18
    5770:	8080030d 	sth	r2,12(r16)
    5774:	0027883a 	mov	r19,zero
    5778:	003fd806 	br	56dc <__alt_data_end+0xfffe56dc>
    577c:	8140038f 	ldh	r5,14(r16)
    5780:	8809883a 	mov	r4,r17
    5784:	00098000 	call	9800 <_isatty_r>
    5788:	103fe226 	beq	r2,zero,5714 <__alt_data_end+0xfffe5714>
    578c:	8080030b 	ldhu	r2,12(r16)
    5790:	10800054 	ori	r2,r2,1
    5794:	8080030d 	sth	r2,12(r16)
    5798:	003fde06 	br	5714 <__alt_data_end+0xfffe5714>
    579c:	8080030b 	ldhu	r2,12(r16)
    57a0:	10c0800c 	andi	r3,r2,512
    57a4:	183fdb1e 	bne	r3,zero,5714 <__alt_data_end+0xfffe5714>
    57a8:	10800094 	ori	r2,r2,2
    57ac:	80c010c4 	addi	r3,r16,67
    57b0:	8080030d 	sth	r2,12(r16)
    57b4:	00800044 	movi	r2,1
    57b8:	80c00015 	stw	r3,0(r16)
    57bc:	80c00415 	stw	r3,16(r16)
    57c0:	80800515 	stw	r2,20(r16)
    57c4:	003fd306 	br	5714 <__alt_data_end+0xfffe5714>
    57c8:	04810004 	movi	r18,1024
    57cc:	003fc306 	br	56dc <__alt_data_end+0xfffe56dc>
    57d0:	0027883a 	mov	r19,zero
    57d4:	04810004 	movi	r18,1024
    57d8:	003fc006 	br	56dc <__alt_data_end+0xfffe56dc>

000057dc <_malloc_r>:
    57dc:	defff504 	addi	sp,sp,-44
    57e0:	dc800315 	stw	r18,12(sp)
    57e4:	dfc00a15 	stw	ra,40(sp)
    57e8:	df000915 	stw	fp,36(sp)
    57ec:	ddc00815 	stw	r23,32(sp)
    57f0:	dd800715 	stw	r22,28(sp)
    57f4:	dd400615 	stw	r21,24(sp)
    57f8:	dd000515 	stw	r20,20(sp)
    57fc:	dcc00415 	stw	r19,16(sp)
    5800:	dc400215 	stw	r17,8(sp)
    5804:	dc000115 	stw	r16,4(sp)
    5808:	288002c4 	addi	r2,r5,11
    580c:	00c00584 	movi	r3,22
    5810:	2025883a 	mov	r18,r4
    5814:	18807f2e 	bgeu	r3,r2,5a14 <_malloc_r+0x238>
    5818:	047ffe04 	movi	r17,-8
    581c:	1462703a 	and	r17,r2,r17
    5820:	8800a316 	blt	r17,zero,5ab0 <_malloc_r+0x2d4>
    5824:	8940a236 	bltu	r17,r5,5ab0 <_malloc_r+0x2d4>
    5828:	000d2e80 	call	d2e8 <__malloc_lock>
    582c:	00807dc4 	movi	r2,503
    5830:	1441e92e 	bgeu	r2,r17,5fd8 <_malloc_r+0x7fc>
    5834:	8804d27a 	srli	r2,r17,9
    5838:	1000a126 	beq	r2,zero,5ac0 <_malloc_r+0x2e4>
    583c:	00c00104 	movi	r3,4
    5840:	18811e36 	bltu	r3,r2,5cbc <_malloc_r+0x4e0>
    5844:	8804d1ba 	srli	r2,r17,6
    5848:	12000e44 	addi	r8,r2,57
    584c:	11c00e04 	addi	r7,r2,56
    5850:	4209883a 	add	r4,r8,r8
    5854:	04c00074 	movhi	r19,1
    5858:	2109883a 	add	r4,r4,r4
    585c:	9cff2404 	addi	r19,r19,-880
    5860:	2109883a 	add	r4,r4,r4
    5864:	9909883a 	add	r4,r19,r4
    5868:	24000117 	ldw	r16,4(r4)
    586c:	213ffe04 	addi	r4,r4,-8
    5870:	24009726 	beq	r4,r16,5ad0 <_malloc_r+0x2f4>
    5874:	80800117 	ldw	r2,4(r16)
    5878:	01bfff04 	movi	r6,-4
    587c:	014003c4 	movi	r5,15
    5880:	1184703a 	and	r2,r2,r6
    5884:	1447c83a 	sub	r3,r2,r17
    5888:	28c00716 	blt	r5,r3,58a8 <_malloc_r+0xcc>
    588c:	1800920e 	bge	r3,zero,5ad8 <_malloc_r+0x2fc>
    5890:	84000317 	ldw	r16,12(r16)
    5894:	24008e26 	beq	r4,r16,5ad0 <_malloc_r+0x2f4>
    5898:	80800117 	ldw	r2,4(r16)
    589c:	1184703a 	and	r2,r2,r6
    58a0:	1447c83a 	sub	r3,r2,r17
    58a4:	28fff90e 	bge	r5,r3,588c <__alt_data_end+0xfffe588c>
    58a8:	3809883a 	mov	r4,r7
    58ac:	01800074 	movhi	r6,1
    58b0:	9c000417 	ldw	r16,16(r19)
    58b4:	31bf2404 	addi	r6,r6,-880
    58b8:	32000204 	addi	r8,r6,8
    58bc:	82013426 	beq	r16,r8,5d90 <_malloc_r+0x5b4>
    58c0:	80c00117 	ldw	r3,4(r16)
    58c4:	00bfff04 	movi	r2,-4
    58c8:	188e703a 	and	r7,r3,r2
    58cc:	3c45c83a 	sub	r2,r7,r17
    58d0:	00c003c4 	movi	r3,15
    58d4:	18811f16 	blt	r3,r2,5d54 <_malloc_r+0x578>
    58d8:	32000515 	stw	r8,20(r6)
    58dc:	32000415 	stw	r8,16(r6)
    58e0:	10007f0e 	bge	r2,zero,5ae0 <_malloc_r+0x304>
    58e4:	00807fc4 	movi	r2,511
    58e8:	11c0fd36 	bltu	r2,r7,5ce0 <_malloc_r+0x504>
    58ec:	3806d0fa 	srli	r3,r7,3
    58f0:	01c00044 	movi	r7,1
    58f4:	30800117 	ldw	r2,4(r6)
    58f8:	19400044 	addi	r5,r3,1
    58fc:	294b883a 	add	r5,r5,r5
    5900:	1807d0ba 	srai	r3,r3,2
    5904:	294b883a 	add	r5,r5,r5
    5908:	294b883a 	add	r5,r5,r5
    590c:	298b883a 	add	r5,r5,r6
    5910:	38c6983a 	sll	r3,r7,r3
    5914:	29c00017 	ldw	r7,0(r5)
    5918:	2a7ffe04 	addi	r9,r5,-8
    591c:	1886b03a 	or	r3,r3,r2
    5920:	82400315 	stw	r9,12(r16)
    5924:	81c00215 	stw	r7,8(r16)
    5928:	30c00115 	stw	r3,4(r6)
    592c:	2c000015 	stw	r16,0(r5)
    5930:	3c000315 	stw	r16,12(r7)
    5934:	2005d0ba 	srai	r2,r4,2
    5938:	01400044 	movi	r5,1
    593c:	288a983a 	sll	r5,r5,r2
    5940:	19406f36 	bltu	r3,r5,5b00 <_malloc_r+0x324>
    5944:	28c4703a 	and	r2,r5,r3
    5948:	10000a1e 	bne	r2,zero,5974 <_malloc_r+0x198>
    594c:	00bfff04 	movi	r2,-4
    5950:	294b883a 	add	r5,r5,r5
    5954:	2088703a 	and	r4,r4,r2
    5958:	28c4703a 	and	r2,r5,r3
    595c:	21000104 	addi	r4,r4,4
    5960:	1000041e 	bne	r2,zero,5974 <_malloc_r+0x198>
    5964:	294b883a 	add	r5,r5,r5
    5968:	28c4703a 	and	r2,r5,r3
    596c:	21000104 	addi	r4,r4,4
    5970:	103ffc26 	beq	r2,zero,5964 <__alt_data_end+0xfffe5964>
    5974:	02bfff04 	movi	r10,-4
    5978:	024003c4 	movi	r9,15
    597c:	21800044 	addi	r6,r4,1
    5980:	318d883a 	add	r6,r6,r6
    5984:	318d883a 	add	r6,r6,r6
    5988:	318d883a 	add	r6,r6,r6
    598c:	998d883a 	add	r6,r19,r6
    5990:	333ffe04 	addi	r12,r6,-8
    5994:	2017883a 	mov	r11,r4
    5998:	31800104 	addi	r6,r6,4
    599c:	34000017 	ldw	r16,0(r6)
    59a0:	31fffd04 	addi	r7,r6,-12
    59a4:	81c0041e 	bne	r16,r7,59b8 <_malloc_r+0x1dc>
    59a8:	0000fb06 	br	5d98 <_malloc_r+0x5bc>
    59ac:	1801030e 	bge	r3,zero,5dbc <_malloc_r+0x5e0>
    59b0:	84000317 	ldw	r16,12(r16)
    59b4:	81c0f826 	beq	r16,r7,5d98 <_malloc_r+0x5bc>
    59b8:	80800117 	ldw	r2,4(r16)
    59bc:	1284703a 	and	r2,r2,r10
    59c0:	1447c83a 	sub	r3,r2,r17
    59c4:	48fff90e 	bge	r9,r3,59ac <__alt_data_end+0xfffe59ac>
    59c8:	80800317 	ldw	r2,12(r16)
    59cc:	81000217 	ldw	r4,8(r16)
    59d0:	89400054 	ori	r5,r17,1
    59d4:	81400115 	stw	r5,4(r16)
    59d8:	20800315 	stw	r2,12(r4)
    59dc:	11000215 	stw	r4,8(r2)
    59e0:	8463883a 	add	r17,r16,r17
    59e4:	9c400515 	stw	r17,20(r19)
    59e8:	9c400415 	stw	r17,16(r19)
    59ec:	18800054 	ori	r2,r3,1
    59f0:	88800115 	stw	r2,4(r17)
    59f4:	8a000315 	stw	r8,12(r17)
    59f8:	8a000215 	stw	r8,8(r17)
    59fc:	88e3883a 	add	r17,r17,r3
    5a00:	88c00015 	stw	r3,0(r17)
    5a04:	9009883a 	mov	r4,r18
    5a08:	000d30c0 	call	d30c <__malloc_unlock>
    5a0c:	80800204 	addi	r2,r16,8
    5a10:	00001b06 	br	5a80 <_malloc_r+0x2a4>
    5a14:	04400404 	movi	r17,16
    5a18:	89402536 	bltu	r17,r5,5ab0 <_malloc_r+0x2d4>
    5a1c:	000d2e80 	call	d2e8 <__malloc_lock>
    5a20:	00800184 	movi	r2,6
    5a24:	01000084 	movi	r4,2
    5a28:	04c00074 	movhi	r19,1
    5a2c:	1085883a 	add	r2,r2,r2
    5a30:	9cff2404 	addi	r19,r19,-880
    5a34:	1085883a 	add	r2,r2,r2
    5a38:	9885883a 	add	r2,r19,r2
    5a3c:	14000117 	ldw	r16,4(r2)
    5a40:	10fffe04 	addi	r3,r2,-8
    5a44:	80c0d926 	beq	r16,r3,5dac <_malloc_r+0x5d0>
    5a48:	80c00117 	ldw	r3,4(r16)
    5a4c:	81000317 	ldw	r4,12(r16)
    5a50:	00bfff04 	movi	r2,-4
    5a54:	1884703a 	and	r2,r3,r2
    5a58:	81400217 	ldw	r5,8(r16)
    5a5c:	8085883a 	add	r2,r16,r2
    5a60:	10c00117 	ldw	r3,4(r2)
    5a64:	29000315 	stw	r4,12(r5)
    5a68:	21400215 	stw	r5,8(r4)
    5a6c:	18c00054 	ori	r3,r3,1
    5a70:	10c00115 	stw	r3,4(r2)
    5a74:	9009883a 	mov	r4,r18
    5a78:	000d30c0 	call	d30c <__malloc_unlock>
    5a7c:	80800204 	addi	r2,r16,8
    5a80:	dfc00a17 	ldw	ra,40(sp)
    5a84:	df000917 	ldw	fp,36(sp)
    5a88:	ddc00817 	ldw	r23,32(sp)
    5a8c:	dd800717 	ldw	r22,28(sp)
    5a90:	dd400617 	ldw	r21,24(sp)
    5a94:	dd000517 	ldw	r20,20(sp)
    5a98:	dcc00417 	ldw	r19,16(sp)
    5a9c:	dc800317 	ldw	r18,12(sp)
    5aa0:	dc400217 	ldw	r17,8(sp)
    5aa4:	dc000117 	ldw	r16,4(sp)
    5aa8:	dec00b04 	addi	sp,sp,44
    5aac:	f800283a 	ret
    5ab0:	00800304 	movi	r2,12
    5ab4:	90800015 	stw	r2,0(r18)
    5ab8:	0005883a 	mov	r2,zero
    5abc:	003ff006 	br	5a80 <__alt_data_end+0xfffe5a80>
    5ac0:	01002004 	movi	r4,128
    5ac4:	02001004 	movi	r8,64
    5ac8:	01c00fc4 	movi	r7,63
    5acc:	003f6106 	br	5854 <__alt_data_end+0xfffe5854>
    5ad0:	4009883a 	mov	r4,r8
    5ad4:	003f7506 	br	58ac <__alt_data_end+0xfffe58ac>
    5ad8:	81000317 	ldw	r4,12(r16)
    5adc:	003fde06 	br	5a58 <__alt_data_end+0xfffe5a58>
    5ae0:	81c5883a 	add	r2,r16,r7
    5ae4:	11400117 	ldw	r5,4(r2)
    5ae8:	9009883a 	mov	r4,r18
    5aec:	29400054 	ori	r5,r5,1
    5af0:	11400115 	stw	r5,4(r2)
    5af4:	000d30c0 	call	d30c <__malloc_unlock>
    5af8:	80800204 	addi	r2,r16,8
    5afc:	003fe006 	br	5a80 <__alt_data_end+0xfffe5a80>
    5b00:	9c000217 	ldw	r16,8(r19)
    5b04:	00bfff04 	movi	r2,-4
    5b08:	85800117 	ldw	r22,4(r16)
    5b0c:	b0ac703a 	and	r22,r22,r2
    5b10:	b4400336 	bltu	r22,r17,5b20 <_malloc_r+0x344>
    5b14:	b445c83a 	sub	r2,r22,r17
    5b18:	00c003c4 	movi	r3,15
    5b1c:	18805d16 	blt	r3,r2,5c94 <_malloc_r+0x4b8>
    5b20:	05c00074 	movhi	r23,1
    5b24:	00800074 	movhi	r2,1
    5b28:	108b7804 	addi	r2,r2,11744
    5b2c:	bdc4ab04 	addi	r23,r23,4780
    5b30:	15400017 	ldw	r21,0(r2)
    5b34:	b8c00017 	ldw	r3,0(r23)
    5b38:	00bfffc4 	movi	r2,-1
    5b3c:	858d883a 	add	r6,r16,r22
    5b40:	8d6b883a 	add	r21,r17,r21
    5b44:	1880ea26 	beq	r3,r2,5ef0 <_malloc_r+0x714>
    5b48:	ad4403c4 	addi	r21,r21,4111
    5b4c:	00bc0004 	movi	r2,-4096
    5b50:	a8aa703a 	and	r21,r21,r2
    5b54:	a80b883a 	mov	r5,r21
    5b58:	9009883a 	mov	r4,r18
    5b5c:	d9800015 	stw	r6,0(sp)
    5b60:	0007a6c0 	call	7a6c <_sbrk_r>
    5b64:	1029883a 	mov	r20,r2
    5b68:	00bfffc4 	movi	r2,-1
    5b6c:	d9800017 	ldw	r6,0(sp)
    5b70:	a080e826 	beq	r20,r2,5f14 <_malloc_r+0x738>
    5b74:	a180a636 	bltu	r20,r6,5e10 <_malloc_r+0x634>
    5b78:	07000074 	movhi	fp,1
    5b7c:	e70b8004 	addi	fp,fp,11776
    5b80:	e0800017 	ldw	r2,0(fp)
    5b84:	a887883a 	add	r3,r21,r2
    5b88:	e0c00015 	stw	r3,0(fp)
    5b8c:	3500e626 	beq	r6,r20,5f28 <_malloc_r+0x74c>
    5b90:	b9000017 	ldw	r4,0(r23)
    5b94:	00bfffc4 	movi	r2,-1
    5b98:	2080ee26 	beq	r4,r2,5f54 <_malloc_r+0x778>
    5b9c:	a185c83a 	sub	r2,r20,r6
    5ba0:	10c5883a 	add	r2,r2,r3
    5ba4:	e0800015 	stw	r2,0(fp)
    5ba8:	a0c001cc 	andi	r3,r20,7
    5bac:	1800bc26 	beq	r3,zero,5ea0 <_malloc_r+0x6c4>
    5bb0:	a0e9c83a 	sub	r20,r20,r3
    5bb4:	00840204 	movi	r2,4104
    5bb8:	a5000204 	addi	r20,r20,8
    5bbc:	10c7c83a 	sub	r3,r2,r3
    5bc0:	a545883a 	add	r2,r20,r21
    5bc4:	1083ffcc 	andi	r2,r2,4095
    5bc8:	18abc83a 	sub	r21,r3,r2
    5bcc:	a80b883a 	mov	r5,r21
    5bd0:	9009883a 	mov	r4,r18
    5bd4:	0007a6c0 	call	7a6c <_sbrk_r>
    5bd8:	00ffffc4 	movi	r3,-1
    5bdc:	10c0e126 	beq	r2,r3,5f64 <_malloc_r+0x788>
    5be0:	1505c83a 	sub	r2,r2,r20
    5be4:	1545883a 	add	r2,r2,r21
    5be8:	10800054 	ori	r2,r2,1
    5bec:	e0c00017 	ldw	r3,0(fp)
    5bf0:	9d000215 	stw	r20,8(r19)
    5bf4:	a0800115 	stw	r2,4(r20)
    5bf8:	a8c7883a 	add	r3,r21,r3
    5bfc:	e0c00015 	stw	r3,0(fp)
    5c00:	84c00e26 	beq	r16,r19,5c3c <_malloc_r+0x460>
    5c04:	018003c4 	movi	r6,15
    5c08:	3580a72e 	bgeu	r6,r22,5ea8 <_malloc_r+0x6cc>
    5c0c:	81400117 	ldw	r5,4(r16)
    5c10:	013ffe04 	movi	r4,-8
    5c14:	b0bffd04 	addi	r2,r22,-12
    5c18:	1104703a 	and	r2,r2,r4
    5c1c:	2900004c 	andi	r4,r5,1
    5c20:	2088b03a 	or	r4,r4,r2
    5c24:	81000115 	stw	r4,4(r16)
    5c28:	01400144 	movi	r5,5
    5c2c:	8089883a 	add	r4,r16,r2
    5c30:	21400115 	stw	r5,4(r4)
    5c34:	21400215 	stw	r5,8(r4)
    5c38:	3080cd36 	bltu	r6,r2,5f70 <_malloc_r+0x794>
    5c3c:	00800074 	movhi	r2,1
    5c40:	108b7704 	addi	r2,r2,11740
    5c44:	11000017 	ldw	r4,0(r2)
    5c48:	20c0012e 	bgeu	r4,r3,5c50 <_malloc_r+0x474>
    5c4c:	10c00015 	stw	r3,0(r2)
    5c50:	00800074 	movhi	r2,1
    5c54:	108b7604 	addi	r2,r2,11736
    5c58:	11000017 	ldw	r4,0(r2)
    5c5c:	9c000217 	ldw	r16,8(r19)
    5c60:	20c0012e 	bgeu	r4,r3,5c68 <_malloc_r+0x48c>
    5c64:	10c00015 	stw	r3,0(r2)
    5c68:	80c00117 	ldw	r3,4(r16)
    5c6c:	00bfff04 	movi	r2,-4
    5c70:	1886703a 	and	r3,r3,r2
    5c74:	1c45c83a 	sub	r2,r3,r17
    5c78:	1c400236 	bltu	r3,r17,5c84 <_malloc_r+0x4a8>
    5c7c:	00c003c4 	movi	r3,15
    5c80:	18800416 	blt	r3,r2,5c94 <_malloc_r+0x4b8>
    5c84:	9009883a 	mov	r4,r18
    5c88:	000d30c0 	call	d30c <__malloc_unlock>
    5c8c:	0005883a 	mov	r2,zero
    5c90:	003f7b06 	br	5a80 <__alt_data_end+0xfffe5a80>
    5c94:	88c00054 	ori	r3,r17,1
    5c98:	80c00115 	stw	r3,4(r16)
    5c9c:	8463883a 	add	r17,r16,r17
    5ca0:	10800054 	ori	r2,r2,1
    5ca4:	9c400215 	stw	r17,8(r19)
    5ca8:	88800115 	stw	r2,4(r17)
    5cac:	9009883a 	mov	r4,r18
    5cb0:	000d30c0 	call	d30c <__malloc_unlock>
    5cb4:	80800204 	addi	r2,r16,8
    5cb8:	003f7106 	br	5a80 <__alt_data_end+0xfffe5a80>
    5cbc:	00c00504 	movi	r3,20
    5cc0:	18804a2e 	bgeu	r3,r2,5dec <_malloc_r+0x610>
    5cc4:	00c01504 	movi	r3,84
    5cc8:	18806e36 	bltu	r3,r2,5e84 <_malloc_r+0x6a8>
    5ccc:	8804d33a 	srli	r2,r17,12
    5cd0:	12001bc4 	addi	r8,r2,111
    5cd4:	11c01b84 	addi	r7,r2,110
    5cd8:	4209883a 	add	r4,r8,r8
    5cdc:	003edd06 	br	5854 <__alt_data_end+0xfffe5854>
    5ce0:	3804d27a 	srli	r2,r7,9
    5ce4:	00c00104 	movi	r3,4
    5ce8:	1880442e 	bgeu	r3,r2,5dfc <_malloc_r+0x620>
    5cec:	00c00504 	movi	r3,20
    5cf0:	18808136 	bltu	r3,r2,5ef8 <_malloc_r+0x71c>
    5cf4:	11401704 	addi	r5,r2,92
    5cf8:	10c016c4 	addi	r3,r2,91
    5cfc:	294b883a 	add	r5,r5,r5
    5d00:	294b883a 	add	r5,r5,r5
    5d04:	294b883a 	add	r5,r5,r5
    5d08:	994b883a 	add	r5,r19,r5
    5d0c:	28800017 	ldw	r2,0(r5)
    5d10:	01800074 	movhi	r6,1
    5d14:	297ffe04 	addi	r5,r5,-8
    5d18:	31bf2404 	addi	r6,r6,-880
    5d1c:	28806526 	beq	r5,r2,5eb4 <_malloc_r+0x6d8>
    5d20:	01bfff04 	movi	r6,-4
    5d24:	10c00117 	ldw	r3,4(r2)
    5d28:	1986703a 	and	r3,r3,r6
    5d2c:	38c0022e 	bgeu	r7,r3,5d38 <_malloc_r+0x55c>
    5d30:	10800217 	ldw	r2,8(r2)
    5d34:	28bffb1e 	bne	r5,r2,5d24 <__alt_data_end+0xfffe5d24>
    5d38:	11400317 	ldw	r5,12(r2)
    5d3c:	98c00117 	ldw	r3,4(r19)
    5d40:	81400315 	stw	r5,12(r16)
    5d44:	80800215 	stw	r2,8(r16)
    5d48:	2c000215 	stw	r16,8(r5)
    5d4c:	14000315 	stw	r16,12(r2)
    5d50:	003ef806 	br	5934 <__alt_data_end+0xfffe5934>
    5d54:	88c00054 	ori	r3,r17,1
    5d58:	80c00115 	stw	r3,4(r16)
    5d5c:	8463883a 	add	r17,r16,r17
    5d60:	34400515 	stw	r17,20(r6)
    5d64:	34400415 	stw	r17,16(r6)
    5d68:	10c00054 	ori	r3,r2,1
    5d6c:	8a000315 	stw	r8,12(r17)
    5d70:	8a000215 	stw	r8,8(r17)
    5d74:	88c00115 	stw	r3,4(r17)
    5d78:	88a3883a 	add	r17,r17,r2
    5d7c:	88800015 	stw	r2,0(r17)
    5d80:	9009883a 	mov	r4,r18
    5d84:	000d30c0 	call	d30c <__malloc_unlock>
    5d88:	80800204 	addi	r2,r16,8
    5d8c:	003f3c06 	br	5a80 <__alt_data_end+0xfffe5a80>
    5d90:	30c00117 	ldw	r3,4(r6)
    5d94:	003ee706 	br	5934 <__alt_data_end+0xfffe5934>
    5d98:	5ac00044 	addi	r11,r11,1
    5d9c:	588000cc 	andi	r2,r11,3
    5da0:	31800204 	addi	r6,r6,8
    5da4:	103efd1e 	bne	r2,zero,599c <__alt_data_end+0xfffe599c>
    5da8:	00002406 	br	5e3c <_malloc_r+0x660>
    5dac:	14000317 	ldw	r16,12(r2)
    5db0:	143f251e 	bne	r2,r16,5a48 <__alt_data_end+0xfffe5a48>
    5db4:	21000084 	addi	r4,r4,2
    5db8:	003ebc06 	br	58ac <__alt_data_end+0xfffe58ac>
    5dbc:	8085883a 	add	r2,r16,r2
    5dc0:	10c00117 	ldw	r3,4(r2)
    5dc4:	81000317 	ldw	r4,12(r16)
    5dc8:	81400217 	ldw	r5,8(r16)
    5dcc:	18c00054 	ori	r3,r3,1
    5dd0:	10c00115 	stw	r3,4(r2)
    5dd4:	29000315 	stw	r4,12(r5)
    5dd8:	21400215 	stw	r5,8(r4)
    5ddc:	9009883a 	mov	r4,r18
    5de0:	000d30c0 	call	d30c <__malloc_unlock>
    5de4:	80800204 	addi	r2,r16,8
    5de8:	003f2506 	br	5a80 <__alt_data_end+0xfffe5a80>
    5dec:	12001704 	addi	r8,r2,92
    5df0:	11c016c4 	addi	r7,r2,91
    5df4:	4209883a 	add	r4,r8,r8
    5df8:	003e9606 	br	5854 <__alt_data_end+0xfffe5854>
    5dfc:	3804d1ba 	srli	r2,r7,6
    5e00:	11400e44 	addi	r5,r2,57
    5e04:	10c00e04 	addi	r3,r2,56
    5e08:	294b883a 	add	r5,r5,r5
    5e0c:	003fbc06 	br	5d00 <__alt_data_end+0xfffe5d00>
    5e10:	84ff5926 	beq	r16,r19,5b78 <__alt_data_end+0xfffe5b78>
    5e14:	00800074 	movhi	r2,1
    5e18:	10bf2404 	addi	r2,r2,-880
    5e1c:	14000217 	ldw	r16,8(r2)
    5e20:	00bfff04 	movi	r2,-4
    5e24:	80c00117 	ldw	r3,4(r16)
    5e28:	1886703a 	and	r3,r3,r2
    5e2c:	003f9106 	br	5c74 <__alt_data_end+0xfffe5c74>
    5e30:	60800217 	ldw	r2,8(r12)
    5e34:	213fffc4 	addi	r4,r4,-1
    5e38:	1300651e 	bne	r2,r12,5fd0 <_malloc_r+0x7f4>
    5e3c:	208000cc 	andi	r2,r4,3
    5e40:	633ffe04 	addi	r12,r12,-8
    5e44:	103ffa1e 	bne	r2,zero,5e30 <__alt_data_end+0xfffe5e30>
    5e48:	98800117 	ldw	r2,4(r19)
    5e4c:	0146303a 	nor	r3,zero,r5
    5e50:	1884703a 	and	r2,r3,r2
    5e54:	98800115 	stw	r2,4(r19)
    5e58:	294b883a 	add	r5,r5,r5
    5e5c:	117f2836 	bltu	r2,r5,5b00 <__alt_data_end+0xfffe5b00>
    5e60:	283f2726 	beq	r5,zero,5b00 <__alt_data_end+0xfffe5b00>
    5e64:	2886703a 	and	r3,r5,r2
    5e68:	5809883a 	mov	r4,r11
    5e6c:	183ec31e 	bne	r3,zero,597c <__alt_data_end+0xfffe597c>
    5e70:	294b883a 	add	r5,r5,r5
    5e74:	2886703a 	and	r3,r5,r2
    5e78:	21000104 	addi	r4,r4,4
    5e7c:	183ffc26 	beq	r3,zero,5e70 <__alt_data_end+0xfffe5e70>
    5e80:	003ebe06 	br	597c <__alt_data_end+0xfffe597c>
    5e84:	00c05504 	movi	r3,340
    5e88:	18801236 	bltu	r3,r2,5ed4 <_malloc_r+0x6f8>
    5e8c:	8804d3fa 	srli	r2,r17,15
    5e90:	12001e04 	addi	r8,r2,120
    5e94:	11c01dc4 	addi	r7,r2,119
    5e98:	4209883a 	add	r4,r8,r8
    5e9c:	003e6d06 	br	5854 <__alt_data_end+0xfffe5854>
    5ea0:	00c40004 	movi	r3,4096
    5ea4:	003f4606 	br	5bc0 <__alt_data_end+0xfffe5bc0>
    5ea8:	00800044 	movi	r2,1
    5eac:	a0800115 	stw	r2,4(r20)
    5eb0:	003f7406 	br	5c84 <__alt_data_end+0xfffe5c84>
    5eb4:	1805d0ba 	srai	r2,r3,2
    5eb8:	01c00044 	movi	r7,1
    5ebc:	30c00117 	ldw	r3,4(r6)
    5ec0:	388e983a 	sll	r7,r7,r2
    5ec4:	2805883a 	mov	r2,r5
    5ec8:	38c6b03a 	or	r3,r7,r3
    5ecc:	30c00115 	stw	r3,4(r6)
    5ed0:	003f9b06 	br	5d40 <__alt_data_end+0xfffe5d40>
    5ed4:	00c15504 	movi	r3,1364
    5ed8:	18801a36 	bltu	r3,r2,5f44 <_malloc_r+0x768>
    5edc:	8804d4ba 	srli	r2,r17,18
    5ee0:	12001f44 	addi	r8,r2,125
    5ee4:	11c01f04 	addi	r7,r2,124
    5ee8:	4209883a 	add	r4,r8,r8
    5eec:	003e5906 	br	5854 <__alt_data_end+0xfffe5854>
    5ef0:	ad400404 	addi	r21,r21,16
    5ef4:	003f1706 	br	5b54 <__alt_data_end+0xfffe5b54>
    5ef8:	00c01504 	movi	r3,84
    5efc:	18802336 	bltu	r3,r2,5f8c <_malloc_r+0x7b0>
    5f00:	3804d33a 	srli	r2,r7,12
    5f04:	11401bc4 	addi	r5,r2,111
    5f08:	10c01b84 	addi	r3,r2,110
    5f0c:	294b883a 	add	r5,r5,r5
    5f10:	003f7b06 	br	5d00 <__alt_data_end+0xfffe5d00>
    5f14:	9c000217 	ldw	r16,8(r19)
    5f18:	00bfff04 	movi	r2,-4
    5f1c:	80c00117 	ldw	r3,4(r16)
    5f20:	1886703a 	and	r3,r3,r2
    5f24:	003f5306 	br	5c74 <__alt_data_end+0xfffe5c74>
    5f28:	3083ffcc 	andi	r2,r6,4095
    5f2c:	103f181e 	bne	r2,zero,5b90 <__alt_data_end+0xfffe5b90>
    5f30:	99000217 	ldw	r4,8(r19)
    5f34:	b545883a 	add	r2,r22,r21
    5f38:	10800054 	ori	r2,r2,1
    5f3c:	20800115 	stw	r2,4(r4)
    5f40:	003f3e06 	br	5c3c <__alt_data_end+0xfffe5c3c>
    5f44:	01003f84 	movi	r4,254
    5f48:	02001fc4 	movi	r8,127
    5f4c:	01c01f84 	movi	r7,126
    5f50:	003e4006 	br	5854 <__alt_data_end+0xfffe5854>
    5f54:	00800074 	movhi	r2,1
    5f58:	1084ab04 	addi	r2,r2,4780
    5f5c:	15000015 	stw	r20,0(r2)
    5f60:	003f1106 	br	5ba8 <__alt_data_end+0xfffe5ba8>
    5f64:	00800044 	movi	r2,1
    5f68:	002b883a 	mov	r21,zero
    5f6c:	003f1f06 	br	5bec <__alt_data_end+0xfffe5bec>
    5f70:	81400204 	addi	r5,r16,8
    5f74:	9009883a 	mov	r4,r18
    5f78:	0004bf00 	call	4bf0 <_free_r>
    5f7c:	00800074 	movhi	r2,1
    5f80:	108b8004 	addi	r2,r2,11776
    5f84:	10c00017 	ldw	r3,0(r2)
    5f88:	003f2c06 	br	5c3c <__alt_data_end+0xfffe5c3c>
    5f8c:	00c05504 	movi	r3,340
    5f90:	18800536 	bltu	r3,r2,5fa8 <_malloc_r+0x7cc>
    5f94:	3804d3fa 	srli	r2,r7,15
    5f98:	11401e04 	addi	r5,r2,120
    5f9c:	10c01dc4 	addi	r3,r2,119
    5fa0:	294b883a 	add	r5,r5,r5
    5fa4:	003f5606 	br	5d00 <__alt_data_end+0xfffe5d00>
    5fa8:	00c15504 	movi	r3,1364
    5fac:	18800536 	bltu	r3,r2,5fc4 <_malloc_r+0x7e8>
    5fb0:	3804d4ba 	srli	r2,r7,18
    5fb4:	11401f44 	addi	r5,r2,125
    5fb8:	10c01f04 	addi	r3,r2,124
    5fbc:	294b883a 	add	r5,r5,r5
    5fc0:	003f4f06 	br	5d00 <__alt_data_end+0xfffe5d00>
    5fc4:	01403f84 	movi	r5,254
    5fc8:	00c01f84 	movi	r3,126
    5fcc:	003f4c06 	br	5d00 <__alt_data_end+0xfffe5d00>
    5fd0:	98800117 	ldw	r2,4(r19)
    5fd4:	003fa006 	br	5e58 <__alt_data_end+0xfffe5e58>
    5fd8:	8808d0fa 	srli	r4,r17,3
    5fdc:	20800044 	addi	r2,r4,1
    5fe0:	1085883a 	add	r2,r2,r2
    5fe4:	003e9006 	br	5a28 <__alt_data_end+0xfffe5a28>

00005fe8 <memchr>:
    5fe8:	208000cc 	andi	r2,r4,3
    5fec:	280f883a 	mov	r7,r5
    5ff0:	10003426 	beq	r2,zero,60c4 <memchr+0xdc>
    5ff4:	30bfffc4 	addi	r2,r6,-1
    5ff8:	30001a26 	beq	r6,zero,6064 <memchr+0x7c>
    5ffc:	20c00003 	ldbu	r3,0(r4)
    6000:	29803fcc 	andi	r6,r5,255
    6004:	30c0051e 	bne	r6,r3,601c <memchr+0x34>
    6008:	00001806 	br	606c <memchr+0x84>
    600c:	10001526 	beq	r2,zero,6064 <memchr+0x7c>
    6010:	20c00003 	ldbu	r3,0(r4)
    6014:	10bfffc4 	addi	r2,r2,-1
    6018:	30c01426 	beq	r6,r3,606c <memchr+0x84>
    601c:	21000044 	addi	r4,r4,1
    6020:	20c000cc 	andi	r3,r4,3
    6024:	183ff91e 	bne	r3,zero,600c <__alt_data_end+0xfffe600c>
    6028:	020000c4 	movi	r8,3
    602c:	40801136 	bltu	r8,r2,6074 <memchr+0x8c>
    6030:	10000c26 	beq	r2,zero,6064 <memchr+0x7c>
    6034:	20c00003 	ldbu	r3,0(r4)
    6038:	29403fcc 	andi	r5,r5,255
    603c:	28c00b26 	beq	r5,r3,606c <memchr+0x84>
    6040:	20c00044 	addi	r3,r4,1
    6044:	39803fcc 	andi	r6,r7,255
    6048:	2089883a 	add	r4,r4,r2
    604c:	00000306 	br	605c <memchr+0x74>
    6050:	18c00044 	addi	r3,r3,1
    6054:	197fffc3 	ldbu	r5,-1(r3)
    6058:	31400526 	beq	r6,r5,6070 <memchr+0x88>
    605c:	1805883a 	mov	r2,r3
    6060:	20fffb1e 	bne	r4,r3,6050 <__alt_data_end+0xfffe6050>
    6064:	0005883a 	mov	r2,zero
    6068:	f800283a 	ret
    606c:	2005883a 	mov	r2,r4
    6070:	f800283a 	ret
    6074:	28c03fcc 	andi	r3,r5,255
    6078:	1812923a 	slli	r9,r3,8
    607c:	02ffbff4 	movhi	r11,65279
    6080:	02a02074 	movhi	r10,32897
    6084:	48d2b03a 	or	r9,r9,r3
    6088:	4806943a 	slli	r3,r9,16
    608c:	5affbfc4 	addi	r11,r11,-257
    6090:	52a02004 	addi	r10,r10,-32640
    6094:	48d2b03a 	or	r9,r9,r3
    6098:	20c00017 	ldw	r3,0(r4)
    609c:	48c6f03a 	xor	r3,r9,r3
    60a0:	1acd883a 	add	r6,r3,r11
    60a4:	00c6303a 	nor	r3,zero,r3
    60a8:	30c6703a 	and	r3,r6,r3
    60ac:	1a86703a 	and	r3,r3,r10
    60b0:	183fe01e 	bne	r3,zero,6034 <__alt_data_end+0xfffe6034>
    60b4:	10bfff04 	addi	r2,r2,-4
    60b8:	21000104 	addi	r4,r4,4
    60bc:	40bff636 	bltu	r8,r2,6098 <__alt_data_end+0xfffe6098>
    60c0:	003fdb06 	br	6030 <__alt_data_end+0xfffe6030>
    60c4:	3005883a 	mov	r2,r6
    60c8:	003fd706 	br	6028 <__alt_data_end+0xfffe6028>

000060cc <memcpy>:
    60cc:	defffd04 	addi	sp,sp,-12
    60d0:	dfc00215 	stw	ra,8(sp)
    60d4:	dc400115 	stw	r17,4(sp)
    60d8:	dc000015 	stw	r16,0(sp)
    60dc:	00c003c4 	movi	r3,15
    60e0:	2005883a 	mov	r2,r4
    60e4:	1980452e 	bgeu	r3,r6,61fc <memcpy+0x130>
    60e8:	2906b03a 	or	r3,r5,r4
    60ec:	18c000cc 	andi	r3,r3,3
    60f0:	1800441e 	bne	r3,zero,6204 <memcpy+0x138>
    60f4:	347ffc04 	addi	r17,r6,-16
    60f8:	8822d13a 	srli	r17,r17,4
    60fc:	28c00104 	addi	r3,r5,4
    6100:	23400104 	addi	r13,r4,4
    6104:	8820913a 	slli	r16,r17,4
    6108:	2b000204 	addi	r12,r5,8
    610c:	22c00204 	addi	r11,r4,8
    6110:	84000504 	addi	r16,r16,20
    6114:	2a800304 	addi	r10,r5,12
    6118:	22400304 	addi	r9,r4,12
    611c:	2c21883a 	add	r16,r5,r16
    6120:	2811883a 	mov	r8,r5
    6124:	200f883a 	mov	r7,r4
    6128:	41000017 	ldw	r4,0(r8)
    612c:	1fc00017 	ldw	ra,0(r3)
    6130:	63c00017 	ldw	r15,0(r12)
    6134:	39000015 	stw	r4,0(r7)
    6138:	53800017 	ldw	r14,0(r10)
    613c:	6fc00015 	stw	ra,0(r13)
    6140:	5bc00015 	stw	r15,0(r11)
    6144:	4b800015 	stw	r14,0(r9)
    6148:	18c00404 	addi	r3,r3,16
    614c:	39c00404 	addi	r7,r7,16
    6150:	42000404 	addi	r8,r8,16
    6154:	6b400404 	addi	r13,r13,16
    6158:	63000404 	addi	r12,r12,16
    615c:	5ac00404 	addi	r11,r11,16
    6160:	52800404 	addi	r10,r10,16
    6164:	4a400404 	addi	r9,r9,16
    6168:	1c3fef1e 	bne	r3,r16,6128 <__alt_data_end+0xfffe6128>
    616c:	89c00044 	addi	r7,r17,1
    6170:	380e913a 	slli	r7,r7,4
    6174:	310003cc 	andi	r4,r6,15
    6178:	02c000c4 	movi	r11,3
    617c:	11c7883a 	add	r3,r2,r7
    6180:	29cb883a 	add	r5,r5,r7
    6184:	5900212e 	bgeu	r11,r4,620c <memcpy+0x140>
    6188:	1813883a 	mov	r9,r3
    618c:	2811883a 	mov	r8,r5
    6190:	200f883a 	mov	r7,r4
    6194:	42800017 	ldw	r10,0(r8)
    6198:	4a400104 	addi	r9,r9,4
    619c:	39ffff04 	addi	r7,r7,-4
    61a0:	4abfff15 	stw	r10,-4(r9)
    61a4:	42000104 	addi	r8,r8,4
    61a8:	59fffa36 	bltu	r11,r7,6194 <__alt_data_end+0xfffe6194>
    61ac:	213fff04 	addi	r4,r4,-4
    61b0:	2008d0ba 	srli	r4,r4,2
    61b4:	318000cc 	andi	r6,r6,3
    61b8:	21000044 	addi	r4,r4,1
    61bc:	2109883a 	add	r4,r4,r4
    61c0:	2109883a 	add	r4,r4,r4
    61c4:	1907883a 	add	r3,r3,r4
    61c8:	290b883a 	add	r5,r5,r4
    61cc:	30000626 	beq	r6,zero,61e8 <memcpy+0x11c>
    61d0:	198d883a 	add	r6,r3,r6
    61d4:	29c00003 	ldbu	r7,0(r5)
    61d8:	18c00044 	addi	r3,r3,1
    61dc:	29400044 	addi	r5,r5,1
    61e0:	19ffffc5 	stb	r7,-1(r3)
    61e4:	19bffb1e 	bne	r3,r6,61d4 <__alt_data_end+0xfffe61d4>
    61e8:	dfc00217 	ldw	ra,8(sp)
    61ec:	dc400117 	ldw	r17,4(sp)
    61f0:	dc000017 	ldw	r16,0(sp)
    61f4:	dec00304 	addi	sp,sp,12
    61f8:	f800283a 	ret
    61fc:	2007883a 	mov	r3,r4
    6200:	003ff206 	br	61cc <__alt_data_end+0xfffe61cc>
    6204:	2007883a 	mov	r3,r4
    6208:	003ff106 	br	61d0 <__alt_data_end+0xfffe61d0>
    620c:	200d883a 	mov	r6,r4
    6210:	003fee06 	br	61cc <__alt_data_end+0xfffe61cc>

00006214 <memmove>:
    6214:	2005883a 	mov	r2,r4
    6218:	29000b2e 	bgeu	r5,r4,6248 <memmove+0x34>
    621c:	298f883a 	add	r7,r5,r6
    6220:	21c0092e 	bgeu	r4,r7,6248 <memmove+0x34>
    6224:	2187883a 	add	r3,r4,r6
    6228:	198bc83a 	sub	r5,r3,r6
    622c:	30004826 	beq	r6,zero,6350 <memmove+0x13c>
    6230:	39ffffc4 	addi	r7,r7,-1
    6234:	39000003 	ldbu	r4,0(r7)
    6238:	18ffffc4 	addi	r3,r3,-1
    623c:	19000005 	stb	r4,0(r3)
    6240:	28fffb1e 	bne	r5,r3,6230 <__alt_data_end+0xfffe6230>
    6244:	f800283a 	ret
    6248:	00c003c4 	movi	r3,15
    624c:	1980412e 	bgeu	r3,r6,6354 <memmove+0x140>
    6250:	2886b03a 	or	r3,r5,r2
    6254:	18c000cc 	andi	r3,r3,3
    6258:	1800401e 	bne	r3,zero,635c <memmove+0x148>
    625c:	33fffc04 	addi	r15,r6,-16
    6260:	781ed13a 	srli	r15,r15,4
    6264:	28c00104 	addi	r3,r5,4
    6268:	13400104 	addi	r13,r2,4
    626c:	781c913a 	slli	r14,r15,4
    6270:	2b000204 	addi	r12,r5,8
    6274:	12c00204 	addi	r11,r2,8
    6278:	73800504 	addi	r14,r14,20
    627c:	2a800304 	addi	r10,r5,12
    6280:	12400304 	addi	r9,r2,12
    6284:	2b9d883a 	add	r14,r5,r14
    6288:	2811883a 	mov	r8,r5
    628c:	100f883a 	mov	r7,r2
    6290:	41000017 	ldw	r4,0(r8)
    6294:	39c00404 	addi	r7,r7,16
    6298:	18c00404 	addi	r3,r3,16
    629c:	393ffc15 	stw	r4,-16(r7)
    62a0:	193ffc17 	ldw	r4,-16(r3)
    62a4:	6b400404 	addi	r13,r13,16
    62a8:	5ac00404 	addi	r11,r11,16
    62ac:	693ffc15 	stw	r4,-16(r13)
    62b0:	61000017 	ldw	r4,0(r12)
    62b4:	4a400404 	addi	r9,r9,16
    62b8:	42000404 	addi	r8,r8,16
    62bc:	593ffc15 	stw	r4,-16(r11)
    62c0:	51000017 	ldw	r4,0(r10)
    62c4:	63000404 	addi	r12,r12,16
    62c8:	52800404 	addi	r10,r10,16
    62cc:	493ffc15 	stw	r4,-16(r9)
    62d0:	1bbfef1e 	bne	r3,r14,6290 <__alt_data_end+0xfffe6290>
    62d4:	79000044 	addi	r4,r15,1
    62d8:	2008913a 	slli	r4,r4,4
    62dc:	328003cc 	andi	r10,r6,15
    62e0:	02c000c4 	movi	r11,3
    62e4:	1107883a 	add	r3,r2,r4
    62e8:	290b883a 	add	r5,r5,r4
    62ec:	5a801e2e 	bgeu	r11,r10,6368 <memmove+0x154>
    62f0:	1813883a 	mov	r9,r3
    62f4:	2811883a 	mov	r8,r5
    62f8:	500f883a 	mov	r7,r10
    62fc:	41000017 	ldw	r4,0(r8)
    6300:	4a400104 	addi	r9,r9,4
    6304:	39ffff04 	addi	r7,r7,-4
    6308:	493fff15 	stw	r4,-4(r9)
    630c:	42000104 	addi	r8,r8,4
    6310:	59fffa36 	bltu	r11,r7,62fc <__alt_data_end+0xfffe62fc>
    6314:	513fff04 	addi	r4,r10,-4
    6318:	2008d0ba 	srli	r4,r4,2
    631c:	318000cc 	andi	r6,r6,3
    6320:	21000044 	addi	r4,r4,1
    6324:	2109883a 	add	r4,r4,r4
    6328:	2109883a 	add	r4,r4,r4
    632c:	1907883a 	add	r3,r3,r4
    6330:	290b883a 	add	r5,r5,r4
    6334:	30000b26 	beq	r6,zero,6364 <memmove+0x150>
    6338:	198d883a 	add	r6,r3,r6
    633c:	29c00003 	ldbu	r7,0(r5)
    6340:	18c00044 	addi	r3,r3,1
    6344:	29400044 	addi	r5,r5,1
    6348:	19ffffc5 	stb	r7,-1(r3)
    634c:	19bffb1e 	bne	r3,r6,633c <__alt_data_end+0xfffe633c>
    6350:	f800283a 	ret
    6354:	1007883a 	mov	r3,r2
    6358:	003ff606 	br	6334 <__alt_data_end+0xfffe6334>
    635c:	1007883a 	mov	r3,r2
    6360:	003ff506 	br	6338 <__alt_data_end+0xfffe6338>
    6364:	f800283a 	ret
    6368:	500d883a 	mov	r6,r10
    636c:	003ff106 	br	6334 <__alt_data_end+0xfffe6334>

00006370 <memset>:
    6370:	20c000cc 	andi	r3,r4,3
    6374:	2005883a 	mov	r2,r4
    6378:	18004426 	beq	r3,zero,648c <memset+0x11c>
    637c:	31ffffc4 	addi	r7,r6,-1
    6380:	30004026 	beq	r6,zero,6484 <memset+0x114>
    6384:	2813883a 	mov	r9,r5
    6388:	200d883a 	mov	r6,r4
    638c:	2007883a 	mov	r3,r4
    6390:	00000406 	br	63a4 <memset+0x34>
    6394:	3a3fffc4 	addi	r8,r7,-1
    6398:	31800044 	addi	r6,r6,1
    639c:	38003926 	beq	r7,zero,6484 <memset+0x114>
    63a0:	400f883a 	mov	r7,r8
    63a4:	18c00044 	addi	r3,r3,1
    63a8:	32400005 	stb	r9,0(r6)
    63ac:	1a0000cc 	andi	r8,r3,3
    63b0:	403ff81e 	bne	r8,zero,6394 <__alt_data_end+0xfffe6394>
    63b4:	010000c4 	movi	r4,3
    63b8:	21c02d2e 	bgeu	r4,r7,6470 <memset+0x100>
    63bc:	29003fcc 	andi	r4,r5,255
    63c0:	200c923a 	slli	r6,r4,8
    63c4:	3108b03a 	or	r4,r6,r4
    63c8:	200c943a 	slli	r6,r4,16
    63cc:	218cb03a 	or	r6,r4,r6
    63d0:	010003c4 	movi	r4,15
    63d4:	21c0182e 	bgeu	r4,r7,6438 <memset+0xc8>
    63d8:	3b3ffc04 	addi	r12,r7,-16
    63dc:	6018d13a 	srli	r12,r12,4
    63e0:	1a000104 	addi	r8,r3,4
    63e4:	1ac00204 	addi	r11,r3,8
    63e8:	6008913a 	slli	r4,r12,4
    63ec:	1a800304 	addi	r10,r3,12
    63f0:	1813883a 	mov	r9,r3
    63f4:	21000504 	addi	r4,r4,20
    63f8:	1909883a 	add	r4,r3,r4
    63fc:	49800015 	stw	r6,0(r9)
    6400:	41800015 	stw	r6,0(r8)
    6404:	59800015 	stw	r6,0(r11)
    6408:	51800015 	stw	r6,0(r10)
    640c:	42000404 	addi	r8,r8,16
    6410:	4a400404 	addi	r9,r9,16
    6414:	5ac00404 	addi	r11,r11,16
    6418:	52800404 	addi	r10,r10,16
    641c:	413ff71e 	bne	r8,r4,63fc <__alt_data_end+0xfffe63fc>
    6420:	63000044 	addi	r12,r12,1
    6424:	6018913a 	slli	r12,r12,4
    6428:	39c003cc 	andi	r7,r7,15
    642c:	010000c4 	movi	r4,3
    6430:	1b07883a 	add	r3,r3,r12
    6434:	21c00e2e 	bgeu	r4,r7,6470 <memset+0x100>
    6438:	1813883a 	mov	r9,r3
    643c:	3811883a 	mov	r8,r7
    6440:	010000c4 	movi	r4,3
    6444:	49800015 	stw	r6,0(r9)
    6448:	423fff04 	addi	r8,r8,-4
    644c:	4a400104 	addi	r9,r9,4
    6450:	223ffc36 	bltu	r4,r8,6444 <__alt_data_end+0xfffe6444>
    6454:	393fff04 	addi	r4,r7,-4
    6458:	2008d0ba 	srli	r4,r4,2
    645c:	39c000cc 	andi	r7,r7,3
    6460:	21000044 	addi	r4,r4,1
    6464:	2109883a 	add	r4,r4,r4
    6468:	2109883a 	add	r4,r4,r4
    646c:	1907883a 	add	r3,r3,r4
    6470:	38000526 	beq	r7,zero,6488 <memset+0x118>
    6474:	19cf883a 	add	r7,r3,r7
    6478:	19400005 	stb	r5,0(r3)
    647c:	18c00044 	addi	r3,r3,1
    6480:	38fffd1e 	bne	r7,r3,6478 <__alt_data_end+0xfffe6478>
    6484:	f800283a 	ret
    6488:	f800283a 	ret
    648c:	2007883a 	mov	r3,r4
    6490:	300f883a 	mov	r7,r6
    6494:	003fc706 	br	63b4 <__alt_data_end+0xfffe63b4>

00006498 <_Balloc>:
    6498:	20801317 	ldw	r2,76(r4)
    649c:	defffc04 	addi	sp,sp,-16
    64a0:	dc400115 	stw	r17,4(sp)
    64a4:	dc000015 	stw	r16,0(sp)
    64a8:	dfc00315 	stw	ra,12(sp)
    64ac:	dc800215 	stw	r18,8(sp)
    64b0:	2023883a 	mov	r17,r4
    64b4:	2821883a 	mov	r16,r5
    64b8:	10000f26 	beq	r2,zero,64f8 <_Balloc+0x60>
    64bc:	8407883a 	add	r3,r16,r16
    64c0:	18c7883a 	add	r3,r3,r3
    64c4:	10c7883a 	add	r3,r2,r3
    64c8:	18800017 	ldw	r2,0(r3)
    64cc:	10001126 	beq	r2,zero,6514 <_Balloc+0x7c>
    64d0:	11000017 	ldw	r4,0(r2)
    64d4:	19000015 	stw	r4,0(r3)
    64d8:	10000415 	stw	zero,16(r2)
    64dc:	10000315 	stw	zero,12(r2)
    64e0:	dfc00317 	ldw	ra,12(sp)
    64e4:	dc800217 	ldw	r18,8(sp)
    64e8:	dc400117 	ldw	r17,4(sp)
    64ec:	dc000017 	ldw	r16,0(sp)
    64f0:	dec00404 	addi	sp,sp,16
    64f4:	f800283a 	ret
    64f8:	01800844 	movi	r6,33
    64fc:	01400104 	movi	r5,4
    6500:	00093d40 	call	93d4 <_calloc_r>
    6504:	88801315 	stw	r2,76(r17)
    6508:	103fec1e 	bne	r2,zero,64bc <__alt_data_end+0xfffe64bc>
    650c:	0005883a 	mov	r2,zero
    6510:	003ff306 	br	64e0 <__alt_data_end+0xfffe64e0>
    6514:	01400044 	movi	r5,1
    6518:	2c24983a 	sll	r18,r5,r16
    651c:	8809883a 	mov	r4,r17
    6520:	91800144 	addi	r6,r18,5
    6524:	318d883a 	add	r6,r6,r6
    6528:	318d883a 	add	r6,r6,r6
    652c:	00093d40 	call	93d4 <_calloc_r>
    6530:	103ff626 	beq	r2,zero,650c <__alt_data_end+0xfffe650c>
    6534:	14000115 	stw	r16,4(r2)
    6538:	14800215 	stw	r18,8(r2)
    653c:	003fe606 	br	64d8 <__alt_data_end+0xfffe64d8>

00006540 <_Bfree>:
    6540:	28000826 	beq	r5,zero,6564 <_Bfree+0x24>
    6544:	28c00117 	ldw	r3,4(r5)
    6548:	20801317 	ldw	r2,76(r4)
    654c:	18c7883a 	add	r3,r3,r3
    6550:	18c7883a 	add	r3,r3,r3
    6554:	10c5883a 	add	r2,r2,r3
    6558:	10c00017 	ldw	r3,0(r2)
    655c:	28c00015 	stw	r3,0(r5)
    6560:	11400015 	stw	r5,0(r2)
    6564:	f800283a 	ret

00006568 <__multadd>:
    6568:	defffa04 	addi	sp,sp,-24
    656c:	dc800315 	stw	r18,12(sp)
    6570:	dc400215 	stw	r17,8(sp)
    6574:	dc000115 	stw	r16,4(sp)
    6578:	2823883a 	mov	r17,r5
    657c:	2c000417 	ldw	r16,16(r5)
    6580:	dfc00515 	stw	ra,20(sp)
    6584:	dcc00415 	stw	r19,16(sp)
    6588:	2025883a 	mov	r18,r4
    658c:	29400504 	addi	r5,r5,20
    6590:	0011883a 	mov	r8,zero
    6594:	28c00017 	ldw	r3,0(r5)
    6598:	29400104 	addi	r5,r5,4
    659c:	42000044 	addi	r8,r8,1
    65a0:	18bfffcc 	andi	r2,r3,65535
    65a4:	1185383a 	mul	r2,r2,r6
    65a8:	1806d43a 	srli	r3,r3,16
    65ac:	11cf883a 	add	r7,r2,r7
    65b0:	3808d43a 	srli	r4,r7,16
    65b4:	1987383a 	mul	r3,r3,r6
    65b8:	38bfffcc 	andi	r2,r7,65535
    65bc:	1907883a 	add	r3,r3,r4
    65c0:	1808943a 	slli	r4,r3,16
    65c4:	180ed43a 	srli	r7,r3,16
    65c8:	2085883a 	add	r2,r4,r2
    65cc:	28bfff15 	stw	r2,-4(r5)
    65d0:	443ff016 	blt	r8,r16,6594 <__alt_data_end+0xfffe6594>
    65d4:	38000926 	beq	r7,zero,65fc <__multadd+0x94>
    65d8:	88800217 	ldw	r2,8(r17)
    65dc:	80800f0e 	bge	r16,r2,661c <__multadd+0xb4>
    65e0:	80800144 	addi	r2,r16,5
    65e4:	1085883a 	add	r2,r2,r2
    65e8:	1085883a 	add	r2,r2,r2
    65ec:	8885883a 	add	r2,r17,r2
    65f0:	11c00015 	stw	r7,0(r2)
    65f4:	84000044 	addi	r16,r16,1
    65f8:	8c000415 	stw	r16,16(r17)
    65fc:	8805883a 	mov	r2,r17
    6600:	dfc00517 	ldw	ra,20(sp)
    6604:	dcc00417 	ldw	r19,16(sp)
    6608:	dc800317 	ldw	r18,12(sp)
    660c:	dc400217 	ldw	r17,8(sp)
    6610:	dc000117 	ldw	r16,4(sp)
    6614:	dec00604 	addi	sp,sp,24
    6618:	f800283a 	ret
    661c:	89400117 	ldw	r5,4(r17)
    6620:	9009883a 	mov	r4,r18
    6624:	d9c00015 	stw	r7,0(sp)
    6628:	29400044 	addi	r5,r5,1
    662c:	00064980 	call	6498 <_Balloc>
    6630:	89800417 	ldw	r6,16(r17)
    6634:	89400304 	addi	r5,r17,12
    6638:	11000304 	addi	r4,r2,12
    663c:	31800084 	addi	r6,r6,2
    6640:	318d883a 	add	r6,r6,r6
    6644:	318d883a 	add	r6,r6,r6
    6648:	1027883a 	mov	r19,r2
    664c:	00060cc0 	call	60cc <memcpy>
    6650:	d9c00017 	ldw	r7,0(sp)
    6654:	88000a26 	beq	r17,zero,6680 <__multadd+0x118>
    6658:	88c00117 	ldw	r3,4(r17)
    665c:	90801317 	ldw	r2,76(r18)
    6660:	18c7883a 	add	r3,r3,r3
    6664:	18c7883a 	add	r3,r3,r3
    6668:	10c5883a 	add	r2,r2,r3
    666c:	10c00017 	ldw	r3,0(r2)
    6670:	88c00015 	stw	r3,0(r17)
    6674:	14400015 	stw	r17,0(r2)
    6678:	9823883a 	mov	r17,r19
    667c:	003fd806 	br	65e0 <__alt_data_end+0xfffe65e0>
    6680:	9823883a 	mov	r17,r19
    6684:	003fd606 	br	65e0 <__alt_data_end+0xfffe65e0>

00006688 <__s2b>:
    6688:	defff904 	addi	sp,sp,-28
    668c:	dc400115 	stw	r17,4(sp)
    6690:	dc000015 	stw	r16,0(sp)
    6694:	2023883a 	mov	r17,r4
    6698:	2821883a 	mov	r16,r5
    669c:	39000204 	addi	r4,r7,8
    66a0:	01400244 	movi	r5,9
    66a4:	dcc00315 	stw	r19,12(sp)
    66a8:	dc800215 	stw	r18,8(sp)
    66ac:	dfc00615 	stw	ra,24(sp)
    66b0:	dd400515 	stw	r21,20(sp)
    66b4:	dd000415 	stw	r20,16(sp)
    66b8:	3825883a 	mov	r18,r7
    66bc:	3027883a 	mov	r19,r6
    66c0:	000044c0 	call	44c <__divsi3>
    66c4:	00c00044 	movi	r3,1
    66c8:	000b883a 	mov	r5,zero
    66cc:	1880030e 	bge	r3,r2,66dc <__s2b+0x54>
    66d0:	18c7883a 	add	r3,r3,r3
    66d4:	29400044 	addi	r5,r5,1
    66d8:	18bffd16 	blt	r3,r2,66d0 <__alt_data_end+0xfffe66d0>
    66dc:	8809883a 	mov	r4,r17
    66e0:	00064980 	call	6498 <_Balloc>
    66e4:	d8c00717 	ldw	r3,28(sp)
    66e8:	10c00515 	stw	r3,20(r2)
    66ec:	00c00044 	movi	r3,1
    66f0:	10c00415 	stw	r3,16(r2)
    66f4:	00c00244 	movi	r3,9
    66f8:	1cc0210e 	bge	r3,r19,6780 <__s2b+0xf8>
    66fc:	80eb883a 	add	r21,r16,r3
    6700:	a829883a 	mov	r20,r21
    6704:	84e1883a 	add	r16,r16,r19
    6708:	a1c00007 	ldb	r7,0(r20)
    670c:	01800284 	movi	r6,10
    6710:	a5000044 	addi	r20,r20,1
    6714:	100b883a 	mov	r5,r2
    6718:	39fff404 	addi	r7,r7,-48
    671c:	8809883a 	mov	r4,r17
    6720:	00065680 	call	6568 <__multadd>
    6724:	a43ff81e 	bne	r20,r16,6708 <__alt_data_end+0xfffe6708>
    6728:	ace1883a 	add	r16,r21,r19
    672c:	843ffe04 	addi	r16,r16,-8
    6730:	9c800a0e 	bge	r19,r18,675c <__s2b+0xd4>
    6734:	94e5c83a 	sub	r18,r18,r19
    6738:	84a5883a 	add	r18,r16,r18
    673c:	81c00007 	ldb	r7,0(r16)
    6740:	01800284 	movi	r6,10
    6744:	84000044 	addi	r16,r16,1
    6748:	100b883a 	mov	r5,r2
    674c:	39fff404 	addi	r7,r7,-48
    6750:	8809883a 	mov	r4,r17
    6754:	00065680 	call	6568 <__multadd>
    6758:	84bff81e 	bne	r16,r18,673c <__alt_data_end+0xfffe673c>
    675c:	dfc00617 	ldw	ra,24(sp)
    6760:	dd400517 	ldw	r21,20(sp)
    6764:	dd000417 	ldw	r20,16(sp)
    6768:	dcc00317 	ldw	r19,12(sp)
    676c:	dc800217 	ldw	r18,8(sp)
    6770:	dc400117 	ldw	r17,4(sp)
    6774:	dc000017 	ldw	r16,0(sp)
    6778:	dec00704 	addi	sp,sp,28
    677c:	f800283a 	ret
    6780:	84000284 	addi	r16,r16,10
    6784:	1827883a 	mov	r19,r3
    6788:	003fe906 	br	6730 <__alt_data_end+0xfffe6730>

0000678c <__hi0bits>:
    678c:	20bfffec 	andhi	r2,r4,65535
    6790:	1000141e 	bne	r2,zero,67e4 <__hi0bits+0x58>
    6794:	2008943a 	slli	r4,r4,16
    6798:	00800404 	movi	r2,16
    679c:	20ffc02c 	andhi	r3,r4,65280
    67a0:	1800021e 	bne	r3,zero,67ac <__hi0bits+0x20>
    67a4:	2008923a 	slli	r4,r4,8
    67a8:	10800204 	addi	r2,r2,8
    67ac:	20fc002c 	andhi	r3,r4,61440
    67b0:	1800021e 	bne	r3,zero,67bc <__hi0bits+0x30>
    67b4:	2008913a 	slli	r4,r4,4
    67b8:	10800104 	addi	r2,r2,4
    67bc:	20f0002c 	andhi	r3,r4,49152
    67c0:	1800031e 	bne	r3,zero,67d0 <__hi0bits+0x44>
    67c4:	2109883a 	add	r4,r4,r4
    67c8:	10800084 	addi	r2,r2,2
    67cc:	2109883a 	add	r4,r4,r4
    67d0:	20000316 	blt	r4,zero,67e0 <__hi0bits+0x54>
    67d4:	2110002c 	andhi	r4,r4,16384
    67d8:	2000041e 	bne	r4,zero,67ec <__hi0bits+0x60>
    67dc:	00800804 	movi	r2,32
    67e0:	f800283a 	ret
    67e4:	0005883a 	mov	r2,zero
    67e8:	003fec06 	br	679c <__alt_data_end+0xfffe679c>
    67ec:	10800044 	addi	r2,r2,1
    67f0:	f800283a 	ret

000067f4 <__lo0bits>:
    67f4:	20c00017 	ldw	r3,0(r4)
    67f8:	188001cc 	andi	r2,r3,7
    67fc:	10000826 	beq	r2,zero,6820 <__lo0bits+0x2c>
    6800:	1880004c 	andi	r2,r3,1
    6804:	1000211e 	bne	r2,zero,688c <__lo0bits+0x98>
    6808:	1880008c 	andi	r2,r3,2
    680c:	1000211e 	bne	r2,zero,6894 <__lo0bits+0xa0>
    6810:	1806d0ba 	srli	r3,r3,2
    6814:	00800084 	movi	r2,2
    6818:	20c00015 	stw	r3,0(r4)
    681c:	f800283a 	ret
    6820:	18bfffcc 	andi	r2,r3,65535
    6824:	10001326 	beq	r2,zero,6874 <__lo0bits+0x80>
    6828:	0005883a 	mov	r2,zero
    682c:	19403fcc 	andi	r5,r3,255
    6830:	2800021e 	bne	r5,zero,683c <__lo0bits+0x48>
    6834:	1806d23a 	srli	r3,r3,8
    6838:	10800204 	addi	r2,r2,8
    683c:	194003cc 	andi	r5,r3,15
    6840:	2800021e 	bne	r5,zero,684c <__lo0bits+0x58>
    6844:	1806d13a 	srli	r3,r3,4
    6848:	10800104 	addi	r2,r2,4
    684c:	194000cc 	andi	r5,r3,3
    6850:	2800021e 	bne	r5,zero,685c <__lo0bits+0x68>
    6854:	1806d0ba 	srli	r3,r3,2
    6858:	10800084 	addi	r2,r2,2
    685c:	1940004c 	andi	r5,r3,1
    6860:	2800081e 	bne	r5,zero,6884 <__lo0bits+0x90>
    6864:	1806d07a 	srli	r3,r3,1
    6868:	1800051e 	bne	r3,zero,6880 <__lo0bits+0x8c>
    686c:	00800804 	movi	r2,32
    6870:	f800283a 	ret
    6874:	1806d43a 	srli	r3,r3,16
    6878:	00800404 	movi	r2,16
    687c:	003feb06 	br	682c <__alt_data_end+0xfffe682c>
    6880:	10800044 	addi	r2,r2,1
    6884:	20c00015 	stw	r3,0(r4)
    6888:	f800283a 	ret
    688c:	0005883a 	mov	r2,zero
    6890:	f800283a 	ret
    6894:	1806d07a 	srli	r3,r3,1
    6898:	00800044 	movi	r2,1
    689c:	20c00015 	stw	r3,0(r4)
    68a0:	f800283a 	ret

000068a4 <__i2b>:
    68a4:	defffd04 	addi	sp,sp,-12
    68a8:	dc000015 	stw	r16,0(sp)
    68ac:	04000044 	movi	r16,1
    68b0:	dc400115 	stw	r17,4(sp)
    68b4:	2823883a 	mov	r17,r5
    68b8:	800b883a 	mov	r5,r16
    68bc:	dfc00215 	stw	ra,8(sp)
    68c0:	00064980 	call	6498 <_Balloc>
    68c4:	14400515 	stw	r17,20(r2)
    68c8:	14000415 	stw	r16,16(r2)
    68cc:	dfc00217 	ldw	ra,8(sp)
    68d0:	dc400117 	ldw	r17,4(sp)
    68d4:	dc000017 	ldw	r16,0(sp)
    68d8:	dec00304 	addi	sp,sp,12
    68dc:	f800283a 	ret

000068e0 <__multiply>:
    68e0:	defffa04 	addi	sp,sp,-24
    68e4:	dcc00315 	stw	r19,12(sp)
    68e8:	dc800215 	stw	r18,8(sp)
    68ec:	34c00417 	ldw	r19,16(r6)
    68f0:	2c800417 	ldw	r18,16(r5)
    68f4:	dd000415 	stw	r20,16(sp)
    68f8:	dc400115 	stw	r17,4(sp)
    68fc:	dfc00515 	stw	ra,20(sp)
    6900:	dc000015 	stw	r16,0(sp)
    6904:	2829883a 	mov	r20,r5
    6908:	3023883a 	mov	r17,r6
    690c:	94c0050e 	bge	r18,r19,6924 <__multiply+0x44>
    6910:	9007883a 	mov	r3,r18
    6914:	3029883a 	mov	r20,r6
    6918:	9825883a 	mov	r18,r19
    691c:	2823883a 	mov	r17,r5
    6920:	1827883a 	mov	r19,r3
    6924:	a0800217 	ldw	r2,8(r20)
    6928:	94e1883a 	add	r16,r18,r19
    692c:	a1400117 	ldw	r5,4(r20)
    6930:	1400010e 	bge	r2,r16,6938 <__multiply+0x58>
    6934:	29400044 	addi	r5,r5,1
    6938:	00064980 	call	6498 <_Balloc>
    693c:	8415883a 	add	r10,r16,r16
    6940:	12c00504 	addi	r11,r2,20
    6944:	5295883a 	add	r10,r10,r10
    6948:	5a95883a 	add	r10,r11,r10
    694c:	5807883a 	mov	r3,r11
    6950:	5a80032e 	bgeu	r11,r10,6960 <__multiply+0x80>
    6954:	18000015 	stw	zero,0(r3)
    6958:	18c00104 	addi	r3,r3,4
    695c:	1abffd36 	bltu	r3,r10,6954 <__alt_data_end+0xfffe6954>
    6960:	9ce7883a 	add	r19,r19,r19
    6964:	94a5883a 	add	r18,r18,r18
    6968:	89800504 	addi	r6,r17,20
    696c:	9ce7883a 	add	r19,r19,r19
    6970:	a3400504 	addi	r13,r20,20
    6974:	94a5883a 	add	r18,r18,r18
    6978:	34d9883a 	add	r12,r6,r19
    697c:	6c93883a 	add	r9,r13,r18
    6980:	3300422e 	bgeu	r6,r12,6a8c <__multiply+0x1ac>
    6984:	37c00017 	ldw	ra,0(r6)
    6988:	fbffffcc 	andi	r15,ra,65535
    698c:	78001b26 	beq	r15,zero,69fc <__multiply+0x11c>
    6990:	5811883a 	mov	r8,r11
    6994:	681d883a 	mov	r14,r13
    6998:	000f883a 	mov	r7,zero
    699c:	71000017 	ldw	r4,0(r14)
    69a0:	40c00017 	ldw	r3,0(r8)
    69a4:	73800104 	addi	r14,r14,4
    69a8:	217fffcc 	andi	r5,r4,65535
    69ac:	2bcb383a 	mul	r5,r5,r15
    69b0:	2008d43a 	srli	r4,r4,16
    69b4:	1c7fffcc 	andi	r17,r3,65535
    69b8:	2c4b883a 	add	r5,r5,r17
    69bc:	29cb883a 	add	r5,r5,r7
    69c0:	23c9383a 	mul	r4,r4,r15
    69c4:	1806d43a 	srli	r3,r3,16
    69c8:	280ed43a 	srli	r7,r5,16
    69cc:	297fffcc 	andi	r5,r5,65535
    69d0:	20c7883a 	add	r3,r4,r3
    69d4:	19c7883a 	add	r3,r3,r7
    69d8:	1808943a 	slli	r4,r3,16
    69dc:	4023883a 	mov	r17,r8
    69e0:	180ed43a 	srli	r7,r3,16
    69e4:	214ab03a 	or	r5,r4,r5
    69e8:	41400015 	stw	r5,0(r8)
    69ec:	42000104 	addi	r8,r8,4
    69f0:	727fea36 	bltu	r14,r9,699c <__alt_data_end+0xfffe699c>
    69f4:	89c00115 	stw	r7,4(r17)
    69f8:	37c00017 	ldw	ra,0(r6)
    69fc:	f83ed43a 	srli	ra,ra,16
    6a00:	f8001f26 	beq	ra,zero,6a80 <__multiply+0x1a0>
    6a04:	58c00017 	ldw	r3,0(r11)
    6a08:	681d883a 	mov	r14,r13
    6a0c:	581f883a 	mov	r15,r11
    6a10:	1811883a 	mov	r8,r3
    6a14:	5825883a 	mov	r18,r11
    6a18:	000f883a 	mov	r7,zero
    6a1c:	00000106 	br	6a24 <__multiply+0x144>
    6a20:	8825883a 	mov	r18,r17
    6a24:	7140000b 	ldhu	r5,0(r14)
    6a28:	4010d43a 	srli	r8,r8,16
    6a2c:	193fffcc 	andi	r4,r3,65535
    6a30:	2fcb383a 	mul	r5,r5,ra
    6a34:	7bc00104 	addi	r15,r15,4
    6a38:	73800104 	addi	r14,r14,4
    6a3c:	2a0b883a 	add	r5,r5,r8
    6a40:	29cb883a 	add	r5,r5,r7
    6a44:	2806943a 	slli	r3,r5,16
    6a48:	94400104 	addi	r17,r18,4
    6a4c:	280ad43a 	srli	r5,r5,16
    6a50:	1908b03a 	or	r4,r3,r4
    6a54:	793fff15 	stw	r4,-4(r15)
    6a58:	70ffff17 	ldw	r3,-4(r14)
    6a5c:	8a000017 	ldw	r8,0(r17)
    6a60:	1806d43a 	srli	r3,r3,16
    6a64:	413fffcc 	andi	r4,r8,65535
    6a68:	1fc7383a 	mul	r3,r3,ra
    6a6c:	1907883a 	add	r3,r3,r4
    6a70:	1947883a 	add	r3,r3,r5
    6a74:	180ed43a 	srli	r7,r3,16
    6a78:	727fe936 	bltu	r14,r9,6a20 <__alt_data_end+0xfffe6a20>
    6a7c:	90c00115 	stw	r3,4(r18)
    6a80:	31800104 	addi	r6,r6,4
    6a84:	5ac00104 	addi	r11,r11,4
    6a88:	333fbe36 	bltu	r6,r12,6984 <__alt_data_end+0xfffe6984>
    6a8c:	0400090e 	bge	zero,r16,6ab4 <__multiply+0x1d4>
    6a90:	50ffff17 	ldw	r3,-4(r10)
    6a94:	52bfff04 	addi	r10,r10,-4
    6a98:	18000326 	beq	r3,zero,6aa8 <__multiply+0x1c8>
    6a9c:	00000506 	br	6ab4 <__multiply+0x1d4>
    6aa0:	50c00017 	ldw	r3,0(r10)
    6aa4:	1800031e 	bne	r3,zero,6ab4 <__multiply+0x1d4>
    6aa8:	843fffc4 	addi	r16,r16,-1
    6aac:	52bfff04 	addi	r10,r10,-4
    6ab0:	803ffb1e 	bne	r16,zero,6aa0 <__alt_data_end+0xfffe6aa0>
    6ab4:	14000415 	stw	r16,16(r2)
    6ab8:	dfc00517 	ldw	ra,20(sp)
    6abc:	dd000417 	ldw	r20,16(sp)
    6ac0:	dcc00317 	ldw	r19,12(sp)
    6ac4:	dc800217 	ldw	r18,8(sp)
    6ac8:	dc400117 	ldw	r17,4(sp)
    6acc:	dc000017 	ldw	r16,0(sp)
    6ad0:	dec00604 	addi	sp,sp,24
    6ad4:	f800283a 	ret

00006ad8 <__pow5mult>:
    6ad8:	defffa04 	addi	sp,sp,-24
    6adc:	dcc00315 	stw	r19,12(sp)
    6ae0:	dc000015 	stw	r16,0(sp)
    6ae4:	dfc00515 	stw	ra,20(sp)
    6ae8:	dd000415 	stw	r20,16(sp)
    6aec:	dc800215 	stw	r18,8(sp)
    6af0:	dc400115 	stw	r17,4(sp)
    6af4:	308000cc 	andi	r2,r6,3
    6af8:	3021883a 	mov	r16,r6
    6afc:	2027883a 	mov	r19,r4
    6b00:	10002f1e 	bne	r2,zero,6bc0 <__pow5mult+0xe8>
    6b04:	2825883a 	mov	r18,r5
    6b08:	8021d0ba 	srai	r16,r16,2
    6b0c:	80001a26 	beq	r16,zero,6b78 <__pow5mult+0xa0>
    6b10:	9c401217 	ldw	r17,72(r19)
    6b14:	8800061e 	bne	r17,zero,6b30 <__pow5mult+0x58>
    6b18:	00003406 	br	6bec <__pow5mult+0x114>
    6b1c:	8021d07a 	srai	r16,r16,1
    6b20:	80001526 	beq	r16,zero,6b78 <__pow5mult+0xa0>
    6b24:	88800017 	ldw	r2,0(r17)
    6b28:	10001c26 	beq	r2,zero,6b9c <__pow5mult+0xc4>
    6b2c:	1023883a 	mov	r17,r2
    6b30:	8080004c 	andi	r2,r16,1
    6b34:	103ff926 	beq	r2,zero,6b1c <__alt_data_end+0xfffe6b1c>
    6b38:	880d883a 	mov	r6,r17
    6b3c:	900b883a 	mov	r5,r18
    6b40:	9809883a 	mov	r4,r19
    6b44:	00068e00 	call	68e0 <__multiply>
    6b48:	90001b26 	beq	r18,zero,6bb8 <__pow5mult+0xe0>
    6b4c:	91000117 	ldw	r4,4(r18)
    6b50:	98c01317 	ldw	r3,76(r19)
    6b54:	8021d07a 	srai	r16,r16,1
    6b58:	2109883a 	add	r4,r4,r4
    6b5c:	2109883a 	add	r4,r4,r4
    6b60:	1907883a 	add	r3,r3,r4
    6b64:	19000017 	ldw	r4,0(r3)
    6b68:	91000015 	stw	r4,0(r18)
    6b6c:	1c800015 	stw	r18,0(r3)
    6b70:	1025883a 	mov	r18,r2
    6b74:	803feb1e 	bne	r16,zero,6b24 <__alt_data_end+0xfffe6b24>
    6b78:	9005883a 	mov	r2,r18
    6b7c:	dfc00517 	ldw	ra,20(sp)
    6b80:	dd000417 	ldw	r20,16(sp)
    6b84:	dcc00317 	ldw	r19,12(sp)
    6b88:	dc800217 	ldw	r18,8(sp)
    6b8c:	dc400117 	ldw	r17,4(sp)
    6b90:	dc000017 	ldw	r16,0(sp)
    6b94:	dec00604 	addi	sp,sp,24
    6b98:	f800283a 	ret
    6b9c:	880d883a 	mov	r6,r17
    6ba0:	880b883a 	mov	r5,r17
    6ba4:	9809883a 	mov	r4,r19
    6ba8:	00068e00 	call	68e0 <__multiply>
    6bac:	88800015 	stw	r2,0(r17)
    6bb0:	10000015 	stw	zero,0(r2)
    6bb4:	003fdd06 	br	6b2c <__alt_data_end+0xfffe6b2c>
    6bb8:	1025883a 	mov	r18,r2
    6bbc:	003fd706 	br	6b1c <__alt_data_end+0xfffe6b1c>
    6bc0:	10bfffc4 	addi	r2,r2,-1
    6bc4:	1085883a 	add	r2,r2,r2
    6bc8:	00c00074 	movhi	r3,1
    6bcc:	18fd5f04 	addi	r3,r3,-2692
    6bd0:	1085883a 	add	r2,r2,r2
    6bd4:	1885883a 	add	r2,r3,r2
    6bd8:	11800017 	ldw	r6,0(r2)
    6bdc:	000f883a 	mov	r7,zero
    6be0:	00065680 	call	6568 <__multadd>
    6be4:	1025883a 	mov	r18,r2
    6be8:	003fc706 	br	6b08 <__alt_data_end+0xfffe6b08>
    6bec:	05000044 	movi	r20,1
    6bf0:	a00b883a 	mov	r5,r20
    6bf4:	9809883a 	mov	r4,r19
    6bf8:	00064980 	call	6498 <_Balloc>
    6bfc:	1023883a 	mov	r17,r2
    6c00:	00809c44 	movi	r2,625
    6c04:	88800515 	stw	r2,20(r17)
    6c08:	8d000415 	stw	r20,16(r17)
    6c0c:	9c401215 	stw	r17,72(r19)
    6c10:	88000015 	stw	zero,0(r17)
    6c14:	003fc606 	br	6b30 <__alt_data_end+0xfffe6b30>

00006c18 <__lshift>:
    6c18:	defff904 	addi	sp,sp,-28
    6c1c:	dd400515 	stw	r21,20(sp)
    6c20:	dcc00315 	stw	r19,12(sp)
    6c24:	302bd17a 	srai	r21,r6,5
    6c28:	2cc00417 	ldw	r19,16(r5)
    6c2c:	28800217 	ldw	r2,8(r5)
    6c30:	dd000415 	stw	r20,16(sp)
    6c34:	ace7883a 	add	r19,r21,r19
    6c38:	dc800215 	stw	r18,8(sp)
    6c3c:	dc400115 	stw	r17,4(sp)
    6c40:	dc000015 	stw	r16,0(sp)
    6c44:	dfc00615 	stw	ra,24(sp)
    6c48:	9c000044 	addi	r16,r19,1
    6c4c:	2823883a 	mov	r17,r5
    6c50:	3029883a 	mov	r20,r6
    6c54:	2025883a 	mov	r18,r4
    6c58:	29400117 	ldw	r5,4(r5)
    6c5c:	1400030e 	bge	r2,r16,6c6c <__lshift+0x54>
    6c60:	1085883a 	add	r2,r2,r2
    6c64:	29400044 	addi	r5,r5,1
    6c68:	143ffd16 	blt	r2,r16,6c60 <__alt_data_end+0xfffe6c60>
    6c6c:	9009883a 	mov	r4,r18
    6c70:	00064980 	call	6498 <_Balloc>
    6c74:	10c00504 	addi	r3,r2,20
    6c78:	0540070e 	bge	zero,r21,6c98 <__lshift+0x80>
    6c7c:	ad6b883a 	add	r21,r21,r21
    6c80:	ad6b883a 	add	r21,r21,r21
    6c84:	1809883a 	mov	r4,r3
    6c88:	1d47883a 	add	r3,r3,r21
    6c8c:	20000015 	stw	zero,0(r4)
    6c90:	21000104 	addi	r4,r4,4
    6c94:	193ffd1e 	bne	r3,r4,6c8c <__alt_data_end+0xfffe6c8c>
    6c98:	8a000417 	ldw	r8,16(r17)
    6c9c:	89000504 	addi	r4,r17,20
    6ca0:	a18007cc 	andi	r6,r20,31
    6ca4:	4211883a 	add	r8,r8,r8
    6ca8:	4211883a 	add	r8,r8,r8
    6cac:	2211883a 	add	r8,r4,r8
    6cb0:	30002326 	beq	r6,zero,6d40 <__lshift+0x128>
    6cb4:	02400804 	movi	r9,32
    6cb8:	4993c83a 	sub	r9,r9,r6
    6cbc:	000b883a 	mov	r5,zero
    6cc0:	21c00017 	ldw	r7,0(r4)
    6cc4:	1815883a 	mov	r10,r3
    6cc8:	18c00104 	addi	r3,r3,4
    6ccc:	398e983a 	sll	r7,r7,r6
    6cd0:	21000104 	addi	r4,r4,4
    6cd4:	394ab03a 	or	r5,r7,r5
    6cd8:	197fff15 	stw	r5,-4(r3)
    6cdc:	217fff17 	ldw	r5,-4(r4)
    6ce0:	2a4ad83a 	srl	r5,r5,r9
    6ce4:	223ff636 	bltu	r4,r8,6cc0 <__alt_data_end+0xfffe6cc0>
    6ce8:	51400115 	stw	r5,4(r10)
    6cec:	28001a1e 	bne	r5,zero,6d58 <__lshift+0x140>
    6cf0:	843fffc4 	addi	r16,r16,-1
    6cf4:	14000415 	stw	r16,16(r2)
    6cf8:	88000826 	beq	r17,zero,6d1c <__lshift+0x104>
    6cfc:	89000117 	ldw	r4,4(r17)
    6d00:	90c01317 	ldw	r3,76(r18)
    6d04:	2109883a 	add	r4,r4,r4
    6d08:	2109883a 	add	r4,r4,r4
    6d0c:	1907883a 	add	r3,r3,r4
    6d10:	19000017 	ldw	r4,0(r3)
    6d14:	89000015 	stw	r4,0(r17)
    6d18:	1c400015 	stw	r17,0(r3)
    6d1c:	dfc00617 	ldw	ra,24(sp)
    6d20:	dd400517 	ldw	r21,20(sp)
    6d24:	dd000417 	ldw	r20,16(sp)
    6d28:	dcc00317 	ldw	r19,12(sp)
    6d2c:	dc800217 	ldw	r18,8(sp)
    6d30:	dc400117 	ldw	r17,4(sp)
    6d34:	dc000017 	ldw	r16,0(sp)
    6d38:	dec00704 	addi	sp,sp,28
    6d3c:	f800283a 	ret
    6d40:	21400017 	ldw	r5,0(r4)
    6d44:	18c00104 	addi	r3,r3,4
    6d48:	21000104 	addi	r4,r4,4
    6d4c:	197fff15 	stw	r5,-4(r3)
    6d50:	223ffb36 	bltu	r4,r8,6d40 <__alt_data_end+0xfffe6d40>
    6d54:	003fe606 	br	6cf0 <__alt_data_end+0xfffe6cf0>
    6d58:	9c000084 	addi	r16,r19,2
    6d5c:	003fe406 	br	6cf0 <__alt_data_end+0xfffe6cf0>

00006d60 <__mcmp>:
    6d60:	20800417 	ldw	r2,16(r4)
    6d64:	28c00417 	ldw	r3,16(r5)
    6d68:	10c5c83a 	sub	r2,r2,r3
    6d6c:	1000111e 	bne	r2,zero,6db4 <__mcmp+0x54>
    6d70:	18c7883a 	add	r3,r3,r3
    6d74:	18c7883a 	add	r3,r3,r3
    6d78:	21000504 	addi	r4,r4,20
    6d7c:	29400504 	addi	r5,r5,20
    6d80:	20c5883a 	add	r2,r4,r3
    6d84:	28cb883a 	add	r5,r5,r3
    6d88:	00000106 	br	6d90 <__mcmp+0x30>
    6d8c:	20800a2e 	bgeu	r4,r2,6db8 <__mcmp+0x58>
    6d90:	10bfff04 	addi	r2,r2,-4
    6d94:	297fff04 	addi	r5,r5,-4
    6d98:	11800017 	ldw	r6,0(r2)
    6d9c:	28c00017 	ldw	r3,0(r5)
    6da0:	30fffa26 	beq	r6,r3,6d8c <__alt_data_end+0xfffe6d8c>
    6da4:	30c00236 	bltu	r6,r3,6db0 <__mcmp+0x50>
    6da8:	00800044 	movi	r2,1
    6dac:	f800283a 	ret
    6db0:	00bfffc4 	movi	r2,-1
    6db4:	f800283a 	ret
    6db8:	0005883a 	mov	r2,zero
    6dbc:	f800283a 	ret

00006dc0 <__mdiff>:
    6dc0:	28c00417 	ldw	r3,16(r5)
    6dc4:	30800417 	ldw	r2,16(r6)
    6dc8:	defffa04 	addi	sp,sp,-24
    6dcc:	dcc00315 	stw	r19,12(sp)
    6dd0:	dc800215 	stw	r18,8(sp)
    6dd4:	dfc00515 	stw	ra,20(sp)
    6dd8:	dd000415 	stw	r20,16(sp)
    6ddc:	dc400115 	stw	r17,4(sp)
    6de0:	dc000015 	stw	r16,0(sp)
    6de4:	1887c83a 	sub	r3,r3,r2
    6de8:	2825883a 	mov	r18,r5
    6dec:	3027883a 	mov	r19,r6
    6df0:	1800141e 	bne	r3,zero,6e44 <__mdiff+0x84>
    6df4:	1085883a 	add	r2,r2,r2
    6df8:	1085883a 	add	r2,r2,r2
    6dfc:	2a000504 	addi	r8,r5,20
    6e00:	34000504 	addi	r16,r6,20
    6e04:	4087883a 	add	r3,r8,r2
    6e08:	8085883a 	add	r2,r16,r2
    6e0c:	00000106 	br	6e14 <__mdiff+0x54>
    6e10:	40c0592e 	bgeu	r8,r3,6f78 <__mdiff+0x1b8>
    6e14:	18ffff04 	addi	r3,r3,-4
    6e18:	10bfff04 	addi	r2,r2,-4
    6e1c:	19c00017 	ldw	r7,0(r3)
    6e20:	11400017 	ldw	r5,0(r2)
    6e24:	397ffa26 	beq	r7,r5,6e10 <__alt_data_end+0xfffe6e10>
    6e28:	3940592e 	bgeu	r7,r5,6f90 <__mdiff+0x1d0>
    6e2c:	9005883a 	mov	r2,r18
    6e30:	4023883a 	mov	r17,r8
    6e34:	9825883a 	mov	r18,r19
    6e38:	05000044 	movi	r20,1
    6e3c:	1027883a 	mov	r19,r2
    6e40:	00000406 	br	6e54 <__mdiff+0x94>
    6e44:	18005616 	blt	r3,zero,6fa0 <__mdiff+0x1e0>
    6e48:	34400504 	addi	r17,r6,20
    6e4c:	2c000504 	addi	r16,r5,20
    6e50:	0029883a 	mov	r20,zero
    6e54:	91400117 	ldw	r5,4(r18)
    6e58:	00064980 	call	6498 <_Balloc>
    6e5c:	92400417 	ldw	r9,16(r18)
    6e60:	9b000417 	ldw	r12,16(r19)
    6e64:	12c00504 	addi	r11,r2,20
    6e68:	4a51883a 	add	r8,r9,r9
    6e6c:	6319883a 	add	r12,r12,r12
    6e70:	4211883a 	add	r8,r8,r8
    6e74:	6319883a 	add	r12,r12,r12
    6e78:	15000315 	stw	r20,12(r2)
    6e7c:	8211883a 	add	r8,r16,r8
    6e80:	8b19883a 	add	r12,r17,r12
    6e84:	0007883a 	mov	r3,zero
    6e88:	81400017 	ldw	r5,0(r16)
    6e8c:	89c00017 	ldw	r7,0(r17)
    6e90:	59800104 	addi	r6,r11,4
    6e94:	293fffcc 	andi	r4,r5,65535
    6e98:	20c7883a 	add	r3,r4,r3
    6e9c:	393fffcc 	andi	r4,r7,65535
    6ea0:	1909c83a 	sub	r4,r3,r4
    6ea4:	280ad43a 	srli	r5,r5,16
    6ea8:	380ed43a 	srli	r7,r7,16
    6eac:	2007d43a 	srai	r3,r4,16
    6eb0:	213fffcc 	andi	r4,r4,65535
    6eb4:	29cbc83a 	sub	r5,r5,r7
    6eb8:	28c7883a 	add	r3,r5,r3
    6ebc:	180a943a 	slli	r5,r3,16
    6ec0:	8c400104 	addi	r17,r17,4
    6ec4:	84000104 	addi	r16,r16,4
    6ec8:	2908b03a 	or	r4,r5,r4
    6ecc:	59000015 	stw	r4,0(r11)
    6ed0:	1807d43a 	srai	r3,r3,16
    6ed4:	3015883a 	mov	r10,r6
    6ed8:	3017883a 	mov	r11,r6
    6edc:	8b3fea36 	bltu	r17,r12,6e88 <__alt_data_end+0xfffe6e88>
    6ee0:	8200162e 	bgeu	r16,r8,6f3c <__mdiff+0x17c>
    6ee4:	8017883a 	mov	r11,r16
    6ee8:	59400017 	ldw	r5,0(r11)
    6eec:	31800104 	addi	r6,r6,4
    6ef0:	5ac00104 	addi	r11,r11,4
    6ef4:	293fffcc 	andi	r4,r5,65535
    6ef8:	20c7883a 	add	r3,r4,r3
    6efc:	280ed43a 	srli	r7,r5,16
    6f00:	180bd43a 	srai	r5,r3,16
    6f04:	193fffcc 	andi	r4,r3,65535
    6f08:	3947883a 	add	r3,r7,r5
    6f0c:	180a943a 	slli	r5,r3,16
    6f10:	1807d43a 	srai	r3,r3,16
    6f14:	2908b03a 	or	r4,r5,r4
    6f18:	313fff15 	stw	r4,-4(r6)
    6f1c:	5a3ff236 	bltu	r11,r8,6ee8 <__alt_data_end+0xfffe6ee8>
    6f20:	0406303a 	nor	r3,zero,r16
    6f24:	1a07883a 	add	r3,r3,r8
    6f28:	1806d0ba 	srli	r3,r3,2
    6f2c:	18c00044 	addi	r3,r3,1
    6f30:	18c7883a 	add	r3,r3,r3
    6f34:	18c7883a 	add	r3,r3,r3
    6f38:	50d5883a 	add	r10,r10,r3
    6f3c:	50ffff04 	addi	r3,r10,-4
    6f40:	2000041e 	bne	r4,zero,6f54 <__mdiff+0x194>
    6f44:	18ffff04 	addi	r3,r3,-4
    6f48:	19000017 	ldw	r4,0(r3)
    6f4c:	4a7fffc4 	addi	r9,r9,-1
    6f50:	203ffc26 	beq	r4,zero,6f44 <__alt_data_end+0xfffe6f44>
    6f54:	12400415 	stw	r9,16(r2)
    6f58:	dfc00517 	ldw	ra,20(sp)
    6f5c:	dd000417 	ldw	r20,16(sp)
    6f60:	dcc00317 	ldw	r19,12(sp)
    6f64:	dc800217 	ldw	r18,8(sp)
    6f68:	dc400117 	ldw	r17,4(sp)
    6f6c:	dc000017 	ldw	r16,0(sp)
    6f70:	dec00604 	addi	sp,sp,24
    6f74:	f800283a 	ret
    6f78:	000b883a 	mov	r5,zero
    6f7c:	00064980 	call	6498 <_Balloc>
    6f80:	00c00044 	movi	r3,1
    6f84:	10c00415 	stw	r3,16(r2)
    6f88:	10000515 	stw	zero,20(r2)
    6f8c:	003ff206 	br	6f58 <__alt_data_end+0xfffe6f58>
    6f90:	8023883a 	mov	r17,r16
    6f94:	0029883a 	mov	r20,zero
    6f98:	4021883a 	mov	r16,r8
    6f9c:	003fad06 	br	6e54 <__alt_data_end+0xfffe6e54>
    6fa0:	9005883a 	mov	r2,r18
    6fa4:	94400504 	addi	r17,r18,20
    6fa8:	9c000504 	addi	r16,r19,20
    6fac:	9825883a 	mov	r18,r19
    6fb0:	05000044 	movi	r20,1
    6fb4:	1027883a 	mov	r19,r2
    6fb8:	003fa606 	br	6e54 <__alt_data_end+0xfffe6e54>

00006fbc <__ulp>:
    6fbc:	295ffc2c 	andhi	r5,r5,32752
    6fc0:	00bf3034 	movhi	r2,64704
    6fc4:	2887883a 	add	r3,r5,r2
    6fc8:	00c0020e 	bge	zero,r3,6fd4 <__ulp+0x18>
    6fcc:	0005883a 	mov	r2,zero
    6fd0:	f800283a 	ret
    6fd4:	00c7c83a 	sub	r3,zero,r3
    6fd8:	1807d53a 	srai	r3,r3,20
    6fdc:	008004c4 	movi	r2,19
    6fe0:	10c00b0e 	bge	r2,r3,7010 <__ulp+0x54>
    6fe4:	18bffb04 	addi	r2,r3,-20
    6fe8:	01000784 	movi	r4,30
    6fec:	0007883a 	mov	r3,zero
    6ff0:	20800516 	blt	r4,r2,7008 <__ulp+0x4c>
    6ff4:	010007c4 	movi	r4,31
    6ff8:	2089c83a 	sub	r4,r4,r2
    6ffc:	00800044 	movi	r2,1
    7000:	1104983a 	sll	r2,r2,r4
    7004:	f800283a 	ret
    7008:	00800044 	movi	r2,1
    700c:	f800283a 	ret
    7010:	01400234 	movhi	r5,8
    7014:	28c7d83a 	sra	r3,r5,r3
    7018:	0005883a 	mov	r2,zero
    701c:	f800283a 	ret

00007020 <__b2d>:
    7020:	defffa04 	addi	sp,sp,-24
    7024:	dc000015 	stw	r16,0(sp)
    7028:	24000417 	ldw	r16,16(r4)
    702c:	dc400115 	stw	r17,4(sp)
    7030:	24400504 	addi	r17,r4,20
    7034:	8421883a 	add	r16,r16,r16
    7038:	8421883a 	add	r16,r16,r16
    703c:	8c21883a 	add	r16,r17,r16
    7040:	dc800215 	stw	r18,8(sp)
    7044:	84bfff17 	ldw	r18,-4(r16)
    7048:	dd000415 	stw	r20,16(sp)
    704c:	dcc00315 	stw	r19,12(sp)
    7050:	9009883a 	mov	r4,r18
    7054:	2829883a 	mov	r20,r5
    7058:	dfc00515 	stw	ra,20(sp)
    705c:	000678c0 	call	678c <__hi0bits>
    7060:	00c00804 	movi	r3,32
    7064:	1889c83a 	sub	r4,r3,r2
    7068:	a1000015 	stw	r4,0(r20)
    706c:	01000284 	movi	r4,10
    7070:	84ffff04 	addi	r19,r16,-4
    7074:	20801216 	blt	r4,r2,70c0 <__b2d+0xa0>
    7078:	018002c4 	movi	r6,11
    707c:	308dc83a 	sub	r6,r6,r2
    7080:	9186d83a 	srl	r3,r18,r6
    7084:	18cffc34 	orhi	r3,r3,16368
    7088:	8cc0212e 	bgeu	r17,r19,7110 <__b2d+0xf0>
    708c:	813ffe17 	ldw	r4,-8(r16)
    7090:	218cd83a 	srl	r6,r4,r6
    7094:	10800544 	addi	r2,r2,21
    7098:	9084983a 	sll	r2,r18,r2
    709c:	1184b03a 	or	r2,r2,r6
    70a0:	dfc00517 	ldw	ra,20(sp)
    70a4:	dd000417 	ldw	r20,16(sp)
    70a8:	dcc00317 	ldw	r19,12(sp)
    70ac:	dc800217 	ldw	r18,8(sp)
    70b0:	dc400117 	ldw	r17,4(sp)
    70b4:	dc000017 	ldw	r16,0(sp)
    70b8:	dec00604 	addi	sp,sp,24
    70bc:	f800283a 	ret
    70c0:	8cc00f2e 	bgeu	r17,r19,7100 <__b2d+0xe0>
    70c4:	117ffd44 	addi	r5,r2,-11
    70c8:	80bffe17 	ldw	r2,-8(r16)
    70cc:	28000e26 	beq	r5,zero,7108 <__b2d+0xe8>
    70d0:	1949c83a 	sub	r4,r3,r5
    70d4:	9164983a 	sll	r18,r18,r5
    70d8:	1106d83a 	srl	r3,r2,r4
    70dc:	81bffe04 	addi	r6,r16,-8
    70e0:	948ffc34 	orhi	r18,r18,16368
    70e4:	90c6b03a 	or	r3,r18,r3
    70e8:	89800e2e 	bgeu	r17,r6,7124 <__b2d+0x104>
    70ec:	81bffd17 	ldw	r6,-12(r16)
    70f0:	1144983a 	sll	r2,r2,r5
    70f4:	310ad83a 	srl	r5,r6,r4
    70f8:	2884b03a 	or	r2,r5,r2
    70fc:	003fe806 	br	70a0 <__alt_data_end+0xfffe70a0>
    7100:	10bffd44 	addi	r2,r2,-11
    7104:	1000041e 	bne	r2,zero,7118 <__b2d+0xf8>
    7108:	90cffc34 	orhi	r3,r18,16368
    710c:	003fe406 	br	70a0 <__alt_data_end+0xfffe70a0>
    7110:	000d883a 	mov	r6,zero
    7114:	003fdf06 	br	7094 <__alt_data_end+0xfffe7094>
    7118:	90a4983a 	sll	r18,r18,r2
    711c:	0005883a 	mov	r2,zero
    7120:	003ff906 	br	7108 <__alt_data_end+0xfffe7108>
    7124:	1144983a 	sll	r2,r2,r5
    7128:	003fdd06 	br	70a0 <__alt_data_end+0xfffe70a0>

0000712c <__d2b>:
    712c:	defff804 	addi	sp,sp,-32
    7130:	dc000215 	stw	r16,8(sp)
    7134:	3021883a 	mov	r16,r6
    7138:	dc400315 	stw	r17,12(sp)
    713c:	8022907a 	slli	r17,r16,1
    7140:	dd000615 	stw	r20,24(sp)
    7144:	2829883a 	mov	r20,r5
    7148:	01400044 	movi	r5,1
    714c:	dcc00515 	stw	r19,20(sp)
    7150:	dc800415 	stw	r18,16(sp)
    7154:	dfc00715 	stw	ra,28(sp)
    7158:	3825883a 	mov	r18,r7
    715c:	8822d57a 	srli	r17,r17,21
    7160:	00064980 	call	6498 <_Balloc>
    7164:	1027883a 	mov	r19,r2
    7168:	00800434 	movhi	r2,16
    716c:	10bfffc4 	addi	r2,r2,-1
    7170:	808c703a 	and	r6,r16,r2
    7174:	88000126 	beq	r17,zero,717c <__d2b+0x50>
    7178:	31800434 	orhi	r6,r6,16
    717c:	d9800015 	stw	r6,0(sp)
    7180:	a0002426 	beq	r20,zero,7214 <__d2b+0xe8>
    7184:	d9000104 	addi	r4,sp,4
    7188:	dd000115 	stw	r20,4(sp)
    718c:	00067f40 	call	67f4 <__lo0bits>
    7190:	d8c00017 	ldw	r3,0(sp)
    7194:	10002f1e 	bne	r2,zero,7254 <__d2b+0x128>
    7198:	d9000117 	ldw	r4,4(sp)
    719c:	99000515 	stw	r4,20(r19)
    71a0:	1821003a 	cmpeq	r16,r3,zero
    71a4:	01000084 	movi	r4,2
    71a8:	2421c83a 	sub	r16,r4,r16
    71ac:	98c00615 	stw	r3,24(r19)
    71b0:	9c000415 	stw	r16,16(r19)
    71b4:	88001f1e 	bne	r17,zero,7234 <__d2b+0x108>
    71b8:	10bef384 	addi	r2,r2,-1074
    71bc:	90800015 	stw	r2,0(r18)
    71c0:	00900034 	movhi	r2,16384
    71c4:	10bfffc4 	addi	r2,r2,-1
    71c8:	8085883a 	add	r2,r16,r2
    71cc:	1085883a 	add	r2,r2,r2
    71d0:	1085883a 	add	r2,r2,r2
    71d4:	9885883a 	add	r2,r19,r2
    71d8:	11000517 	ldw	r4,20(r2)
    71dc:	8020917a 	slli	r16,r16,5
    71e0:	000678c0 	call	678c <__hi0bits>
    71e4:	d8c00817 	ldw	r3,32(sp)
    71e8:	8085c83a 	sub	r2,r16,r2
    71ec:	18800015 	stw	r2,0(r3)
    71f0:	9805883a 	mov	r2,r19
    71f4:	dfc00717 	ldw	ra,28(sp)
    71f8:	dd000617 	ldw	r20,24(sp)
    71fc:	dcc00517 	ldw	r19,20(sp)
    7200:	dc800417 	ldw	r18,16(sp)
    7204:	dc400317 	ldw	r17,12(sp)
    7208:	dc000217 	ldw	r16,8(sp)
    720c:	dec00804 	addi	sp,sp,32
    7210:	f800283a 	ret
    7214:	d809883a 	mov	r4,sp
    7218:	00067f40 	call	67f4 <__lo0bits>
    721c:	d8c00017 	ldw	r3,0(sp)
    7220:	04000044 	movi	r16,1
    7224:	9c000415 	stw	r16,16(r19)
    7228:	98c00515 	stw	r3,20(r19)
    722c:	10800804 	addi	r2,r2,32
    7230:	883fe126 	beq	r17,zero,71b8 <__alt_data_end+0xfffe71b8>
    7234:	00c00d44 	movi	r3,53
    7238:	8c7ef344 	addi	r17,r17,-1075
    723c:	88a3883a 	add	r17,r17,r2
    7240:	1885c83a 	sub	r2,r3,r2
    7244:	d8c00817 	ldw	r3,32(sp)
    7248:	94400015 	stw	r17,0(r18)
    724c:	18800015 	stw	r2,0(r3)
    7250:	003fe706 	br	71f0 <__alt_data_end+0xfffe71f0>
    7254:	01000804 	movi	r4,32
    7258:	2089c83a 	sub	r4,r4,r2
    725c:	1908983a 	sll	r4,r3,r4
    7260:	d9400117 	ldw	r5,4(sp)
    7264:	1886d83a 	srl	r3,r3,r2
    7268:	2148b03a 	or	r4,r4,r5
    726c:	99000515 	stw	r4,20(r19)
    7270:	d8c00015 	stw	r3,0(sp)
    7274:	003fca06 	br	71a0 <__alt_data_end+0xfffe71a0>

00007278 <__ratio>:
    7278:	defff904 	addi	sp,sp,-28
    727c:	dc400315 	stw	r17,12(sp)
    7280:	2823883a 	mov	r17,r5
    7284:	d9400104 	addi	r5,sp,4
    7288:	dfc00615 	stw	ra,24(sp)
    728c:	dcc00515 	stw	r19,20(sp)
    7290:	dc800415 	stw	r18,16(sp)
    7294:	2027883a 	mov	r19,r4
    7298:	dc000215 	stw	r16,8(sp)
    729c:	00070200 	call	7020 <__b2d>
    72a0:	d80b883a 	mov	r5,sp
    72a4:	8809883a 	mov	r4,r17
    72a8:	1025883a 	mov	r18,r2
    72ac:	1821883a 	mov	r16,r3
    72b0:	00070200 	call	7020 <__b2d>
    72b4:	8a000417 	ldw	r8,16(r17)
    72b8:	99000417 	ldw	r4,16(r19)
    72bc:	d9400117 	ldw	r5,4(sp)
    72c0:	2209c83a 	sub	r4,r4,r8
    72c4:	2010917a 	slli	r8,r4,5
    72c8:	d9000017 	ldw	r4,0(sp)
    72cc:	2909c83a 	sub	r4,r5,r4
    72d0:	4109883a 	add	r4,r8,r4
    72d4:	01000e0e 	bge	zero,r4,7310 <__ratio+0x98>
    72d8:	2008953a 	slli	r4,r4,20
    72dc:	2421883a 	add	r16,r4,r16
    72e0:	100d883a 	mov	r6,r2
    72e4:	180f883a 	mov	r7,r3
    72e8:	9009883a 	mov	r4,r18
    72ec:	800b883a 	mov	r5,r16
    72f0:	000afb00 	call	afb0 <__divdf3>
    72f4:	dfc00617 	ldw	ra,24(sp)
    72f8:	dcc00517 	ldw	r19,20(sp)
    72fc:	dc800417 	ldw	r18,16(sp)
    7300:	dc400317 	ldw	r17,12(sp)
    7304:	dc000217 	ldw	r16,8(sp)
    7308:	dec00704 	addi	sp,sp,28
    730c:	f800283a 	ret
    7310:	2008953a 	slli	r4,r4,20
    7314:	1907c83a 	sub	r3,r3,r4
    7318:	003ff106 	br	72e0 <__alt_data_end+0xfffe72e0>

0000731c <_mprec_log10>:
    731c:	defffe04 	addi	sp,sp,-8
    7320:	dc000015 	stw	r16,0(sp)
    7324:	dfc00115 	stw	ra,4(sp)
    7328:	008005c4 	movi	r2,23
    732c:	2021883a 	mov	r16,r4
    7330:	11000d0e 	bge	r2,r4,7368 <_mprec_log10+0x4c>
    7334:	0005883a 	mov	r2,zero
    7338:	00cffc34 	movhi	r3,16368
    733c:	843fffc4 	addi	r16,r16,-1
    7340:	000d883a 	mov	r6,zero
    7344:	01d00934 	movhi	r7,16420
    7348:	1009883a 	mov	r4,r2
    734c:	180b883a 	mov	r5,r3
    7350:	000baf00 	call	baf0 <__muldf3>
    7354:	803ff91e 	bne	r16,zero,733c <__alt_data_end+0xfffe733c>
    7358:	dfc00117 	ldw	ra,4(sp)
    735c:	dc000017 	ldw	r16,0(sp)
    7360:	dec00204 	addi	sp,sp,8
    7364:	f800283a 	ret
    7368:	202090fa 	slli	r16,r4,3
    736c:	00800074 	movhi	r2,1
    7370:	10bd7604 	addi	r2,r2,-2600
    7374:	1421883a 	add	r16,r2,r16
    7378:	80800017 	ldw	r2,0(r16)
    737c:	80c00117 	ldw	r3,4(r16)
    7380:	dfc00117 	ldw	ra,4(sp)
    7384:	dc000017 	ldw	r16,0(sp)
    7388:	dec00204 	addi	sp,sp,8
    738c:	f800283a 	ret

00007390 <__copybits>:
    7390:	297fffc4 	addi	r5,r5,-1
    7394:	280fd17a 	srai	r7,r5,5
    7398:	30c00417 	ldw	r3,16(r6)
    739c:	30800504 	addi	r2,r6,20
    73a0:	39c00044 	addi	r7,r7,1
    73a4:	18c7883a 	add	r3,r3,r3
    73a8:	39cf883a 	add	r7,r7,r7
    73ac:	18c7883a 	add	r3,r3,r3
    73b0:	39cf883a 	add	r7,r7,r7
    73b4:	10c7883a 	add	r3,r2,r3
    73b8:	21cf883a 	add	r7,r4,r7
    73bc:	10c00d2e 	bgeu	r2,r3,73f4 <__copybits+0x64>
    73c0:	200b883a 	mov	r5,r4
    73c4:	12000017 	ldw	r8,0(r2)
    73c8:	29400104 	addi	r5,r5,4
    73cc:	10800104 	addi	r2,r2,4
    73d0:	2a3fff15 	stw	r8,-4(r5)
    73d4:	10fffb36 	bltu	r2,r3,73c4 <__alt_data_end+0xfffe73c4>
    73d8:	1985c83a 	sub	r2,r3,r6
    73dc:	10bffac4 	addi	r2,r2,-21
    73e0:	1004d0ba 	srli	r2,r2,2
    73e4:	10800044 	addi	r2,r2,1
    73e8:	1085883a 	add	r2,r2,r2
    73ec:	1085883a 	add	r2,r2,r2
    73f0:	2089883a 	add	r4,r4,r2
    73f4:	21c0032e 	bgeu	r4,r7,7404 <__copybits+0x74>
    73f8:	20000015 	stw	zero,0(r4)
    73fc:	21000104 	addi	r4,r4,4
    7400:	21fffd36 	bltu	r4,r7,73f8 <__alt_data_end+0xfffe73f8>
    7404:	f800283a 	ret

00007408 <__any_on>:
    7408:	20c00417 	ldw	r3,16(r4)
    740c:	2805d17a 	srai	r2,r5,5
    7410:	21000504 	addi	r4,r4,20
    7414:	18800d0e 	bge	r3,r2,744c <__any_on+0x44>
    7418:	18c7883a 	add	r3,r3,r3
    741c:	18c7883a 	add	r3,r3,r3
    7420:	20c7883a 	add	r3,r4,r3
    7424:	20c0192e 	bgeu	r4,r3,748c <__any_on+0x84>
    7428:	18bfff17 	ldw	r2,-4(r3)
    742c:	18ffff04 	addi	r3,r3,-4
    7430:	1000041e 	bne	r2,zero,7444 <__any_on+0x3c>
    7434:	20c0142e 	bgeu	r4,r3,7488 <__any_on+0x80>
    7438:	18ffff04 	addi	r3,r3,-4
    743c:	19400017 	ldw	r5,0(r3)
    7440:	283ffc26 	beq	r5,zero,7434 <__alt_data_end+0xfffe7434>
    7444:	00800044 	movi	r2,1
    7448:	f800283a 	ret
    744c:	10c00a0e 	bge	r2,r3,7478 <__any_on+0x70>
    7450:	1085883a 	add	r2,r2,r2
    7454:	1085883a 	add	r2,r2,r2
    7458:	294007cc 	andi	r5,r5,31
    745c:	2087883a 	add	r3,r4,r2
    7460:	283ff026 	beq	r5,zero,7424 <__alt_data_end+0xfffe7424>
    7464:	19800017 	ldw	r6,0(r3)
    7468:	3144d83a 	srl	r2,r6,r5
    746c:	114a983a 	sll	r5,r2,r5
    7470:	317ff41e 	bne	r6,r5,7444 <__alt_data_end+0xfffe7444>
    7474:	003feb06 	br	7424 <__alt_data_end+0xfffe7424>
    7478:	1085883a 	add	r2,r2,r2
    747c:	1085883a 	add	r2,r2,r2
    7480:	2087883a 	add	r3,r4,r2
    7484:	003fe706 	br	7424 <__alt_data_end+0xfffe7424>
    7488:	f800283a 	ret
    748c:	0005883a 	mov	r2,zero
    7490:	f800283a 	ret

00007494 <_realloc_r>:
    7494:	defff604 	addi	sp,sp,-40
    7498:	dc800215 	stw	r18,8(sp)
    749c:	dfc00915 	stw	ra,36(sp)
    74a0:	df000815 	stw	fp,32(sp)
    74a4:	ddc00715 	stw	r23,28(sp)
    74a8:	dd800615 	stw	r22,24(sp)
    74ac:	dd400515 	stw	r21,20(sp)
    74b0:	dd000415 	stw	r20,16(sp)
    74b4:	dcc00315 	stw	r19,12(sp)
    74b8:	dc400115 	stw	r17,4(sp)
    74bc:	dc000015 	stw	r16,0(sp)
    74c0:	3025883a 	mov	r18,r6
    74c4:	2800b726 	beq	r5,zero,77a4 <_realloc_r+0x310>
    74c8:	282b883a 	mov	r21,r5
    74cc:	2029883a 	mov	r20,r4
    74d0:	000d2e80 	call	d2e8 <__malloc_lock>
    74d4:	a8bfff17 	ldw	r2,-4(r21)
    74d8:	043fff04 	movi	r16,-4
    74dc:	90c002c4 	addi	r3,r18,11
    74e0:	01000584 	movi	r4,22
    74e4:	acfffe04 	addi	r19,r21,-8
    74e8:	1420703a 	and	r16,r2,r16
    74ec:	20c0332e 	bgeu	r4,r3,75bc <_realloc_r+0x128>
    74f0:	047ffe04 	movi	r17,-8
    74f4:	1c62703a 	and	r17,r3,r17
    74f8:	8807883a 	mov	r3,r17
    74fc:	88005816 	blt	r17,zero,7660 <_realloc_r+0x1cc>
    7500:	8c805736 	bltu	r17,r18,7660 <_realloc_r+0x1cc>
    7504:	80c0300e 	bge	r16,r3,75c8 <_realloc_r+0x134>
    7508:	07000074 	movhi	fp,1
    750c:	e73f2404 	addi	fp,fp,-880
    7510:	e1c00217 	ldw	r7,8(fp)
    7514:	9c09883a 	add	r4,r19,r16
    7518:	22000117 	ldw	r8,4(r4)
    751c:	21c06326 	beq	r4,r7,76ac <_realloc_r+0x218>
    7520:	017fff84 	movi	r5,-2
    7524:	414a703a 	and	r5,r8,r5
    7528:	214b883a 	add	r5,r4,r5
    752c:	29800117 	ldw	r6,4(r5)
    7530:	3180004c 	andi	r6,r6,1
    7534:	30003f26 	beq	r6,zero,7634 <_realloc_r+0x1a0>
    7538:	1080004c 	andi	r2,r2,1
    753c:	10008326 	beq	r2,zero,774c <_realloc_r+0x2b8>
    7540:	900b883a 	mov	r5,r18
    7544:	a009883a 	mov	r4,r20
    7548:	00057dc0 	call	57dc <_malloc_r>
    754c:	1025883a 	mov	r18,r2
    7550:	10011e26 	beq	r2,zero,79cc <_realloc_r+0x538>
    7554:	a93fff17 	ldw	r4,-4(r21)
    7558:	10fffe04 	addi	r3,r2,-8
    755c:	00bfff84 	movi	r2,-2
    7560:	2084703a 	and	r2,r4,r2
    7564:	9885883a 	add	r2,r19,r2
    7568:	1880ee26 	beq	r3,r2,7924 <_realloc_r+0x490>
    756c:	81bfff04 	addi	r6,r16,-4
    7570:	00800904 	movi	r2,36
    7574:	1180b836 	bltu	r2,r6,7858 <_realloc_r+0x3c4>
    7578:	00c004c4 	movi	r3,19
    757c:	19809636 	bltu	r3,r6,77d8 <_realloc_r+0x344>
    7580:	9005883a 	mov	r2,r18
    7584:	a807883a 	mov	r3,r21
    7588:	19000017 	ldw	r4,0(r3)
    758c:	11000015 	stw	r4,0(r2)
    7590:	19000117 	ldw	r4,4(r3)
    7594:	11000115 	stw	r4,4(r2)
    7598:	18c00217 	ldw	r3,8(r3)
    759c:	10c00215 	stw	r3,8(r2)
    75a0:	a80b883a 	mov	r5,r21
    75a4:	a009883a 	mov	r4,r20
    75a8:	0004bf00 	call	4bf0 <_free_r>
    75ac:	a009883a 	mov	r4,r20
    75b0:	000d30c0 	call	d30c <__malloc_unlock>
    75b4:	9005883a 	mov	r2,r18
    75b8:	00001206 	br	7604 <_realloc_r+0x170>
    75bc:	00c00404 	movi	r3,16
    75c0:	1823883a 	mov	r17,r3
    75c4:	003fce06 	br	7500 <__alt_data_end+0xfffe7500>
    75c8:	a825883a 	mov	r18,r21
    75cc:	8445c83a 	sub	r2,r16,r17
    75d0:	00c003c4 	movi	r3,15
    75d4:	18802636 	bltu	r3,r2,7670 <_realloc_r+0x1dc>
    75d8:	99800117 	ldw	r6,4(r19)
    75dc:	9c07883a 	add	r3,r19,r16
    75e0:	3180004c 	andi	r6,r6,1
    75e4:	3420b03a 	or	r16,r6,r16
    75e8:	9c000115 	stw	r16,4(r19)
    75ec:	18800117 	ldw	r2,4(r3)
    75f0:	10800054 	ori	r2,r2,1
    75f4:	18800115 	stw	r2,4(r3)
    75f8:	a009883a 	mov	r4,r20
    75fc:	000d30c0 	call	d30c <__malloc_unlock>
    7600:	9005883a 	mov	r2,r18
    7604:	dfc00917 	ldw	ra,36(sp)
    7608:	df000817 	ldw	fp,32(sp)
    760c:	ddc00717 	ldw	r23,28(sp)
    7610:	dd800617 	ldw	r22,24(sp)
    7614:	dd400517 	ldw	r21,20(sp)
    7618:	dd000417 	ldw	r20,16(sp)
    761c:	dcc00317 	ldw	r19,12(sp)
    7620:	dc800217 	ldw	r18,8(sp)
    7624:	dc400117 	ldw	r17,4(sp)
    7628:	dc000017 	ldw	r16,0(sp)
    762c:	dec00a04 	addi	sp,sp,40
    7630:	f800283a 	ret
    7634:	017fff04 	movi	r5,-4
    7638:	414a703a 	and	r5,r8,r5
    763c:	814d883a 	add	r6,r16,r5
    7640:	30c01f16 	blt	r6,r3,76c0 <_realloc_r+0x22c>
    7644:	20800317 	ldw	r2,12(r4)
    7648:	20c00217 	ldw	r3,8(r4)
    764c:	a825883a 	mov	r18,r21
    7650:	3021883a 	mov	r16,r6
    7654:	18800315 	stw	r2,12(r3)
    7658:	10c00215 	stw	r3,8(r2)
    765c:	003fdb06 	br	75cc <__alt_data_end+0xfffe75cc>
    7660:	00800304 	movi	r2,12
    7664:	a0800015 	stw	r2,0(r20)
    7668:	0005883a 	mov	r2,zero
    766c:	003fe506 	br	7604 <__alt_data_end+0xfffe7604>
    7670:	98c00117 	ldw	r3,4(r19)
    7674:	9c4b883a 	add	r5,r19,r17
    7678:	11000054 	ori	r4,r2,1
    767c:	18c0004c 	andi	r3,r3,1
    7680:	1c62b03a 	or	r17,r3,r17
    7684:	9c400115 	stw	r17,4(r19)
    7688:	29000115 	stw	r4,4(r5)
    768c:	2885883a 	add	r2,r5,r2
    7690:	10c00117 	ldw	r3,4(r2)
    7694:	29400204 	addi	r5,r5,8
    7698:	a009883a 	mov	r4,r20
    769c:	18c00054 	ori	r3,r3,1
    76a0:	10c00115 	stw	r3,4(r2)
    76a4:	0004bf00 	call	4bf0 <_free_r>
    76a8:	003fd306 	br	75f8 <__alt_data_end+0xfffe75f8>
    76ac:	017fff04 	movi	r5,-4
    76b0:	414a703a 	and	r5,r8,r5
    76b4:	89800404 	addi	r6,r17,16
    76b8:	8151883a 	add	r8,r16,r5
    76bc:	4180590e 	bge	r8,r6,7824 <_realloc_r+0x390>
    76c0:	1080004c 	andi	r2,r2,1
    76c4:	103f9e1e 	bne	r2,zero,7540 <__alt_data_end+0xfffe7540>
    76c8:	adbffe17 	ldw	r22,-8(r21)
    76cc:	00bfff04 	movi	r2,-4
    76d0:	9dadc83a 	sub	r22,r19,r22
    76d4:	b1800117 	ldw	r6,4(r22)
    76d8:	3084703a 	and	r2,r6,r2
    76dc:	20002026 	beq	r4,zero,7760 <_realloc_r+0x2cc>
    76e0:	80af883a 	add	r23,r16,r2
    76e4:	b96f883a 	add	r23,r23,r5
    76e8:	21c05f26 	beq	r4,r7,7868 <_realloc_r+0x3d4>
    76ec:	b8c01c16 	blt	r23,r3,7760 <_realloc_r+0x2cc>
    76f0:	20800317 	ldw	r2,12(r4)
    76f4:	20c00217 	ldw	r3,8(r4)
    76f8:	81bfff04 	addi	r6,r16,-4
    76fc:	01000904 	movi	r4,36
    7700:	18800315 	stw	r2,12(r3)
    7704:	10c00215 	stw	r3,8(r2)
    7708:	b0c00217 	ldw	r3,8(r22)
    770c:	b0800317 	ldw	r2,12(r22)
    7710:	b4800204 	addi	r18,r22,8
    7714:	18800315 	stw	r2,12(r3)
    7718:	10c00215 	stw	r3,8(r2)
    771c:	21801b36 	bltu	r4,r6,778c <_realloc_r+0x2f8>
    7720:	008004c4 	movi	r2,19
    7724:	1180352e 	bgeu	r2,r6,77fc <_realloc_r+0x368>
    7728:	a8800017 	ldw	r2,0(r21)
    772c:	b0800215 	stw	r2,8(r22)
    7730:	a8800117 	ldw	r2,4(r21)
    7734:	b0800315 	stw	r2,12(r22)
    7738:	008006c4 	movi	r2,27
    773c:	11807f36 	bltu	r2,r6,793c <_realloc_r+0x4a8>
    7740:	b0800404 	addi	r2,r22,16
    7744:	ad400204 	addi	r21,r21,8
    7748:	00002d06 	br	7800 <_realloc_r+0x36c>
    774c:	adbffe17 	ldw	r22,-8(r21)
    7750:	00bfff04 	movi	r2,-4
    7754:	9dadc83a 	sub	r22,r19,r22
    7758:	b1000117 	ldw	r4,4(r22)
    775c:	2084703a 	and	r2,r4,r2
    7760:	b03f7726 	beq	r22,zero,7540 <__alt_data_end+0xfffe7540>
    7764:	80af883a 	add	r23,r16,r2
    7768:	b8ff7516 	blt	r23,r3,7540 <__alt_data_end+0xfffe7540>
    776c:	b0800317 	ldw	r2,12(r22)
    7770:	b0c00217 	ldw	r3,8(r22)
    7774:	81bfff04 	addi	r6,r16,-4
    7778:	01000904 	movi	r4,36
    777c:	18800315 	stw	r2,12(r3)
    7780:	10c00215 	stw	r3,8(r2)
    7784:	b4800204 	addi	r18,r22,8
    7788:	21bfe52e 	bgeu	r4,r6,7720 <__alt_data_end+0xfffe7720>
    778c:	a80b883a 	mov	r5,r21
    7790:	9009883a 	mov	r4,r18
    7794:	00062140 	call	6214 <memmove>
    7798:	b821883a 	mov	r16,r23
    779c:	b027883a 	mov	r19,r22
    77a0:	003f8a06 	br	75cc <__alt_data_end+0xfffe75cc>
    77a4:	300b883a 	mov	r5,r6
    77a8:	dfc00917 	ldw	ra,36(sp)
    77ac:	df000817 	ldw	fp,32(sp)
    77b0:	ddc00717 	ldw	r23,28(sp)
    77b4:	dd800617 	ldw	r22,24(sp)
    77b8:	dd400517 	ldw	r21,20(sp)
    77bc:	dd000417 	ldw	r20,16(sp)
    77c0:	dcc00317 	ldw	r19,12(sp)
    77c4:	dc800217 	ldw	r18,8(sp)
    77c8:	dc400117 	ldw	r17,4(sp)
    77cc:	dc000017 	ldw	r16,0(sp)
    77d0:	dec00a04 	addi	sp,sp,40
    77d4:	00057dc1 	jmpi	57dc <_malloc_r>
    77d8:	a8c00017 	ldw	r3,0(r21)
    77dc:	90c00015 	stw	r3,0(r18)
    77e0:	a8c00117 	ldw	r3,4(r21)
    77e4:	90c00115 	stw	r3,4(r18)
    77e8:	00c006c4 	movi	r3,27
    77ec:	19804536 	bltu	r3,r6,7904 <_realloc_r+0x470>
    77f0:	90800204 	addi	r2,r18,8
    77f4:	a8c00204 	addi	r3,r21,8
    77f8:	003f6306 	br	7588 <__alt_data_end+0xfffe7588>
    77fc:	9005883a 	mov	r2,r18
    7800:	a8c00017 	ldw	r3,0(r21)
    7804:	b821883a 	mov	r16,r23
    7808:	b027883a 	mov	r19,r22
    780c:	10c00015 	stw	r3,0(r2)
    7810:	a8c00117 	ldw	r3,4(r21)
    7814:	10c00115 	stw	r3,4(r2)
    7818:	a8c00217 	ldw	r3,8(r21)
    781c:	10c00215 	stw	r3,8(r2)
    7820:	003f6a06 	br	75cc <__alt_data_end+0xfffe75cc>
    7824:	9c67883a 	add	r19,r19,r17
    7828:	4445c83a 	sub	r2,r8,r17
    782c:	e4c00215 	stw	r19,8(fp)
    7830:	10800054 	ori	r2,r2,1
    7834:	98800115 	stw	r2,4(r19)
    7838:	a8bfff17 	ldw	r2,-4(r21)
    783c:	a009883a 	mov	r4,r20
    7840:	1080004c 	andi	r2,r2,1
    7844:	1462b03a 	or	r17,r2,r17
    7848:	ac7fff15 	stw	r17,-4(r21)
    784c:	000d30c0 	call	d30c <__malloc_unlock>
    7850:	a805883a 	mov	r2,r21
    7854:	003f6b06 	br	7604 <__alt_data_end+0xfffe7604>
    7858:	a80b883a 	mov	r5,r21
    785c:	9009883a 	mov	r4,r18
    7860:	00062140 	call	6214 <memmove>
    7864:	003f4e06 	br	75a0 <__alt_data_end+0xfffe75a0>
    7868:	89000404 	addi	r4,r17,16
    786c:	b93fbc16 	blt	r23,r4,7760 <__alt_data_end+0xfffe7760>
    7870:	b0800317 	ldw	r2,12(r22)
    7874:	b0c00217 	ldw	r3,8(r22)
    7878:	81bfff04 	addi	r6,r16,-4
    787c:	01000904 	movi	r4,36
    7880:	18800315 	stw	r2,12(r3)
    7884:	10c00215 	stw	r3,8(r2)
    7888:	b4800204 	addi	r18,r22,8
    788c:	21804336 	bltu	r4,r6,799c <_realloc_r+0x508>
    7890:	008004c4 	movi	r2,19
    7894:	11803f2e 	bgeu	r2,r6,7994 <_realloc_r+0x500>
    7898:	a8800017 	ldw	r2,0(r21)
    789c:	b0800215 	stw	r2,8(r22)
    78a0:	a8800117 	ldw	r2,4(r21)
    78a4:	b0800315 	stw	r2,12(r22)
    78a8:	008006c4 	movi	r2,27
    78ac:	11803f36 	bltu	r2,r6,79ac <_realloc_r+0x518>
    78b0:	b0800404 	addi	r2,r22,16
    78b4:	ad400204 	addi	r21,r21,8
    78b8:	a8c00017 	ldw	r3,0(r21)
    78bc:	10c00015 	stw	r3,0(r2)
    78c0:	a8c00117 	ldw	r3,4(r21)
    78c4:	10c00115 	stw	r3,4(r2)
    78c8:	a8c00217 	ldw	r3,8(r21)
    78cc:	10c00215 	stw	r3,8(r2)
    78d0:	b447883a 	add	r3,r22,r17
    78d4:	bc45c83a 	sub	r2,r23,r17
    78d8:	e0c00215 	stw	r3,8(fp)
    78dc:	10800054 	ori	r2,r2,1
    78e0:	18800115 	stw	r2,4(r3)
    78e4:	b0800117 	ldw	r2,4(r22)
    78e8:	a009883a 	mov	r4,r20
    78ec:	1080004c 	andi	r2,r2,1
    78f0:	1462b03a 	or	r17,r2,r17
    78f4:	b4400115 	stw	r17,4(r22)
    78f8:	000d30c0 	call	d30c <__malloc_unlock>
    78fc:	9005883a 	mov	r2,r18
    7900:	003f4006 	br	7604 <__alt_data_end+0xfffe7604>
    7904:	a8c00217 	ldw	r3,8(r21)
    7908:	90c00215 	stw	r3,8(r18)
    790c:	a8c00317 	ldw	r3,12(r21)
    7910:	90c00315 	stw	r3,12(r18)
    7914:	30801126 	beq	r6,r2,795c <_realloc_r+0x4c8>
    7918:	90800404 	addi	r2,r18,16
    791c:	a8c00404 	addi	r3,r21,16
    7920:	003f1906 	br	7588 <__alt_data_end+0xfffe7588>
    7924:	90ffff17 	ldw	r3,-4(r18)
    7928:	00bfff04 	movi	r2,-4
    792c:	a825883a 	mov	r18,r21
    7930:	1884703a 	and	r2,r3,r2
    7934:	80a1883a 	add	r16,r16,r2
    7938:	003f2406 	br	75cc <__alt_data_end+0xfffe75cc>
    793c:	a8800217 	ldw	r2,8(r21)
    7940:	b0800415 	stw	r2,16(r22)
    7944:	a8800317 	ldw	r2,12(r21)
    7948:	b0800515 	stw	r2,20(r22)
    794c:	31000a26 	beq	r6,r4,7978 <_realloc_r+0x4e4>
    7950:	b0800604 	addi	r2,r22,24
    7954:	ad400404 	addi	r21,r21,16
    7958:	003fa906 	br	7800 <__alt_data_end+0xfffe7800>
    795c:	a9000417 	ldw	r4,16(r21)
    7960:	90800604 	addi	r2,r18,24
    7964:	a8c00604 	addi	r3,r21,24
    7968:	91000415 	stw	r4,16(r18)
    796c:	a9000517 	ldw	r4,20(r21)
    7970:	91000515 	stw	r4,20(r18)
    7974:	003f0406 	br	7588 <__alt_data_end+0xfffe7588>
    7978:	a8c00417 	ldw	r3,16(r21)
    797c:	ad400604 	addi	r21,r21,24
    7980:	b0800804 	addi	r2,r22,32
    7984:	b0c00615 	stw	r3,24(r22)
    7988:	a8ffff17 	ldw	r3,-4(r21)
    798c:	b0c00715 	stw	r3,28(r22)
    7990:	003f9b06 	br	7800 <__alt_data_end+0xfffe7800>
    7994:	9005883a 	mov	r2,r18
    7998:	003fc706 	br	78b8 <__alt_data_end+0xfffe78b8>
    799c:	a80b883a 	mov	r5,r21
    79a0:	9009883a 	mov	r4,r18
    79a4:	00062140 	call	6214 <memmove>
    79a8:	003fc906 	br	78d0 <__alt_data_end+0xfffe78d0>
    79ac:	a8800217 	ldw	r2,8(r21)
    79b0:	b0800415 	stw	r2,16(r22)
    79b4:	a8800317 	ldw	r2,12(r21)
    79b8:	b0800515 	stw	r2,20(r22)
    79bc:	31000726 	beq	r6,r4,79dc <_realloc_r+0x548>
    79c0:	b0800604 	addi	r2,r22,24
    79c4:	ad400404 	addi	r21,r21,16
    79c8:	003fbb06 	br	78b8 <__alt_data_end+0xfffe78b8>
    79cc:	a009883a 	mov	r4,r20
    79d0:	000d30c0 	call	d30c <__malloc_unlock>
    79d4:	0005883a 	mov	r2,zero
    79d8:	003f0a06 	br	7604 <__alt_data_end+0xfffe7604>
    79dc:	a8c00417 	ldw	r3,16(r21)
    79e0:	ad400604 	addi	r21,r21,24
    79e4:	b0800804 	addi	r2,r22,32
    79e8:	b0c00615 	stw	r3,24(r22)
    79ec:	a8ffff17 	ldw	r3,-4(r21)
    79f0:	b0c00715 	stw	r3,28(r22)
    79f4:	003fb006 	br	78b8 <__alt_data_end+0xfffe78b8>

000079f8 <__fpclassifyd>:
    79f8:	00a00034 	movhi	r2,32768
    79fc:	10bfffc4 	addi	r2,r2,-1
    7a00:	2884703a 	and	r2,r5,r2
    7a04:	10000726 	beq	r2,zero,7a24 <__fpclassifyd+0x2c>
    7a08:	00fffc34 	movhi	r3,65520
    7a0c:	019ff834 	movhi	r6,32736
    7a10:	28c7883a 	add	r3,r5,r3
    7a14:	31bfffc4 	addi	r6,r6,-1
    7a18:	30c00536 	bltu	r6,r3,7a30 <__fpclassifyd+0x38>
    7a1c:	00800104 	movi	r2,4
    7a20:	f800283a 	ret
    7a24:	2000021e 	bne	r4,zero,7a30 <__fpclassifyd+0x38>
    7a28:	00800084 	movi	r2,2
    7a2c:	f800283a 	ret
    7a30:	00dffc34 	movhi	r3,32752
    7a34:	019ff834 	movhi	r6,32736
    7a38:	28cb883a 	add	r5,r5,r3
    7a3c:	31bfffc4 	addi	r6,r6,-1
    7a40:	317ff62e 	bgeu	r6,r5,7a1c <__alt_data_end+0xfffe7a1c>
    7a44:	01400434 	movhi	r5,16
    7a48:	297fffc4 	addi	r5,r5,-1
    7a4c:	28800236 	bltu	r5,r2,7a58 <__fpclassifyd+0x60>
    7a50:	008000c4 	movi	r2,3
    7a54:	f800283a 	ret
    7a58:	10c00226 	beq	r2,r3,7a64 <__fpclassifyd+0x6c>
    7a5c:	0005883a 	mov	r2,zero
    7a60:	f800283a 	ret
    7a64:	2005003a 	cmpeq	r2,r4,zero
    7a68:	f800283a 	ret

00007a6c <_sbrk_r>:
    7a6c:	defffd04 	addi	sp,sp,-12
    7a70:	dc000015 	stw	r16,0(sp)
    7a74:	04000074 	movhi	r16,1
    7a78:	dc400115 	stw	r17,4(sp)
    7a7c:	840b7904 	addi	r16,r16,11748
    7a80:	2023883a 	mov	r17,r4
    7a84:	2809883a 	mov	r4,r5
    7a88:	dfc00215 	stw	ra,8(sp)
    7a8c:	80000015 	stw	zero,0(r16)
    7a90:	000d4cc0 	call	d4cc <sbrk>
    7a94:	00ffffc4 	movi	r3,-1
    7a98:	10c00526 	beq	r2,r3,7ab0 <_sbrk_r+0x44>
    7a9c:	dfc00217 	ldw	ra,8(sp)
    7aa0:	dc400117 	ldw	r17,4(sp)
    7aa4:	dc000017 	ldw	r16,0(sp)
    7aa8:	dec00304 	addi	sp,sp,12
    7aac:	f800283a 	ret
    7ab0:	80c00017 	ldw	r3,0(r16)
    7ab4:	183ff926 	beq	r3,zero,7a9c <__alt_data_end+0xfffe7a9c>
    7ab8:	88c00015 	stw	r3,0(r17)
    7abc:	003ff706 	br	7a9c <__alt_data_end+0xfffe7a9c>

00007ac0 <__sread>:
    7ac0:	defffe04 	addi	sp,sp,-8
    7ac4:	dc000015 	stw	r16,0(sp)
    7ac8:	2821883a 	mov	r16,r5
    7acc:	2940038f 	ldh	r5,14(r5)
    7ad0:	dfc00115 	stw	ra,4(sp)
    7ad4:	00098b40 	call	98b4 <_read_r>
    7ad8:	10000716 	blt	r2,zero,7af8 <__sread+0x38>
    7adc:	80c01417 	ldw	r3,80(r16)
    7ae0:	1887883a 	add	r3,r3,r2
    7ae4:	80c01415 	stw	r3,80(r16)
    7ae8:	dfc00117 	ldw	ra,4(sp)
    7aec:	dc000017 	ldw	r16,0(sp)
    7af0:	dec00204 	addi	sp,sp,8
    7af4:	f800283a 	ret
    7af8:	80c0030b 	ldhu	r3,12(r16)
    7afc:	18fbffcc 	andi	r3,r3,61439
    7b00:	80c0030d 	sth	r3,12(r16)
    7b04:	dfc00117 	ldw	ra,4(sp)
    7b08:	dc000017 	ldw	r16,0(sp)
    7b0c:	dec00204 	addi	sp,sp,8
    7b10:	f800283a 	ret

00007b14 <__seofread>:
    7b14:	0005883a 	mov	r2,zero
    7b18:	f800283a 	ret

00007b1c <__swrite>:
    7b1c:	2880030b 	ldhu	r2,12(r5)
    7b20:	defffb04 	addi	sp,sp,-20
    7b24:	dcc00315 	stw	r19,12(sp)
    7b28:	dc800215 	stw	r18,8(sp)
    7b2c:	dc400115 	stw	r17,4(sp)
    7b30:	dc000015 	stw	r16,0(sp)
    7b34:	dfc00415 	stw	ra,16(sp)
    7b38:	10c0400c 	andi	r3,r2,256
    7b3c:	2821883a 	mov	r16,r5
    7b40:	2023883a 	mov	r17,r4
    7b44:	3025883a 	mov	r18,r6
    7b48:	3827883a 	mov	r19,r7
    7b4c:	18000526 	beq	r3,zero,7b64 <__swrite+0x48>
    7b50:	2940038f 	ldh	r5,14(r5)
    7b54:	01c00084 	movi	r7,2
    7b58:	000d883a 	mov	r6,zero
    7b5c:	00098540 	call	9854 <_lseek_r>
    7b60:	8080030b 	ldhu	r2,12(r16)
    7b64:	8140038f 	ldh	r5,14(r16)
    7b68:	10bbffcc 	andi	r2,r2,61439
    7b6c:	980f883a 	mov	r7,r19
    7b70:	900d883a 	mov	r6,r18
    7b74:	8809883a 	mov	r4,r17
    7b78:	8080030d 	sth	r2,12(r16)
    7b7c:	dfc00417 	ldw	ra,16(sp)
    7b80:	dcc00317 	ldw	r19,12(sp)
    7b84:	dc800217 	ldw	r18,8(sp)
    7b88:	dc400117 	ldw	r17,4(sp)
    7b8c:	dc000017 	ldw	r16,0(sp)
    7b90:	dec00504 	addi	sp,sp,20
    7b94:	00093201 	jmpi	9320 <_write_r>

00007b98 <__sseek>:
    7b98:	defffe04 	addi	sp,sp,-8
    7b9c:	dc000015 	stw	r16,0(sp)
    7ba0:	2821883a 	mov	r16,r5
    7ba4:	2940038f 	ldh	r5,14(r5)
    7ba8:	dfc00115 	stw	ra,4(sp)
    7bac:	00098540 	call	9854 <_lseek_r>
    7bb0:	00ffffc4 	movi	r3,-1
    7bb4:	10c00826 	beq	r2,r3,7bd8 <__sseek+0x40>
    7bb8:	80c0030b 	ldhu	r3,12(r16)
    7bbc:	80801415 	stw	r2,80(r16)
    7bc0:	18c40014 	ori	r3,r3,4096
    7bc4:	80c0030d 	sth	r3,12(r16)
    7bc8:	dfc00117 	ldw	ra,4(sp)
    7bcc:	dc000017 	ldw	r16,0(sp)
    7bd0:	dec00204 	addi	sp,sp,8
    7bd4:	f800283a 	ret
    7bd8:	80c0030b 	ldhu	r3,12(r16)
    7bdc:	18fbffcc 	andi	r3,r3,61439
    7be0:	80c0030d 	sth	r3,12(r16)
    7be4:	dfc00117 	ldw	ra,4(sp)
    7be8:	dc000017 	ldw	r16,0(sp)
    7bec:	dec00204 	addi	sp,sp,8
    7bf0:	f800283a 	ret

00007bf4 <__sclose>:
    7bf4:	2940038f 	ldh	r5,14(r5)
    7bf8:	00093801 	jmpi	9380 <_close_r>

00007bfc <strcmp>:
    7bfc:	2144b03a 	or	r2,r4,r5
    7c00:	108000cc 	andi	r2,r2,3
    7c04:	1000171e 	bne	r2,zero,7c64 <strcmp+0x68>
    7c08:	20800017 	ldw	r2,0(r4)
    7c0c:	28c00017 	ldw	r3,0(r5)
    7c10:	10c0141e 	bne	r2,r3,7c64 <strcmp+0x68>
    7c14:	027fbff4 	movhi	r9,65279
    7c18:	4a7fbfc4 	addi	r9,r9,-257
    7c1c:	0086303a 	nor	r3,zero,r2
    7c20:	02202074 	movhi	r8,32897
    7c24:	1245883a 	add	r2,r2,r9
    7c28:	42202004 	addi	r8,r8,-32640
    7c2c:	10c4703a 	and	r2,r2,r3
    7c30:	1204703a 	and	r2,r2,r8
    7c34:	10000226 	beq	r2,zero,7c40 <strcmp+0x44>
    7c38:	00002306 	br	7cc8 <strcmp+0xcc>
    7c3c:	1000221e 	bne	r2,zero,7cc8 <strcmp+0xcc>
    7c40:	21000104 	addi	r4,r4,4
    7c44:	20c00017 	ldw	r3,0(r4)
    7c48:	29400104 	addi	r5,r5,4
    7c4c:	29800017 	ldw	r6,0(r5)
    7c50:	1a4f883a 	add	r7,r3,r9
    7c54:	00c4303a 	nor	r2,zero,r3
    7c58:	3884703a 	and	r2,r7,r2
    7c5c:	1204703a 	and	r2,r2,r8
    7c60:	19bff626 	beq	r3,r6,7c3c <__alt_data_end+0xfffe7c3c>
    7c64:	20800003 	ldbu	r2,0(r4)
    7c68:	10c03fcc 	andi	r3,r2,255
    7c6c:	18c0201c 	xori	r3,r3,128
    7c70:	18ffe004 	addi	r3,r3,-128
    7c74:	18000c26 	beq	r3,zero,7ca8 <strcmp+0xac>
    7c78:	29800007 	ldb	r6,0(r5)
    7c7c:	19800326 	beq	r3,r6,7c8c <strcmp+0x90>
    7c80:	00001306 	br	7cd0 <strcmp+0xd4>
    7c84:	29800007 	ldb	r6,0(r5)
    7c88:	11800b1e 	bne	r2,r6,7cb8 <strcmp+0xbc>
    7c8c:	21000044 	addi	r4,r4,1
    7c90:	20c00003 	ldbu	r3,0(r4)
    7c94:	29400044 	addi	r5,r5,1
    7c98:	18803fcc 	andi	r2,r3,255
    7c9c:	1080201c 	xori	r2,r2,128
    7ca0:	10bfe004 	addi	r2,r2,-128
    7ca4:	103ff71e 	bne	r2,zero,7c84 <__alt_data_end+0xfffe7c84>
    7ca8:	0007883a 	mov	r3,zero
    7cac:	28800003 	ldbu	r2,0(r5)
    7cb0:	1885c83a 	sub	r2,r3,r2
    7cb4:	f800283a 	ret
    7cb8:	28800003 	ldbu	r2,0(r5)
    7cbc:	18c03fcc 	andi	r3,r3,255
    7cc0:	1885c83a 	sub	r2,r3,r2
    7cc4:	f800283a 	ret
    7cc8:	0005883a 	mov	r2,zero
    7ccc:	f800283a 	ret
    7cd0:	10c03fcc 	andi	r3,r2,255
    7cd4:	003ff506 	br	7cac <__alt_data_end+0xfffe7cac>

00007cd8 <__sprint_r.part.0>:
    7cd8:	28801917 	ldw	r2,100(r5)
    7cdc:	defff604 	addi	sp,sp,-40
    7ce0:	dd400515 	stw	r21,20(sp)
    7ce4:	dfc00915 	stw	ra,36(sp)
    7ce8:	df000815 	stw	fp,32(sp)
    7cec:	ddc00715 	stw	r23,28(sp)
    7cf0:	dd800615 	stw	r22,24(sp)
    7cf4:	dd000415 	stw	r20,16(sp)
    7cf8:	dcc00315 	stw	r19,12(sp)
    7cfc:	dc800215 	stw	r18,8(sp)
    7d00:	dc400115 	stw	r17,4(sp)
    7d04:	dc000015 	stw	r16,0(sp)
    7d08:	1088000c 	andi	r2,r2,8192
    7d0c:	302b883a 	mov	r21,r6
    7d10:	10002e26 	beq	r2,zero,7dcc <__sprint_r.part.0+0xf4>
    7d14:	30800217 	ldw	r2,8(r6)
    7d18:	35800017 	ldw	r22,0(r6)
    7d1c:	10002926 	beq	r2,zero,7dc4 <__sprint_r.part.0+0xec>
    7d20:	2827883a 	mov	r19,r5
    7d24:	2029883a 	mov	r20,r4
    7d28:	b5c00104 	addi	r23,r22,4
    7d2c:	04bfffc4 	movi	r18,-1
    7d30:	bc400017 	ldw	r17,0(r23)
    7d34:	b4000017 	ldw	r16,0(r22)
    7d38:	0039883a 	mov	fp,zero
    7d3c:	8822d0ba 	srli	r17,r17,2
    7d40:	8800031e 	bne	r17,zero,7d50 <__sprint_r.part.0+0x78>
    7d44:	00001806 	br	7da8 <__sprint_r.part.0+0xd0>
    7d48:	84000104 	addi	r16,r16,4
    7d4c:	8f001526 	beq	r17,fp,7da4 <__sprint_r.part.0+0xcc>
    7d50:	81400017 	ldw	r5,0(r16)
    7d54:	980d883a 	mov	r6,r19
    7d58:	a009883a 	mov	r4,r20
    7d5c:	00097000 	call	9700 <_fputwc_r>
    7d60:	e7000044 	addi	fp,fp,1
    7d64:	14bff81e 	bne	r2,r18,7d48 <__alt_data_end+0xfffe7d48>
    7d68:	9005883a 	mov	r2,r18
    7d6c:	a8000215 	stw	zero,8(r21)
    7d70:	a8000115 	stw	zero,4(r21)
    7d74:	dfc00917 	ldw	ra,36(sp)
    7d78:	df000817 	ldw	fp,32(sp)
    7d7c:	ddc00717 	ldw	r23,28(sp)
    7d80:	dd800617 	ldw	r22,24(sp)
    7d84:	dd400517 	ldw	r21,20(sp)
    7d88:	dd000417 	ldw	r20,16(sp)
    7d8c:	dcc00317 	ldw	r19,12(sp)
    7d90:	dc800217 	ldw	r18,8(sp)
    7d94:	dc400117 	ldw	r17,4(sp)
    7d98:	dc000017 	ldw	r16,0(sp)
    7d9c:	dec00a04 	addi	sp,sp,40
    7da0:	f800283a 	ret
    7da4:	a8800217 	ldw	r2,8(r21)
    7da8:	8c63883a 	add	r17,r17,r17
    7dac:	8c63883a 	add	r17,r17,r17
    7db0:	1445c83a 	sub	r2,r2,r17
    7db4:	a8800215 	stw	r2,8(r21)
    7db8:	b5800204 	addi	r22,r22,8
    7dbc:	bdc00204 	addi	r23,r23,8
    7dc0:	103fdb1e 	bne	r2,zero,7d30 <__alt_data_end+0xfffe7d30>
    7dc4:	0005883a 	mov	r2,zero
    7dc8:	003fe806 	br	7d6c <__alt_data_end+0xfffe7d6c>
    7dcc:	0004f000 	call	4f00 <__sfvwrite_r>
    7dd0:	003fe606 	br	7d6c <__alt_data_end+0xfffe7d6c>

00007dd4 <__sprint_r>:
    7dd4:	30c00217 	ldw	r3,8(r6)
    7dd8:	18000126 	beq	r3,zero,7de0 <__sprint_r+0xc>
    7ddc:	0007cd81 	jmpi	7cd8 <__sprint_r.part.0>
    7de0:	30000115 	stw	zero,4(r6)
    7de4:	0005883a 	mov	r2,zero
    7de8:	f800283a 	ret

00007dec <___vfiprintf_internal_r>:
    7dec:	deffc904 	addi	sp,sp,-220
    7df0:	df003515 	stw	fp,212(sp)
    7df4:	dd003115 	stw	r20,196(sp)
    7df8:	dfc03615 	stw	ra,216(sp)
    7dfc:	ddc03415 	stw	r23,208(sp)
    7e00:	dd803315 	stw	r22,204(sp)
    7e04:	dd403215 	stw	r21,200(sp)
    7e08:	dcc03015 	stw	r19,192(sp)
    7e0c:	dc802f15 	stw	r18,188(sp)
    7e10:	dc402e15 	stw	r17,184(sp)
    7e14:	dc002d15 	stw	r16,180(sp)
    7e18:	d9002015 	stw	r4,128(sp)
    7e1c:	d9c02215 	stw	r7,136(sp)
    7e20:	2829883a 	mov	r20,r5
    7e24:	3039883a 	mov	fp,r6
    7e28:	20000226 	beq	r4,zero,7e34 <___vfiprintf_internal_r+0x48>
    7e2c:	20800e17 	ldw	r2,56(r4)
    7e30:	1000cf26 	beq	r2,zero,8170 <___vfiprintf_internal_r+0x384>
    7e34:	a080030b 	ldhu	r2,12(r20)
    7e38:	10c8000c 	andi	r3,r2,8192
    7e3c:	1800061e 	bne	r3,zero,7e58 <___vfiprintf_internal_r+0x6c>
    7e40:	a1001917 	ldw	r4,100(r20)
    7e44:	00f7ffc4 	movi	r3,-8193
    7e48:	10880014 	ori	r2,r2,8192
    7e4c:	20c6703a 	and	r3,r4,r3
    7e50:	a080030d 	sth	r2,12(r20)
    7e54:	a0c01915 	stw	r3,100(r20)
    7e58:	10c0020c 	andi	r3,r2,8
    7e5c:	1800a926 	beq	r3,zero,8104 <___vfiprintf_internal_r+0x318>
    7e60:	a0c00417 	ldw	r3,16(r20)
    7e64:	1800a726 	beq	r3,zero,8104 <___vfiprintf_internal_r+0x318>
    7e68:	1080068c 	andi	r2,r2,26
    7e6c:	00c00284 	movi	r3,10
    7e70:	10c0ac26 	beq	r2,r3,8124 <___vfiprintf_internal_r+0x338>
    7e74:	da801a04 	addi	r10,sp,104
    7e78:	da801e15 	stw	r10,120(sp)
    7e7c:	d8801e17 	ldw	r2,120(sp)
    7e80:	da8019c4 	addi	r10,sp,103
    7e84:	05800074 	movhi	r22,1
    7e88:	05c00074 	movhi	r23,1
    7e8c:	da801f15 	stw	r10,124(sp)
    7e90:	1295c83a 	sub	r10,r2,r10
    7e94:	b5bdac04 	addi	r22,r22,-2384
    7e98:	bdfda804 	addi	r23,r23,-2400
    7e9c:	dec01a15 	stw	sp,104(sp)
    7ea0:	d8001c15 	stw	zero,112(sp)
    7ea4:	d8001b15 	stw	zero,108(sp)
    7ea8:	d8002615 	stw	zero,152(sp)
    7eac:	d8002315 	stw	zero,140(sp)
    7eb0:	da802715 	stw	r10,156(sp)
    7eb4:	d811883a 	mov	r8,sp
    7eb8:	dd002115 	stw	r20,132(sp)
    7ebc:	e021883a 	mov	r16,fp
    7ec0:	80800007 	ldb	r2,0(r16)
    7ec4:	1003ea26 	beq	r2,zero,8e70 <___vfiprintf_internal_r+0x1084>
    7ec8:	00c00944 	movi	r3,37
    7ecc:	8025883a 	mov	r18,r16
    7ed0:	10c0021e 	bne	r2,r3,7edc <___vfiprintf_internal_r+0xf0>
    7ed4:	00001606 	br	7f30 <___vfiprintf_internal_r+0x144>
    7ed8:	10c00326 	beq	r2,r3,7ee8 <___vfiprintf_internal_r+0xfc>
    7edc:	94800044 	addi	r18,r18,1
    7ee0:	90800007 	ldb	r2,0(r18)
    7ee4:	103ffc1e 	bne	r2,zero,7ed8 <__alt_data_end+0xfffe7ed8>
    7ee8:	9423c83a 	sub	r17,r18,r16
    7eec:	88001026 	beq	r17,zero,7f30 <___vfiprintf_internal_r+0x144>
    7ef0:	d8c01c17 	ldw	r3,112(sp)
    7ef4:	d8801b17 	ldw	r2,108(sp)
    7ef8:	44000015 	stw	r16,0(r8)
    7efc:	88c7883a 	add	r3,r17,r3
    7f00:	10800044 	addi	r2,r2,1
    7f04:	44400115 	stw	r17,4(r8)
    7f08:	d8c01c15 	stw	r3,112(sp)
    7f0c:	d8801b15 	stw	r2,108(sp)
    7f10:	010001c4 	movi	r4,7
    7f14:	2080760e 	bge	r4,r2,80f0 <___vfiprintf_internal_r+0x304>
    7f18:	1803821e 	bne	r3,zero,8d24 <___vfiprintf_internal_r+0xf38>
    7f1c:	da802317 	ldw	r10,140(sp)
    7f20:	d8001b15 	stw	zero,108(sp)
    7f24:	d811883a 	mov	r8,sp
    7f28:	5455883a 	add	r10,r10,r17
    7f2c:	da802315 	stw	r10,140(sp)
    7f30:	90800007 	ldb	r2,0(r18)
    7f34:	10044626 	beq	r2,zero,9050 <___vfiprintf_internal_r+0x1264>
    7f38:	90c00047 	ldb	r3,1(r18)
    7f3c:	94000044 	addi	r16,r18,1
    7f40:	d8001d85 	stb	zero,118(sp)
    7f44:	0009883a 	mov	r4,zero
    7f48:	000f883a 	mov	r7,zero
    7f4c:	027fffc4 	movi	r9,-1
    7f50:	0023883a 	mov	r17,zero
    7f54:	0029883a 	mov	r20,zero
    7f58:	01401604 	movi	r5,88
    7f5c:	01800244 	movi	r6,9
    7f60:	03400a84 	movi	r13,42
    7f64:	03001b04 	movi	r12,108
    7f68:	84000044 	addi	r16,r16,1
    7f6c:	18bff804 	addi	r2,r3,-32
    7f70:	28827336 	bltu	r5,r2,8940 <___vfiprintf_internal_r+0xb54>
    7f74:	100490ba 	slli	r2,r2,2
    7f78:	02800034 	movhi	r10,0
    7f7c:	529fe304 	addi	r10,r10,32652
    7f80:	1285883a 	add	r2,r2,r10
    7f84:	10800017 	ldw	r2,0(r2)
    7f88:	1000683a 	jmp	r2
    7f8c:	00008674 	movhi	zero,537
    7f90:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    7f94:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    7f98:	00008694 	movui	zero,538
    7f9c:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    7fa0:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    7fa4:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    7fa8:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    7fac:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    7fb0:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    7fb4:	0000887c 	xorhi	zero,zero,545
    7fb8:	00008898 	cmpnei	zero,zero,546
    7fbc:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    7fc0:	00008180 	call	818 <___vfprintf_internal_r+0x40>
    7fc4:	000088a8 	cmpgeui	zero,zero,546
    7fc8:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    7fcc:	000086a0 	cmpeqi	zero,zero,538
    7fd0:	000086ac 	andhi	zero,zero,538
    7fd4:	000086ac 	andhi	zero,zero,538
    7fd8:	000086ac 	andhi	zero,zero,538
    7fdc:	000086ac 	andhi	zero,zero,538
    7fe0:	000086ac 	andhi	zero,zero,538
    7fe4:	000086ac 	andhi	zero,zero,538
    7fe8:	000086ac 	andhi	zero,zero,538
    7fec:	000086ac 	andhi	zero,zero,538
    7ff0:	000086ac 	andhi	zero,zero,538
    7ff4:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    7ff8:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    7ffc:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8000:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8004:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8008:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    800c:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8010:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8014:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8018:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    801c:	000086d8 	cmpnei	zero,zero,539
    8020:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8024:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8028:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    802c:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8030:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8034:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8038:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    803c:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8040:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8044:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8048:	00008710 	cmplti	zero,zero,540
    804c:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8050:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8054:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8058:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    805c:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8060:	00008768 	cmpgeui	zero,zero,541
    8064:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8068:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    806c:	000087d8 	cmpnei	zero,zero,543
    8070:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8074:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8078:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    807c:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8080:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8084:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8088:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    808c:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8090:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8094:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    8098:	00008584 	movi	zero,534
    809c:	000085b0 	cmpltui	zero,zero,534
    80a0:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    80a4:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    80a8:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    80ac:	000088e8 	cmpgeui	zero,zero,547
    80b0:	000085b0 	cmpltui	zero,zero,534
    80b4:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    80b8:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    80bc:	00008444 	movi	zero,529
    80c0:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    80c4:	00008454 	movui	zero,529
    80c8:	00008490 	cmplti	zero,zero,530
    80cc:	0000818c 	andi	zero,zero,518
    80d0:	00008438 	rdprs	zero,zero,528
    80d4:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    80d8:	00008814 	movui	zero,544
    80dc:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    80e0:	0000886c 	andhi	zero,zero,545
    80e4:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    80e8:	00008940 	call	894 <___vfprintf_internal_r+0xbc>
    80ec:	00008530 	cmpltui	zero,zero,532
    80f0:	42000204 	addi	r8,r8,8
    80f4:	da802317 	ldw	r10,140(sp)
    80f8:	5455883a 	add	r10,r10,r17
    80fc:	da802315 	stw	r10,140(sp)
    8100:	003f8b06 	br	7f30 <__alt_data_end+0xfffe7f30>
    8104:	d9002017 	ldw	r4,128(sp)
    8108:	a00b883a 	mov	r5,r20
    810c:	0002aa80 	call	2aa8 <__swsetup_r>
    8110:	1003b11e 	bne	r2,zero,8fd8 <___vfiprintf_internal_r+0x11ec>
    8114:	a080030b 	ldhu	r2,12(r20)
    8118:	00c00284 	movi	r3,10
    811c:	1080068c 	andi	r2,r2,26
    8120:	10ff541e 	bne	r2,r3,7e74 <__alt_data_end+0xfffe7e74>
    8124:	a080038f 	ldh	r2,14(r20)
    8128:	103f5216 	blt	r2,zero,7e74 <__alt_data_end+0xfffe7e74>
    812c:	d9c02217 	ldw	r7,136(sp)
    8130:	d9002017 	ldw	r4,128(sp)
    8134:	e00d883a 	mov	r6,fp
    8138:	a00b883a 	mov	r5,r20
    813c:	00092640 	call	9264 <__sbprintf>
    8140:	dfc03617 	ldw	ra,216(sp)
    8144:	df003517 	ldw	fp,212(sp)
    8148:	ddc03417 	ldw	r23,208(sp)
    814c:	dd803317 	ldw	r22,204(sp)
    8150:	dd403217 	ldw	r21,200(sp)
    8154:	dd003117 	ldw	r20,196(sp)
    8158:	dcc03017 	ldw	r19,192(sp)
    815c:	dc802f17 	ldw	r18,188(sp)
    8160:	dc402e17 	ldw	r17,184(sp)
    8164:	dc002d17 	ldw	r16,180(sp)
    8168:	dec03704 	addi	sp,sp,220
    816c:	f800283a 	ret
    8170:	0004a7c0 	call	4a7c <__sinit>
    8174:	003f2f06 	br	7e34 <__alt_data_end+0xfffe7e34>
    8178:	0463c83a 	sub	r17,zero,r17
    817c:	d8802215 	stw	r2,136(sp)
    8180:	a5000114 	ori	r20,r20,4
    8184:	80c00007 	ldb	r3,0(r16)
    8188:	003f7706 	br	7f68 <__alt_data_end+0xfffe7f68>
    818c:	00800c04 	movi	r2,48
    8190:	da802217 	ldw	r10,136(sp)
    8194:	d8801d05 	stb	r2,116(sp)
    8198:	00801e04 	movi	r2,120
    819c:	d8801d45 	stb	r2,117(sp)
    81a0:	d8001d85 	stb	zero,118(sp)
    81a4:	50c00104 	addi	r3,r10,4
    81a8:	54800017 	ldw	r18,0(r10)
    81ac:	0027883a 	mov	r19,zero
    81b0:	a0800094 	ori	r2,r20,2
    81b4:	48030b16 	blt	r9,zero,8de4 <___vfiprintf_internal_r+0xff8>
    81b8:	00bfdfc4 	movi	r2,-129
    81bc:	a096703a 	and	r11,r20,r2
    81c0:	d8c02215 	stw	r3,136(sp)
    81c4:	5d000094 	ori	r20,r11,2
    81c8:	90032b1e 	bne	r18,zero,8e78 <___vfiprintf_internal_r+0x108c>
    81cc:	00800074 	movhi	r2,1
    81d0:	10bd4704 	addi	r2,r2,-2788
    81d4:	d8802615 	stw	r2,152(sp)
    81d8:	0039883a 	mov	fp,zero
    81dc:	48017b1e 	bne	r9,zero,87cc <___vfiprintf_internal_r+0x9e0>
    81e0:	0013883a 	mov	r9,zero
    81e4:	0027883a 	mov	r19,zero
    81e8:	dd401a04 	addi	r21,sp,104
    81ec:	4825883a 	mov	r18,r9
    81f0:	4cc0010e 	bge	r9,r19,81f8 <___vfiprintf_internal_r+0x40c>
    81f4:	9825883a 	mov	r18,r19
    81f8:	e7003fcc 	andi	fp,fp,255
    81fc:	e700201c 	xori	fp,fp,128
    8200:	e73fe004 	addi	fp,fp,-128
    8204:	e0000126 	beq	fp,zero,820c <___vfiprintf_internal_r+0x420>
    8208:	94800044 	addi	r18,r18,1
    820c:	a380008c 	andi	r14,r20,2
    8210:	70000126 	beq	r14,zero,8218 <___vfiprintf_internal_r+0x42c>
    8214:	94800084 	addi	r18,r18,2
    8218:	a700210c 	andi	fp,r20,132
    821c:	e001df1e 	bne	fp,zero,899c <___vfiprintf_internal_r+0xbb0>
    8220:	8c87c83a 	sub	r3,r17,r18
    8224:	00c1dd0e 	bge	zero,r3,899c <___vfiprintf_internal_r+0xbb0>
    8228:	01c00404 	movi	r7,16
    822c:	d8801c17 	ldw	r2,112(sp)
    8230:	38c3ad0e 	bge	r7,r3,90e8 <___vfiprintf_internal_r+0x12fc>
    8234:	02800074 	movhi	r10,1
    8238:	52bdac04 	addi	r10,r10,-2384
    823c:	dc002915 	stw	r16,164(sp)
    8240:	d9801b17 	ldw	r6,108(sp)
    8244:	da802415 	stw	r10,144(sp)
    8248:	03c001c4 	movi	r15,7
    824c:	da402515 	stw	r9,148(sp)
    8250:	db802815 	stw	r14,160(sp)
    8254:	1821883a 	mov	r16,r3
    8258:	00000506 	br	8270 <___vfiprintf_internal_r+0x484>
    825c:	31400084 	addi	r5,r6,2
    8260:	42000204 	addi	r8,r8,8
    8264:	200d883a 	mov	r6,r4
    8268:	843ffc04 	addi	r16,r16,-16
    826c:	3c000d0e 	bge	r7,r16,82a4 <___vfiprintf_internal_r+0x4b8>
    8270:	10800404 	addi	r2,r2,16
    8274:	31000044 	addi	r4,r6,1
    8278:	45800015 	stw	r22,0(r8)
    827c:	41c00115 	stw	r7,4(r8)
    8280:	d8801c15 	stw	r2,112(sp)
    8284:	d9001b15 	stw	r4,108(sp)
    8288:	793ff40e 	bge	r15,r4,825c <__alt_data_end+0xfffe825c>
    828c:	1001b51e 	bne	r2,zero,8964 <___vfiprintf_internal_r+0xb78>
    8290:	843ffc04 	addi	r16,r16,-16
    8294:	000d883a 	mov	r6,zero
    8298:	01400044 	movi	r5,1
    829c:	d811883a 	mov	r8,sp
    82a0:	3c3ff316 	blt	r7,r16,8270 <__alt_data_end+0xfffe8270>
    82a4:	8007883a 	mov	r3,r16
    82a8:	da402517 	ldw	r9,148(sp)
    82ac:	db802817 	ldw	r14,160(sp)
    82b0:	dc002917 	ldw	r16,164(sp)
    82b4:	da802417 	ldw	r10,144(sp)
    82b8:	1885883a 	add	r2,r3,r2
    82bc:	40c00115 	stw	r3,4(r8)
    82c0:	42800015 	stw	r10,0(r8)
    82c4:	d8801c15 	stw	r2,112(sp)
    82c8:	d9401b15 	stw	r5,108(sp)
    82cc:	00c001c4 	movi	r3,7
    82d0:	19426016 	blt	r3,r5,8c54 <___vfiprintf_internal_r+0xe68>
    82d4:	d8c01d87 	ldb	r3,118(sp)
    82d8:	42000204 	addi	r8,r8,8
    82dc:	29000044 	addi	r4,r5,1
    82e0:	1801b31e 	bne	r3,zero,89b0 <___vfiprintf_internal_r+0xbc4>
    82e4:	7001c026 	beq	r14,zero,89e8 <___vfiprintf_internal_r+0xbfc>
    82e8:	d8c01d04 	addi	r3,sp,116
    82ec:	10800084 	addi	r2,r2,2
    82f0:	40c00015 	stw	r3,0(r8)
    82f4:	00c00084 	movi	r3,2
    82f8:	40c00115 	stw	r3,4(r8)
    82fc:	d8801c15 	stw	r2,112(sp)
    8300:	d9001b15 	stw	r4,108(sp)
    8304:	00c001c4 	movi	r3,7
    8308:	1902650e 	bge	r3,r4,8ca0 <___vfiprintf_internal_r+0xeb4>
    830c:	10029a1e 	bne	r2,zero,8d78 <___vfiprintf_internal_r+0xf8c>
    8310:	00c02004 	movi	r3,128
    8314:	01000044 	movi	r4,1
    8318:	000b883a 	mov	r5,zero
    831c:	d811883a 	mov	r8,sp
    8320:	e0c1b31e 	bne	fp,r3,89f0 <___vfiprintf_internal_r+0xc04>
    8324:	8cb9c83a 	sub	fp,r17,r18
    8328:	0701b10e 	bge	zero,fp,89f0 <___vfiprintf_internal_r+0xc04>
    832c:	01c00404 	movi	r7,16
    8330:	3f03890e 	bge	r7,fp,9158 <___vfiprintf_internal_r+0x136c>
    8334:	00c00074 	movhi	r3,1
    8338:	18fda804 	addi	r3,r3,-2400
    833c:	d8c02415 	stw	r3,144(sp)
    8340:	8007883a 	mov	r3,r16
    8344:	034001c4 	movi	r13,7
    8348:	e021883a 	mov	r16,fp
    834c:	da402515 	stw	r9,148(sp)
    8350:	1839883a 	mov	fp,r3
    8354:	00000506 	br	836c <___vfiprintf_internal_r+0x580>
    8358:	29800084 	addi	r6,r5,2
    835c:	42000204 	addi	r8,r8,8
    8360:	180b883a 	mov	r5,r3
    8364:	843ffc04 	addi	r16,r16,-16
    8368:	3c000d0e 	bge	r7,r16,83a0 <___vfiprintf_internal_r+0x5b4>
    836c:	10800404 	addi	r2,r2,16
    8370:	28c00044 	addi	r3,r5,1
    8374:	45c00015 	stw	r23,0(r8)
    8378:	41c00115 	stw	r7,4(r8)
    837c:	d8801c15 	stw	r2,112(sp)
    8380:	d8c01b15 	stw	r3,108(sp)
    8384:	68fff40e 	bge	r13,r3,8358 <__alt_data_end+0xfffe8358>
    8388:	1002241e 	bne	r2,zero,8c1c <___vfiprintf_internal_r+0xe30>
    838c:	843ffc04 	addi	r16,r16,-16
    8390:	01800044 	movi	r6,1
    8394:	000b883a 	mov	r5,zero
    8398:	d811883a 	mov	r8,sp
    839c:	3c3ff316 	blt	r7,r16,836c <__alt_data_end+0xfffe836c>
    83a0:	da402517 	ldw	r9,148(sp)
    83a4:	e007883a 	mov	r3,fp
    83a8:	8039883a 	mov	fp,r16
    83ac:	1821883a 	mov	r16,r3
    83b0:	d8c02417 	ldw	r3,144(sp)
    83b4:	1705883a 	add	r2,r2,fp
    83b8:	47000115 	stw	fp,4(r8)
    83bc:	40c00015 	stw	r3,0(r8)
    83c0:	d8801c15 	stw	r2,112(sp)
    83c4:	d9801b15 	stw	r6,108(sp)
    83c8:	00c001c4 	movi	r3,7
    83cc:	19827616 	blt	r3,r6,8da8 <___vfiprintf_internal_r+0xfbc>
    83d0:	4cf9c83a 	sub	fp,r9,r19
    83d4:	42000204 	addi	r8,r8,8
    83d8:	31000044 	addi	r4,r6,1
    83dc:	300b883a 	mov	r5,r6
    83e0:	07018516 	blt	zero,fp,89f8 <___vfiprintf_internal_r+0xc0c>
    83e4:	9885883a 	add	r2,r19,r2
    83e8:	45400015 	stw	r21,0(r8)
    83ec:	44c00115 	stw	r19,4(r8)
    83f0:	d8801c15 	stw	r2,112(sp)
    83f4:	d9001b15 	stw	r4,108(sp)
    83f8:	00c001c4 	movi	r3,7
    83fc:	1901dd0e 	bge	r3,r4,8b74 <___vfiprintf_internal_r+0xd88>
    8400:	1002401e 	bne	r2,zero,8d04 <___vfiprintf_internal_r+0xf18>
    8404:	d8001b15 	stw	zero,108(sp)
    8408:	a2c0010c 	andi	r11,r20,4
    840c:	58000226 	beq	r11,zero,8418 <___vfiprintf_internal_r+0x62c>
    8410:	8ca7c83a 	sub	r19,r17,r18
    8414:	04c2f216 	blt	zero,r19,8fe0 <___vfiprintf_internal_r+0x11f4>
    8418:	8c80010e 	bge	r17,r18,8420 <___vfiprintf_internal_r+0x634>
    841c:	9023883a 	mov	r17,r18
    8420:	da802317 	ldw	r10,140(sp)
    8424:	5455883a 	add	r10,r10,r17
    8428:	da802315 	stw	r10,140(sp)
    842c:	d8001b15 	stw	zero,108(sp)
    8430:	d811883a 	mov	r8,sp
    8434:	003ea206 	br	7ec0 <__alt_data_end+0xfffe7ec0>
    8438:	a5000814 	ori	r20,r20,32
    843c:	80c00007 	ldb	r3,0(r16)
    8440:	003ec906 	br	7f68 <__alt_data_end+0xfffe7f68>
    8444:	80c00007 	ldb	r3,0(r16)
    8448:	1b030926 	beq	r3,r12,9070 <___vfiprintf_internal_r+0x1284>
    844c:	a5000414 	ori	r20,r20,16
    8450:	003ec506 	br	7f68 <__alt_data_end+0xfffe7f68>
    8454:	21003fcc 	andi	r4,r4,255
    8458:	20035e1e 	bne	r4,zero,91d4 <___vfiprintf_internal_r+0x13e8>
    845c:	a080080c 	andi	r2,r20,32
    8460:	1002a526 	beq	r2,zero,8ef8 <___vfiprintf_internal_r+0x110c>
    8464:	da802217 	ldw	r10,136(sp)
    8468:	50800017 	ldw	r2,0(r10)
    846c:	da802317 	ldw	r10,140(sp)
    8470:	5007d7fa 	srai	r3,r10,31
    8474:	da802217 	ldw	r10,136(sp)
    8478:	10c00115 	stw	r3,4(r2)
    847c:	52800104 	addi	r10,r10,4
    8480:	da802215 	stw	r10,136(sp)
    8484:	da802317 	ldw	r10,140(sp)
    8488:	12800015 	stw	r10,0(r2)
    848c:	003e8c06 	br	7ec0 <__alt_data_end+0xfffe7ec0>
    8490:	21003fcc 	andi	r4,r4,255
    8494:	2003511e 	bne	r4,zero,91dc <___vfiprintf_internal_r+0x13f0>
    8498:	a080080c 	andi	r2,r20,32
    849c:	1000a126 	beq	r2,zero,8724 <___vfiprintf_internal_r+0x938>
    84a0:	da802217 	ldw	r10,136(sp)
    84a4:	d8001d85 	stb	zero,118(sp)
    84a8:	50800204 	addi	r2,r10,8
    84ac:	54800017 	ldw	r18,0(r10)
    84b0:	54c00117 	ldw	r19,4(r10)
    84b4:	4802b416 	blt	r9,zero,8f88 <___vfiprintf_internal_r+0x119c>
    84b8:	013fdfc4 	movi	r4,-129
    84bc:	94c6b03a 	or	r3,r18,r19
    84c0:	d8802215 	stw	r2,136(sp)
    84c4:	a128703a 	and	r20,r20,r4
    84c8:	1800a226 	beq	r3,zero,8754 <___vfiprintf_internal_r+0x968>
    84cc:	0039883a 	mov	fp,zero
    84d0:	dd401a04 	addi	r21,sp,104
    84d4:	9006d0fa 	srli	r3,r18,3
    84d8:	9808977a 	slli	r4,r19,29
    84dc:	9826d0fa 	srli	r19,r19,3
    84e0:	948001cc 	andi	r18,r18,7
    84e4:	90800c04 	addi	r2,r18,48
    84e8:	ad7fffc4 	addi	r21,r21,-1
    84ec:	20e4b03a 	or	r18,r4,r3
    84f0:	a8800005 	stb	r2,0(r21)
    84f4:	94c6b03a 	or	r3,r18,r19
    84f8:	183ff61e 	bne	r3,zero,84d4 <__alt_data_end+0xfffe84d4>
    84fc:	a0c0004c 	andi	r3,r20,1
    8500:	18005926 	beq	r3,zero,8668 <___vfiprintf_internal_r+0x87c>
    8504:	10803fcc 	andi	r2,r2,255
    8508:	1080201c 	xori	r2,r2,128
    850c:	10bfe004 	addi	r2,r2,-128
    8510:	00c00c04 	movi	r3,48
    8514:	10c05426 	beq	r2,r3,8668 <___vfiprintf_internal_r+0x87c>
    8518:	da801e17 	ldw	r10,120(sp)
    851c:	a8bfffc4 	addi	r2,r21,-1
    8520:	a8ffffc5 	stb	r3,-1(r21)
    8524:	50a7c83a 	sub	r19,r10,r2
    8528:	102b883a 	mov	r21,r2
    852c:	003f2f06 	br	81ec <__alt_data_end+0xfffe81ec>
    8530:	21003fcc 	andi	r4,r4,255
    8534:	2003421e 	bne	r4,zero,9240 <___vfiprintf_internal_r+0x1454>
    8538:	00800074 	movhi	r2,1
    853c:	10bd4704 	addi	r2,r2,-2788
    8540:	d8802615 	stw	r2,152(sp)
    8544:	a080080c 	andi	r2,r20,32
    8548:	1000aa26 	beq	r2,zero,87f4 <___vfiprintf_internal_r+0xa08>
    854c:	da802217 	ldw	r10,136(sp)
    8550:	54800017 	ldw	r18,0(r10)
    8554:	54c00117 	ldw	r19,4(r10)
    8558:	52800204 	addi	r10,r10,8
    855c:	da802215 	stw	r10,136(sp)
    8560:	a080004c 	andi	r2,r20,1
    8564:	1001d226 	beq	r2,zero,8cb0 <___vfiprintf_internal_r+0xec4>
    8568:	94c4b03a 	or	r2,r18,r19
    856c:	1002351e 	bne	r2,zero,8e44 <___vfiprintf_internal_r+0x1058>
    8570:	d8001d85 	stb	zero,118(sp)
    8574:	48022216 	blt	r9,zero,8e00 <___vfiprintf_internal_r+0x1014>
    8578:	00bfdfc4 	movi	r2,-129
    857c:	a0a8703a 	and	r20,r20,r2
    8580:	003f1506 	br	81d8 <__alt_data_end+0xfffe81d8>
    8584:	da802217 	ldw	r10,136(sp)
    8588:	04800044 	movi	r18,1
    858c:	d8001d85 	stb	zero,118(sp)
    8590:	50800017 	ldw	r2,0(r10)
    8594:	52800104 	addi	r10,r10,4
    8598:	da802215 	stw	r10,136(sp)
    859c:	d8801005 	stb	r2,64(sp)
    85a0:	9027883a 	mov	r19,r18
    85a4:	dd401004 	addi	r21,sp,64
    85a8:	0013883a 	mov	r9,zero
    85ac:	003f1706 	br	820c <__alt_data_end+0xfffe820c>
    85b0:	21003fcc 	andi	r4,r4,255
    85b4:	2003201e 	bne	r4,zero,9238 <___vfiprintf_internal_r+0x144c>
    85b8:	a080080c 	andi	r2,r20,32
    85bc:	10004b26 	beq	r2,zero,86ec <___vfiprintf_internal_r+0x900>
    85c0:	da802217 	ldw	r10,136(sp)
    85c4:	50800117 	ldw	r2,4(r10)
    85c8:	54800017 	ldw	r18,0(r10)
    85cc:	52800204 	addi	r10,r10,8
    85d0:	da802215 	stw	r10,136(sp)
    85d4:	1027883a 	mov	r19,r2
    85d8:	10022c16 	blt	r2,zero,8e8c <___vfiprintf_internal_r+0x10a0>
    85dc:	df001d83 	ldbu	fp,118(sp)
    85e0:	48007216 	blt	r9,zero,87ac <___vfiprintf_internal_r+0x9c0>
    85e4:	00ffdfc4 	movi	r3,-129
    85e8:	94c4b03a 	or	r2,r18,r19
    85ec:	a0e8703a 	and	r20,r20,r3
    85f0:	1000cc26 	beq	r2,zero,8924 <___vfiprintf_internal_r+0xb38>
    85f4:	98021026 	beq	r19,zero,8e38 <___vfiprintf_internal_r+0x104c>
    85f8:	dc402415 	stw	r17,144(sp)
    85fc:	dc002515 	stw	r16,148(sp)
    8600:	9823883a 	mov	r17,r19
    8604:	9021883a 	mov	r16,r18
    8608:	dd401a04 	addi	r21,sp,104
    860c:	4825883a 	mov	r18,r9
    8610:	4027883a 	mov	r19,r8
    8614:	8009883a 	mov	r4,r16
    8618:	880b883a 	mov	r5,r17
    861c:	01800284 	movi	r6,10
    8620:	000f883a 	mov	r7,zero
    8624:	000a1cc0 	call	a1cc <__umoddi3>
    8628:	10800c04 	addi	r2,r2,48
    862c:	ad7fffc4 	addi	r21,r21,-1
    8630:	8009883a 	mov	r4,r16
    8634:	880b883a 	mov	r5,r17
    8638:	a8800005 	stb	r2,0(r21)
    863c:	01800284 	movi	r6,10
    8640:	000f883a 	mov	r7,zero
    8644:	0009c540 	call	9c54 <__udivdi3>
    8648:	1021883a 	mov	r16,r2
    864c:	10c4b03a 	or	r2,r2,r3
    8650:	1823883a 	mov	r17,r3
    8654:	103fef1e 	bne	r2,zero,8614 <__alt_data_end+0xfffe8614>
    8658:	dc402417 	ldw	r17,144(sp)
    865c:	dc002517 	ldw	r16,148(sp)
    8660:	9013883a 	mov	r9,r18
    8664:	9811883a 	mov	r8,r19
    8668:	da801e17 	ldw	r10,120(sp)
    866c:	5567c83a 	sub	r19,r10,r21
    8670:	003ede06 	br	81ec <__alt_data_end+0xfffe81ec>
    8674:	38803fcc 	andi	r2,r7,255
    8678:	1080201c 	xori	r2,r2,128
    867c:	10bfe004 	addi	r2,r2,-128
    8680:	1002371e 	bne	r2,zero,8f60 <___vfiprintf_internal_r+0x1174>
    8684:	01000044 	movi	r4,1
    8688:	01c00804 	movi	r7,32
    868c:	80c00007 	ldb	r3,0(r16)
    8690:	003e3506 	br	7f68 <__alt_data_end+0xfffe7f68>
    8694:	a5000054 	ori	r20,r20,1
    8698:	80c00007 	ldb	r3,0(r16)
    869c:	003e3206 	br	7f68 <__alt_data_end+0xfffe7f68>
    86a0:	a5002014 	ori	r20,r20,128
    86a4:	80c00007 	ldb	r3,0(r16)
    86a8:	003e2f06 	br	7f68 <__alt_data_end+0xfffe7f68>
    86ac:	8015883a 	mov	r10,r16
    86b0:	0023883a 	mov	r17,zero
    86b4:	18bff404 	addi	r2,r3,-48
    86b8:	50c00007 	ldb	r3,0(r10)
    86bc:	8c4002a4 	muli	r17,r17,10
    86c0:	84000044 	addi	r16,r16,1
    86c4:	8015883a 	mov	r10,r16
    86c8:	1463883a 	add	r17,r2,r17
    86cc:	18bff404 	addi	r2,r3,-48
    86d0:	30bff92e 	bgeu	r6,r2,86b8 <__alt_data_end+0xfffe86b8>
    86d4:	003e2506 	br	7f6c <__alt_data_end+0xfffe7f6c>
    86d8:	21003fcc 	andi	r4,r4,255
    86dc:	2002d41e 	bne	r4,zero,9230 <___vfiprintf_internal_r+0x1444>
    86e0:	a5000414 	ori	r20,r20,16
    86e4:	a080080c 	andi	r2,r20,32
    86e8:	103fb51e 	bne	r2,zero,85c0 <__alt_data_end+0xfffe85c0>
    86ec:	a080040c 	andi	r2,r20,16
    86f0:	1001f826 	beq	r2,zero,8ed4 <___vfiprintf_internal_r+0x10e8>
    86f4:	da802217 	ldw	r10,136(sp)
    86f8:	54800017 	ldw	r18,0(r10)
    86fc:	52800104 	addi	r10,r10,4
    8700:	da802215 	stw	r10,136(sp)
    8704:	9027d7fa 	srai	r19,r18,31
    8708:	9805883a 	mov	r2,r19
    870c:	003fb206 	br	85d8 <__alt_data_end+0xfffe85d8>
    8710:	21003fcc 	andi	r4,r4,255
    8714:	2002c41e 	bne	r4,zero,9228 <___vfiprintf_internal_r+0x143c>
    8718:	a5000414 	ori	r20,r20,16
    871c:	a080080c 	andi	r2,r20,32
    8720:	103f5f1e 	bne	r2,zero,84a0 <__alt_data_end+0xfffe84a0>
    8724:	a080040c 	andi	r2,r20,16
    8728:	10020f26 	beq	r2,zero,8f68 <___vfiprintf_internal_r+0x117c>
    872c:	da802217 	ldw	r10,136(sp)
    8730:	d8001d85 	stb	zero,118(sp)
    8734:	0027883a 	mov	r19,zero
    8738:	50800104 	addi	r2,r10,4
    873c:	54800017 	ldw	r18,0(r10)
    8740:	48021116 	blt	r9,zero,8f88 <___vfiprintf_internal_r+0x119c>
    8744:	00ffdfc4 	movi	r3,-129
    8748:	d8802215 	stw	r2,136(sp)
    874c:	a0e8703a 	and	r20,r20,r3
    8750:	903f5e1e 	bne	r18,zero,84cc <__alt_data_end+0xfffe84cc>
    8754:	0039883a 	mov	fp,zero
    8758:	4802a626 	beq	r9,zero,91f4 <___vfiprintf_internal_r+0x1408>
    875c:	0025883a 	mov	r18,zero
    8760:	0027883a 	mov	r19,zero
    8764:	003f5a06 	br	84d0 <__alt_data_end+0xfffe84d0>
    8768:	21003fcc 	andi	r4,r4,255
    876c:	20029f1e 	bne	r4,zero,91ec <___vfiprintf_internal_r+0x1400>
    8770:	a5000414 	ori	r20,r20,16
    8774:	a080080c 	andi	r2,r20,32
    8778:	10005e1e 	bne	r2,zero,88f4 <___vfiprintf_internal_r+0xb08>
    877c:	a080040c 	andi	r2,r20,16
    8780:	1001a21e 	bne	r2,zero,8e0c <___vfiprintf_internal_r+0x1020>
    8784:	a080100c 	andi	r2,r20,64
    8788:	d8001d85 	stb	zero,118(sp)
    878c:	da802217 	ldw	r10,136(sp)
    8790:	1002231e 	bne	r2,zero,9020 <___vfiprintf_internal_r+0x1234>
    8794:	50800104 	addi	r2,r10,4
    8798:	54800017 	ldw	r18,0(r10)
    879c:	0027883a 	mov	r19,zero
    87a0:	4801a00e 	bge	r9,zero,8e24 <___vfiprintf_internal_r+0x1038>
    87a4:	d8802215 	stw	r2,136(sp)
    87a8:	0039883a 	mov	fp,zero
    87ac:	94c4b03a 	or	r2,r18,r19
    87b0:	103f901e 	bne	r2,zero,85f4 <__alt_data_end+0xfffe85f4>
    87b4:	00800044 	movi	r2,1
    87b8:	10803fcc 	andi	r2,r2,255
    87bc:	00c00044 	movi	r3,1
    87c0:	10c05926 	beq	r2,r3,8928 <___vfiprintf_internal_r+0xb3c>
    87c4:	00c00084 	movi	r3,2
    87c8:	10ffe41e 	bne	r2,r3,875c <__alt_data_end+0xfffe875c>
    87cc:	0025883a 	mov	r18,zero
    87d0:	0027883a 	mov	r19,zero
    87d4:	00013d06 	br	8ccc <___vfiprintf_internal_r+0xee0>
    87d8:	21003fcc 	andi	r4,r4,255
    87dc:	2002811e 	bne	r4,zero,91e4 <___vfiprintf_internal_r+0x13f8>
    87e0:	00800074 	movhi	r2,1
    87e4:	10bd4204 	addi	r2,r2,-2808
    87e8:	d8802615 	stw	r2,152(sp)
    87ec:	a080080c 	andi	r2,r20,32
    87f0:	103f561e 	bne	r2,zero,854c <__alt_data_end+0xfffe854c>
    87f4:	a080040c 	andi	r2,r20,16
    87f8:	1001d126 	beq	r2,zero,8f40 <___vfiprintf_internal_r+0x1154>
    87fc:	da802217 	ldw	r10,136(sp)
    8800:	0027883a 	mov	r19,zero
    8804:	54800017 	ldw	r18,0(r10)
    8808:	52800104 	addi	r10,r10,4
    880c:	da802215 	stw	r10,136(sp)
    8810:	003f5306 	br	8560 <__alt_data_end+0xfffe8560>
    8814:	da802217 	ldw	r10,136(sp)
    8818:	d8001d85 	stb	zero,118(sp)
    881c:	55400017 	ldw	r21,0(r10)
    8820:	50c00104 	addi	r3,r10,4
    8824:	a8024226 	beq	r21,zero,9130 <___vfiprintf_internal_r+0x1344>
    8828:	48021816 	blt	r9,zero,908c <___vfiprintf_internal_r+0x12a0>
    882c:	480d883a 	mov	r6,r9
    8830:	000b883a 	mov	r5,zero
    8834:	a809883a 	mov	r4,r21
    8838:	d8c02a15 	stw	r3,168(sp)
    883c:	da002b15 	stw	r8,172(sp)
    8840:	da402c15 	stw	r9,176(sp)
    8844:	0005fe80 	call	5fe8 <memchr>
    8848:	d8c02a17 	ldw	r3,168(sp)
    884c:	da002b17 	ldw	r8,172(sp)
    8850:	da402c17 	ldw	r9,176(sp)
    8854:	10024826 	beq	r2,zero,9178 <___vfiprintf_internal_r+0x138c>
    8858:	1567c83a 	sub	r19,r2,r21
    885c:	df001d83 	ldbu	fp,118(sp)
    8860:	d8c02215 	stw	r3,136(sp)
    8864:	0013883a 	mov	r9,zero
    8868:	003e6006 	br	81ec <__alt_data_end+0xfffe81ec>
    886c:	21003fcc 	andi	r4,r4,255
    8870:	203fc026 	beq	r4,zero,8774 <__alt_data_end+0xfffe8774>
    8874:	d9c01d85 	stb	r7,118(sp)
    8878:	003fbe06 	br	8774 <__alt_data_end+0xfffe8774>
    887c:	da802217 	ldw	r10,136(sp)
    8880:	54400017 	ldw	r17,0(r10)
    8884:	50800104 	addi	r2,r10,4
    8888:	883e3b16 	blt	r17,zero,8178 <__alt_data_end+0xfffe8178>
    888c:	d8802215 	stw	r2,136(sp)
    8890:	80c00007 	ldb	r3,0(r16)
    8894:	003db406 	br	7f68 <__alt_data_end+0xfffe7f68>
    8898:	01000044 	movi	r4,1
    889c:	01c00ac4 	movi	r7,43
    88a0:	80c00007 	ldb	r3,0(r16)
    88a4:	003db006 	br	7f68 <__alt_data_end+0xfffe7f68>
    88a8:	80c00007 	ldb	r3,0(r16)
    88ac:	82800044 	addi	r10,r16,1
    88b0:	1b423c26 	beq	r3,r13,91a4 <___vfiprintf_internal_r+0x13b8>
    88b4:	18bff404 	addi	r2,r3,-48
    88b8:	0013883a 	mov	r9,zero
    88bc:	30822b36 	bltu	r6,r2,916c <___vfiprintf_internal_r+0x1380>
    88c0:	50c00007 	ldb	r3,0(r10)
    88c4:	4a4002a4 	muli	r9,r9,10
    88c8:	54000044 	addi	r16,r10,1
    88cc:	8015883a 	mov	r10,r16
    88d0:	4893883a 	add	r9,r9,r2
    88d4:	18bff404 	addi	r2,r3,-48
    88d8:	30bff92e 	bgeu	r6,r2,88c0 <__alt_data_end+0xfffe88c0>
    88dc:	483da30e 	bge	r9,zero,7f6c <__alt_data_end+0xfffe7f6c>
    88e0:	027fffc4 	movi	r9,-1
    88e4:	003da106 	br	7f6c <__alt_data_end+0xfffe7f6c>
    88e8:	a5001014 	ori	r20,r20,64
    88ec:	80c00007 	ldb	r3,0(r16)
    88f0:	003d9d06 	br	7f68 <__alt_data_end+0xfffe7f68>
    88f4:	da802217 	ldw	r10,136(sp)
    88f8:	d8001d85 	stb	zero,118(sp)
    88fc:	50c00204 	addi	r3,r10,8
    8900:	54800017 	ldw	r18,0(r10)
    8904:	54c00117 	ldw	r19,4(r10)
    8908:	4801ca16 	blt	r9,zero,9034 <___vfiprintf_internal_r+0x1248>
    890c:	013fdfc4 	movi	r4,-129
    8910:	94c4b03a 	or	r2,r18,r19
    8914:	d8c02215 	stw	r3,136(sp)
    8918:	a128703a 	and	r20,r20,r4
    891c:	0039883a 	mov	fp,zero
    8920:	103f341e 	bne	r2,zero,85f4 <__alt_data_end+0xfffe85f4>
    8924:	483e2e26 	beq	r9,zero,81e0 <__alt_data_end+0xfffe81e0>
    8928:	0025883a 	mov	r18,zero
    892c:	94800c04 	addi	r18,r18,48
    8930:	dc8019c5 	stb	r18,103(sp)
    8934:	dcc02717 	ldw	r19,156(sp)
    8938:	dd4019c4 	addi	r21,sp,103
    893c:	003e2b06 	br	81ec <__alt_data_end+0xfffe81ec>
    8940:	21003fcc 	andi	r4,r4,255
    8944:	2002361e 	bne	r4,zero,9220 <___vfiprintf_internal_r+0x1434>
    8948:	1801c126 	beq	r3,zero,9050 <___vfiprintf_internal_r+0x1264>
    894c:	04800044 	movi	r18,1
    8950:	d8c01005 	stb	r3,64(sp)
    8954:	d8001d85 	stb	zero,118(sp)
    8958:	9027883a 	mov	r19,r18
    895c:	dd401004 	addi	r21,sp,64
    8960:	003f1106 	br	85a8 <__alt_data_end+0xfffe85a8>
    8964:	d9402117 	ldw	r5,132(sp)
    8968:	d9002017 	ldw	r4,128(sp)
    896c:	d9801a04 	addi	r6,sp,104
    8970:	d9c02b15 	stw	r7,172(sp)
    8974:	dbc02a15 	stw	r15,168(sp)
    8978:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    897c:	d9c02b17 	ldw	r7,172(sp)
    8980:	dbc02a17 	ldw	r15,168(sp)
    8984:	10006d1e 	bne	r2,zero,8b3c <___vfiprintf_internal_r+0xd50>
    8988:	d9801b17 	ldw	r6,108(sp)
    898c:	d8801c17 	ldw	r2,112(sp)
    8990:	d811883a 	mov	r8,sp
    8994:	31400044 	addi	r5,r6,1
    8998:	003e3306 	br	8268 <__alt_data_end+0xfffe8268>
    899c:	d9401b17 	ldw	r5,108(sp)
    89a0:	d8801c17 	ldw	r2,112(sp)
    89a4:	29000044 	addi	r4,r5,1
    89a8:	d8c01d87 	ldb	r3,118(sp)
    89ac:	183e4d26 	beq	r3,zero,82e4 <__alt_data_end+0xfffe82e4>
    89b0:	00c00044 	movi	r3,1
    89b4:	d9401d84 	addi	r5,sp,118
    89b8:	10c5883a 	add	r2,r2,r3
    89bc:	41400015 	stw	r5,0(r8)
    89c0:	40c00115 	stw	r3,4(r8)
    89c4:	d8801c15 	stw	r2,112(sp)
    89c8:	d9001b15 	stw	r4,108(sp)
    89cc:	014001c4 	movi	r5,7
    89d0:	2900a90e 	bge	r5,r4,8c78 <___vfiprintf_internal_r+0xe8c>
    89d4:	1000da1e 	bne	r2,zero,8d40 <___vfiprintf_internal_r+0xf54>
    89d8:	7000ab1e 	bne	r14,zero,8c88 <___vfiprintf_internal_r+0xe9c>
    89dc:	000b883a 	mov	r5,zero
    89e0:	1809883a 	mov	r4,r3
    89e4:	d811883a 	mov	r8,sp
    89e8:	00c02004 	movi	r3,128
    89ec:	e0fe4d26 	beq	fp,r3,8324 <__alt_data_end+0xfffe8324>
    89f0:	4cf9c83a 	sub	fp,r9,r19
    89f4:	073e7b0e 	bge	zero,fp,83e4 <__alt_data_end+0xfffe83e4>
    89f8:	01c00404 	movi	r7,16
    89fc:	3f01900e 	bge	r7,fp,9040 <___vfiprintf_internal_r+0x1254>
    8a00:	00c00074 	movhi	r3,1
    8a04:	18fda804 	addi	r3,r3,-2400
    8a08:	d8c02415 	stw	r3,144(sp)
    8a0c:	034001c4 	movi	r13,7
    8a10:	00000506 	br	8a28 <___vfiprintf_internal_r+0xc3c>
    8a14:	29000084 	addi	r4,r5,2
    8a18:	42000204 	addi	r8,r8,8
    8a1c:	180b883a 	mov	r5,r3
    8a20:	e73ffc04 	addi	fp,fp,-16
    8a24:	3f000d0e 	bge	r7,fp,8a5c <___vfiprintf_internal_r+0xc70>
    8a28:	10800404 	addi	r2,r2,16
    8a2c:	28c00044 	addi	r3,r5,1
    8a30:	45c00015 	stw	r23,0(r8)
    8a34:	41c00115 	stw	r7,4(r8)
    8a38:	d8801c15 	stw	r2,112(sp)
    8a3c:	d8c01b15 	stw	r3,108(sp)
    8a40:	68fff40e 	bge	r13,r3,8a14 <__alt_data_end+0xfffe8a14>
    8a44:	1000101e 	bne	r2,zero,8a88 <___vfiprintf_internal_r+0xc9c>
    8a48:	e73ffc04 	addi	fp,fp,-16
    8a4c:	01000044 	movi	r4,1
    8a50:	000b883a 	mov	r5,zero
    8a54:	d811883a 	mov	r8,sp
    8a58:	3f3ff316 	blt	r7,fp,8a28 <__alt_data_end+0xfffe8a28>
    8a5c:	da802417 	ldw	r10,144(sp)
    8a60:	1705883a 	add	r2,r2,fp
    8a64:	47000115 	stw	fp,4(r8)
    8a68:	42800015 	stw	r10,0(r8)
    8a6c:	d8801c15 	stw	r2,112(sp)
    8a70:	d9001b15 	stw	r4,108(sp)
    8a74:	00c001c4 	movi	r3,7
    8a78:	19003616 	blt	r3,r4,8b54 <___vfiprintf_internal_r+0xd68>
    8a7c:	42000204 	addi	r8,r8,8
    8a80:	21000044 	addi	r4,r4,1
    8a84:	003e5706 	br	83e4 <__alt_data_end+0xfffe83e4>
    8a88:	d9402117 	ldw	r5,132(sp)
    8a8c:	d9002017 	ldw	r4,128(sp)
    8a90:	d9801a04 	addi	r6,sp,104
    8a94:	d9c02b15 	stw	r7,172(sp)
    8a98:	db402a15 	stw	r13,168(sp)
    8a9c:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    8aa0:	d9c02b17 	ldw	r7,172(sp)
    8aa4:	db402a17 	ldw	r13,168(sp)
    8aa8:	1000241e 	bne	r2,zero,8b3c <___vfiprintf_internal_r+0xd50>
    8aac:	d9401b17 	ldw	r5,108(sp)
    8ab0:	d8801c17 	ldw	r2,112(sp)
    8ab4:	d811883a 	mov	r8,sp
    8ab8:	29000044 	addi	r4,r5,1
    8abc:	003fd806 	br	8a20 <__alt_data_end+0xfffe8a20>
    8ac0:	d9401b17 	ldw	r5,108(sp)
    8ac4:	00c00074 	movhi	r3,1
    8ac8:	18fdac04 	addi	r3,r3,-2384
    8acc:	d8c02415 	stw	r3,144(sp)
    8ad0:	29400044 	addi	r5,r5,1
    8ad4:	d8c02417 	ldw	r3,144(sp)
    8ad8:	14c5883a 	add	r2,r2,r19
    8adc:	44c00115 	stw	r19,4(r8)
    8ae0:	40c00015 	stw	r3,0(r8)
    8ae4:	d8801c15 	stw	r2,112(sp)
    8ae8:	d9401b15 	stw	r5,108(sp)
    8aec:	00c001c4 	movi	r3,7
    8af0:	1940070e 	bge	r3,r5,8b10 <___vfiprintf_internal_r+0xd24>
    8af4:	103e4826 	beq	r2,zero,8418 <__alt_data_end+0xfffe8418>
    8af8:	d9402117 	ldw	r5,132(sp)
    8afc:	d9002017 	ldw	r4,128(sp)
    8b00:	d9801a04 	addi	r6,sp,104
    8b04:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    8b08:	10000c1e 	bne	r2,zero,8b3c <___vfiprintf_internal_r+0xd50>
    8b0c:	d8801c17 	ldw	r2,112(sp)
    8b10:	8c80010e 	bge	r17,r18,8b18 <___vfiprintf_internal_r+0xd2c>
    8b14:	9023883a 	mov	r17,r18
    8b18:	da802317 	ldw	r10,140(sp)
    8b1c:	5455883a 	add	r10,r10,r17
    8b20:	da802315 	stw	r10,140(sp)
    8b24:	103e4126 	beq	r2,zero,842c <__alt_data_end+0xfffe842c>
    8b28:	d9402117 	ldw	r5,132(sp)
    8b2c:	d9002017 	ldw	r4,128(sp)
    8b30:	d9801a04 	addi	r6,sp,104
    8b34:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    8b38:	103e3c26 	beq	r2,zero,842c <__alt_data_end+0xfffe842c>
    8b3c:	dd002117 	ldw	r20,132(sp)
    8b40:	a080030b 	ldhu	r2,12(r20)
    8b44:	1080100c 	andi	r2,r2,64
    8b48:	1001231e 	bne	r2,zero,8fd8 <___vfiprintf_internal_r+0x11ec>
    8b4c:	d8802317 	ldw	r2,140(sp)
    8b50:	003d7b06 	br	8140 <__alt_data_end+0xfffe8140>
    8b54:	1000991e 	bne	r2,zero,8dbc <___vfiprintf_internal_r+0xfd0>
    8b58:	00c00044 	movi	r3,1
    8b5c:	9805883a 	mov	r2,r19
    8b60:	dd400015 	stw	r21,0(sp)
    8b64:	dcc00115 	stw	r19,4(sp)
    8b68:	dcc01c15 	stw	r19,112(sp)
    8b6c:	d8c01b15 	stw	r3,108(sp)
    8b70:	d811883a 	mov	r8,sp
    8b74:	42000204 	addi	r8,r8,8
    8b78:	a2c0010c 	andi	r11,r20,4
    8b7c:	583fe426 	beq	r11,zero,8b10 <__alt_data_end+0xfffe8b10>
    8b80:	8ca7c83a 	sub	r19,r17,r18
    8b84:	04ffe20e 	bge	zero,r19,8b10 <__alt_data_end+0xfffe8b10>
    8b88:	01c00404 	movi	r7,16
    8b8c:	3cffcc0e 	bge	r7,r19,8ac0 <__alt_data_end+0xfffe8ac0>
    8b90:	02800074 	movhi	r10,1
    8b94:	52bdac04 	addi	r10,r10,-2384
    8b98:	d9001b17 	ldw	r4,108(sp)
    8b9c:	da802415 	stw	r10,144(sp)
    8ba0:	382b883a 	mov	r21,r7
    8ba4:	050001c4 	movi	r20,7
    8ba8:	df002017 	ldw	fp,128(sp)
    8bac:	00000506 	br	8bc4 <___vfiprintf_internal_r+0xdd8>
    8bb0:	21400084 	addi	r5,r4,2
    8bb4:	42000204 	addi	r8,r8,8
    8bb8:	1809883a 	mov	r4,r3
    8bbc:	9cfffc04 	addi	r19,r19,-16
    8bc0:	acffc40e 	bge	r21,r19,8ad4 <__alt_data_end+0xfffe8ad4>
    8bc4:	10800404 	addi	r2,r2,16
    8bc8:	20c00044 	addi	r3,r4,1
    8bcc:	45800015 	stw	r22,0(r8)
    8bd0:	45400115 	stw	r21,4(r8)
    8bd4:	d8801c15 	stw	r2,112(sp)
    8bd8:	d8c01b15 	stw	r3,108(sp)
    8bdc:	a0fff40e 	bge	r20,r3,8bb0 <__alt_data_end+0xfffe8bb0>
    8be0:	1000041e 	bne	r2,zero,8bf4 <___vfiprintf_internal_r+0xe08>
    8be4:	01400044 	movi	r5,1
    8be8:	0009883a 	mov	r4,zero
    8bec:	d811883a 	mov	r8,sp
    8bf0:	003ff206 	br	8bbc <__alt_data_end+0xfffe8bbc>
    8bf4:	d9402117 	ldw	r5,132(sp)
    8bf8:	d9801a04 	addi	r6,sp,104
    8bfc:	e009883a 	mov	r4,fp
    8c00:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    8c04:	103fcd1e 	bne	r2,zero,8b3c <__alt_data_end+0xfffe8b3c>
    8c08:	d9001b17 	ldw	r4,108(sp)
    8c0c:	d8801c17 	ldw	r2,112(sp)
    8c10:	d811883a 	mov	r8,sp
    8c14:	21400044 	addi	r5,r4,1
    8c18:	003fe806 	br	8bbc <__alt_data_end+0xfffe8bbc>
    8c1c:	d9402117 	ldw	r5,132(sp)
    8c20:	d9002017 	ldw	r4,128(sp)
    8c24:	d9801a04 	addi	r6,sp,104
    8c28:	d9c02b15 	stw	r7,172(sp)
    8c2c:	db402a15 	stw	r13,168(sp)
    8c30:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    8c34:	d9c02b17 	ldw	r7,172(sp)
    8c38:	db402a17 	ldw	r13,168(sp)
    8c3c:	103fbf1e 	bne	r2,zero,8b3c <__alt_data_end+0xfffe8b3c>
    8c40:	d9401b17 	ldw	r5,108(sp)
    8c44:	d8801c17 	ldw	r2,112(sp)
    8c48:	d811883a 	mov	r8,sp
    8c4c:	29800044 	addi	r6,r5,1
    8c50:	003dc406 	br	8364 <__alt_data_end+0xfffe8364>
    8c54:	1000d21e 	bne	r2,zero,8fa0 <___vfiprintf_internal_r+0x11b4>
    8c58:	d8c01d87 	ldb	r3,118(sp)
    8c5c:	18009526 	beq	r3,zero,8eb4 <___vfiprintf_internal_r+0x10c8>
    8c60:	00800044 	movi	r2,1
    8c64:	d8c01d84 	addi	r3,sp,118
    8c68:	1009883a 	mov	r4,r2
    8c6c:	d8c00015 	stw	r3,0(sp)
    8c70:	d8800115 	stw	r2,4(sp)
    8c74:	d811883a 	mov	r8,sp
    8c78:	200b883a 	mov	r5,r4
    8c7c:	42000204 	addi	r8,r8,8
    8c80:	21000044 	addi	r4,r4,1
    8c84:	003d9706 	br	82e4 <__alt_data_end+0xfffe82e4>
    8c88:	d9001d04 	addi	r4,sp,116
    8c8c:	00800084 	movi	r2,2
    8c90:	d9000015 	stw	r4,0(sp)
    8c94:	d8800115 	stw	r2,4(sp)
    8c98:	1809883a 	mov	r4,r3
    8c9c:	d811883a 	mov	r8,sp
    8ca0:	200b883a 	mov	r5,r4
    8ca4:	42000204 	addi	r8,r8,8
    8ca8:	21000044 	addi	r4,r4,1
    8cac:	003f4e06 	br	89e8 <__alt_data_end+0xfffe89e8>
    8cb0:	d8001d85 	stb	zero,118(sp)
    8cb4:	48005016 	blt	r9,zero,8df8 <___vfiprintf_internal_r+0x100c>
    8cb8:	00ffdfc4 	movi	r3,-129
    8cbc:	94c4b03a 	or	r2,r18,r19
    8cc0:	a0e8703a 	and	r20,r20,r3
    8cc4:	103d4426 	beq	r2,zero,81d8 <__alt_data_end+0xfffe81d8>
    8cc8:	0039883a 	mov	fp,zero
    8ccc:	d9002617 	ldw	r4,152(sp)
    8cd0:	dd401a04 	addi	r21,sp,104
    8cd4:	908003cc 	andi	r2,r18,15
    8cd8:	9806973a 	slli	r3,r19,28
    8cdc:	2085883a 	add	r2,r4,r2
    8ce0:	9024d13a 	srli	r18,r18,4
    8ce4:	10800003 	ldbu	r2,0(r2)
    8ce8:	9826d13a 	srli	r19,r19,4
    8cec:	ad7fffc4 	addi	r21,r21,-1
    8cf0:	1ca4b03a 	or	r18,r3,r18
    8cf4:	a8800005 	stb	r2,0(r21)
    8cf8:	94c4b03a 	or	r2,r18,r19
    8cfc:	103ff51e 	bne	r2,zero,8cd4 <__alt_data_end+0xfffe8cd4>
    8d00:	003e5906 	br	8668 <__alt_data_end+0xfffe8668>
    8d04:	d9402117 	ldw	r5,132(sp)
    8d08:	d9002017 	ldw	r4,128(sp)
    8d0c:	d9801a04 	addi	r6,sp,104
    8d10:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    8d14:	103f891e 	bne	r2,zero,8b3c <__alt_data_end+0xfffe8b3c>
    8d18:	d8801c17 	ldw	r2,112(sp)
    8d1c:	d811883a 	mov	r8,sp
    8d20:	003f9506 	br	8b78 <__alt_data_end+0xfffe8b78>
    8d24:	d9402117 	ldw	r5,132(sp)
    8d28:	d9002017 	ldw	r4,128(sp)
    8d2c:	d9801a04 	addi	r6,sp,104
    8d30:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    8d34:	103f811e 	bne	r2,zero,8b3c <__alt_data_end+0xfffe8b3c>
    8d38:	d811883a 	mov	r8,sp
    8d3c:	003ced06 	br	80f4 <__alt_data_end+0xfffe80f4>
    8d40:	d9402117 	ldw	r5,132(sp)
    8d44:	d9002017 	ldw	r4,128(sp)
    8d48:	d9801a04 	addi	r6,sp,104
    8d4c:	da402c15 	stw	r9,176(sp)
    8d50:	db802a15 	stw	r14,168(sp)
    8d54:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    8d58:	da402c17 	ldw	r9,176(sp)
    8d5c:	db802a17 	ldw	r14,168(sp)
    8d60:	103f761e 	bne	r2,zero,8b3c <__alt_data_end+0xfffe8b3c>
    8d64:	d9401b17 	ldw	r5,108(sp)
    8d68:	d8801c17 	ldw	r2,112(sp)
    8d6c:	d811883a 	mov	r8,sp
    8d70:	29000044 	addi	r4,r5,1
    8d74:	003d5b06 	br	82e4 <__alt_data_end+0xfffe82e4>
    8d78:	d9402117 	ldw	r5,132(sp)
    8d7c:	d9002017 	ldw	r4,128(sp)
    8d80:	d9801a04 	addi	r6,sp,104
    8d84:	da402c15 	stw	r9,176(sp)
    8d88:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    8d8c:	da402c17 	ldw	r9,176(sp)
    8d90:	103f6a1e 	bne	r2,zero,8b3c <__alt_data_end+0xfffe8b3c>
    8d94:	d9401b17 	ldw	r5,108(sp)
    8d98:	d8801c17 	ldw	r2,112(sp)
    8d9c:	d811883a 	mov	r8,sp
    8da0:	29000044 	addi	r4,r5,1
    8da4:	003f1006 	br	89e8 <__alt_data_end+0xfffe89e8>
    8da8:	1000c31e 	bne	r2,zero,90b8 <___vfiprintf_internal_r+0x12cc>
    8dac:	01000044 	movi	r4,1
    8db0:	000b883a 	mov	r5,zero
    8db4:	d811883a 	mov	r8,sp
    8db8:	003f0d06 	br	89f0 <__alt_data_end+0xfffe89f0>
    8dbc:	d9402117 	ldw	r5,132(sp)
    8dc0:	d9002017 	ldw	r4,128(sp)
    8dc4:	d9801a04 	addi	r6,sp,104
    8dc8:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    8dcc:	103f5b1e 	bne	r2,zero,8b3c <__alt_data_end+0xfffe8b3c>
    8dd0:	d9001b17 	ldw	r4,108(sp)
    8dd4:	d8801c17 	ldw	r2,112(sp)
    8dd8:	d811883a 	mov	r8,sp
    8ddc:	21000044 	addi	r4,r4,1
    8de0:	003d8006 	br	83e4 <__alt_data_end+0xfffe83e4>
    8de4:	01000074 	movhi	r4,1
    8de8:	213d4704 	addi	r4,r4,-2788
    8dec:	d9002615 	stw	r4,152(sp)
    8df0:	d8c02215 	stw	r3,136(sp)
    8df4:	1029883a 	mov	r20,r2
    8df8:	94c4b03a 	or	r2,r18,r19
    8dfc:	103fb21e 	bne	r2,zero,8cc8 <__alt_data_end+0xfffe8cc8>
    8e00:	0039883a 	mov	fp,zero
    8e04:	00800084 	movi	r2,2
    8e08:	003e6b06 	br	87b8 <__alt_data_end+0xfffe87b8>
    8e0c:	da802217 	ldw	r10,136(sp)
    8e10:	d8001d85 	stb	zero,118(sp)
    8e14:	0027883a 	mov	r19,zero
    8e18:	50800104 	addi	r2,r10,4
    8e1c:	54800017 	ldw	r18,0(r10)
    8e20:	483e6016 	blt	r9,zero,87a4 <__alt_data_end+0xfffe87a4>
    8e24:	00ffdfc4 	movi	r3,-129
    8e28:	d8802215 	stw	r2,136(sp)
    8e2c:	a0e8703a 	and	r20,r20,r3
    8e30:	0039883a 	mov	fp,zero
    8e34:	903ebb26 	beq	r18,zero,8924 <__alt_data_end+0xfffe8924>
    8e38:	00800244 	movi	r2,9
    8e3c:	14bdee36 	bltu	r2,r18,85f8 <__alt_data_end+0xfffe85f8>
    8e40:	003eba06 	br	892c <__alt_data_end+0xfffe892c>
    8e44:	00800c04 	movi	r2,48
    8e48:	d8c01d45 	stb	r3,117(sp)
    8e4c:	d8801d05 	stb	r2,116(sp)
    8e50:	d8001d85 	stb	zero,118(sp)
    8e54:	a0c00094 	ori	r3,r20,2
    8e58:	4800a916 	blt	r9,zero,9100 <___vfiprintf_internal_r+0x1314>
    8e5c:	00bfdfc4 	movi	r2,-129
    8e60:	a096703a 	and	r11,r20,r2
    8e64:	5d000094 	ori	r20,r11,2
    8e68:	0039883a 	mov	fp,zero
    8e6c:	003f9706 	br	8ccc <__alt_data_end+0xfffe8ccc>
    8e70:	8025883a 	mov	r18,r16
    8e74:	003c2e06 	br	7f30 <__alt_data_end+0xfffe7f30>
    8e78:	00800074 	movhi	r2,1
    8e7c:	10bd4704 	addi	r2,r2,-2788
    8e80:	0039883a 	mov	fp,zero
    8e84:	d8802615 	stw	r2,152(sp)
    8e88:	003f9006 	br	8ccc <__alt_data_end+0xfffe8ccc>
    8e8c:	04a5c83a 	sub	r18,zero,r18
    8e90:	07000b44 	movi	fp,45
    8e94:	9004c03a 	cmpne	r2,r18,zero
    8e98:	04e7c83a 	sub	r19,zero,r19
    8e9c:	df001d85 	stb	fp,118(sp)
    8ea0:	98a7c83a 	sub	r19,r19,r2
    8ea4:	48009f16 	blt	r9,zero,9124 <___vfiprintf_internal_r+0x1338>
    8ea8:	00bfdfc4 	movi	r2,-129
    8eac:	a0a8703a 	and	r20,r20,r2
    8eb0:	003dd006 	br	85f4 <__alt_data_end+0xfffe85f4>
    8eb4:	70004c26 	beq	r14,zero,8fe8 <___vfiprintf_internal_r+0x11fc>
    8eb8:	00800084 	movi	r2,2
    8ebc:	d8c01d04 	addi	r3,sp,116
    8ec0:	d8c00015 	stw	r3,0(sp)
    8ec4:	d8800115 	stw	r2,4(sp)
    8ec8:	01000044 	movi	r4,1
    8ecc:	d811883a 	mov	r8,sp
    8ed0:	003f7306 	br	8ca0 <__alt_data_end+0xfffe8ca0>
    8ed4:	a080100c 	andi	r2,r20,64
    8ed8:	da802217 	ldw	r10,136(sp)
    8edc:	103e0626 	beq	r2,zero,86f8 <__alt_data_end+0xfffe86f8>
    8ee0:	5480000f 	ldh	r18,0(r10)
    8ee4:	52800104 	addi	r10,r10,4
    8ee8:	da802215 	stw	r10,136(sp)
    8eec:	9027d7fa 	srai	r19,r18,31
    8ef0:	9805883a 	mov	r2,r19
    8ef4:	003db806 	br	85d8 <__alt_data_end+0xfffe85d8>
    8ef8:	a080040c 	andi	r2,r20,16
    8efc:	1000091e 	bne	r2,zero,8f24 <___vfiprintf_internal_r+0x1138>
    8f00:	a2c0100c 	andi	r11,r20,64
    8f04:	58000726 	beq	r11,zero,8f24 <___vfiprintf_internal_r+0x1138>
    8f08:	da802217 	ldw	r10,136(sp)
    8f0c:	50800017 	ldw	r2,0(r10)
    8f10:	52800104 	addi	r10,r10,4
    8f14:	da802215 	stw	r10,136(sp)
    8f18:	da802317 	ldw	r10,140(sp)
    8f1c:	1280000d 	sth	r10,0(r2)
    8f20:	003be706 	br	7ec0 <__alt_data_end+0xfffe7ec0>
    8f24:	da802217 	ldw	r10,136(sp)
    8f28:	50800017 	ldw	r2,0(r10)
    8f2c:	52800104 	addi	r10,r10,4
    8f30:	da802215 	stw	r10,136(sp)
    8f34:	da802317 	ldw	r10,140(sp)
    8f38:	12800015 	stw	r10,0(r2)
    8f3c:	003be006 	br	7ec0 <__alt_data_end+0xfffe7ec0>
    8f40:	a080100c 	andi	r2,r20,64
    8f44:	da802217 	ldw	r10,136(sp)
    8f48:	10003026 	beq	r2,zero,900c <___vfiprintf_internal_r+0x1220>
    8f4c:	5480000b 	ldhu	r18,0(r10)
    8f50:	52800104 	addi	r10,r10,4
    8f54:	0027883a 	mov	r19,zero
    8f58:	da802215 	stw	r10,136(sp)
    8f5c:	003d8006 	br	8560 <__alt_data_end+0xfffe8560>
    8f60:	80c00007 	ldb	r3,0(r16)
    8f64:	003c0006 	br	7f68 <__alt_data_end+0xfffe7f68>
    8f68:	a080100c 	andi	r2,r20,64
    8f6c:	d8001d85 	stb	zero,118(sp)
    8f70:	da802217 	ldw	r10,136(sp)
    8f74:	1000201e 	bne	r2,zero,8ff8 <___vfiprintf_internal_r+0x120c>
    8f78:	50800104 	addi	r2,r10,4
    8f7c:	54800017 	ldw	r18,0(r10)
    8f80:	0027883a 	mov	r19,zero
    8f84:	483def0e 	bge	r9,zero,8744 <__alt_data_end+0xfffe8744>
    8f88:	94c6b03a 	or	r3,r18,r19
    8f8c:	d8802215 	stw	r2,136(sp)
    8f90:	183d4e1e 	bne	r3,zero,84cc <__alt_data_end+0xfffe84cc>
    8f94:	0039883a 	mov	fp,zero
    8f98:	0005883a 	mov	r2,zero
    8f9c:	003e0606 	br	87b8 <__alt_data_end+0xfffe87b8>
    8fa0:	d9402117 	ldw	r5,132(sp)
    8fa4:	d9002017 	ldw	r4,128(sp)
    8fa8:	d9801a04 	addi	r6,sp,104
    8fac:	da402c15 	stw	r9,176(sp)
    8fb0:	db802a15 	stw	r14,168(sp)
    8fb4:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    8fb8:	da402c17 	ldw	r9,176(sp)
    8fbc:	db802a17 	ldw	r14,168(sp)
    8fc0:	103ede1e 	bne	r2,zero,8b3c <__alt_data_end+0xfffe8b3c>
    8fc4:	d9401b17 	ldw	r5,108(sp)
    8fc8:	d8801c17 	ldw	r2,112(sp)
    8fcc:	d811883a 	mov	r8,sp
    8fd0:	29000044 	addi	r4,r5,1
    8fd4:	003e7406 	br	89a8 <__alt_data_end+0xfffe89a8>
    8fd8:	00bfffc4 	movi	r2,-1
    8fdc:	003c5806 	br	8140 <__alt_data_end+0xfffe8140>
    8fe0:	d811883a 	mov	r8,sp
    8fe4:	003ee806 	br	8b88 <__alt_data_end+0xfffe8b88>
    8fe8:	000b883a 	mov	r5,zero
    8fec:	01000044 	movi	r4,1
    8ff0:	d811883a 	mov	r8,sp
    8ff4:	003e7c06 	br	89e8 <__alt_data_end+0xfffe89e8>
    8ff8:	50800104 	addi	r2,r10,4
    8ffc:	5480000b 	ldhu	r18,0(r10)
    9000:	0027883a 	mov	r19,zero
    9004:	483dcf0e 	bge	r9,zero,8744 <__alt_data_end+0xfffe8744>
    9008:	003fdf06 	br	8f88 <__alt_data_end+0xfffe8f88>
    900c:	54800017 	ldw	r18,0(r10)
    9010:	52800104 	addi	r10,r10,4
    9014:	0027883a 	mov	r19,zero
    9018:	da802215 	stw	r10,136(sp)
    901c:	003d5006 	br	8560 <__alt_data_end+0xfffe8560>
    9020:	50800104 	addi	r2,r10,4
    9024:	5480000b 	ldhu	r18,0(r10)
    9028:	0027883a 	mov	r19,zero
    902c:	483f7d0e 	bge	r9,zero,8e24 <__alt_data_end+0xfffe8e24>
    9030:	003ddc06 	br	87a4 <__alt_data_end+0xfffe87a4>
    9034:	d8c02215 	stw	r3,136(sp)
    9038:	0039883a 	mov	fp,zero
    903c:	003ddb06 	br	87ac <__alt_data_end+0xfffe87ac>
    9040:	02800074 	movhi	r10,1
    9044:	52bda804 	addi	r10,r10,-2400
    9048:	da802415 	stw	r10,144(sp)
    904c:	003e8306 	br	8a5c <__alt_data_end+0xfffe8a5c>
    9050:	d8801c17 	ldw	r2,112(sp)
    9054:	dd002117 	ldw	r20,132(sp)
    9058:	103eb926 	beq	r2,zero,8b40 <__alt_data_end+0xfffe8b40>
    905c:	d9002017 	ldw	r4,128(sp)
    9060:	d9801a04 	addi	r6,sp,104
    9064:	a00b883a 	mov	r5,r20
    9068:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    906c:	003eb406 	br	8b40 <__alt_data_end+0xfffe8b40>
    9070:	80c00043 	ldbu	r3,1(r16)
    9074:	a5000814 	ori	r20,r20,32
    9078:	84000044 	addi	r16,r16,1
    907c:	18c03fcc 	andi	r3,r3,255
    9080:	18c0201c 	xori	r3,r3,128
    9084:	18ffe004 	addi	r3,r3,-128
    9088:	003bb706 	br	7f68 <__alt_data_end+0xfffe7f68>
    908c:	a809883a 	mov	r4,r21
    9090:	d8c02a15 	stw	r3,168(sp)
    9094:	da002b15 	stw	r8,172(sp)
    9098:	00007400 	call	740 <strlen>
    909c:	d8c02a17 	ldw	r3,168(sp)
    90a0:	1027883a 	mov	r19,r2
    90a4:	df001d83 	ldbu	fp,118(sp)
    90a8:	d8c02215 	stw	r3,136(sp)
    90ac:	0013883a 	mov	r9,zero
    90b0:	da002b17 	ldw	r8,172(sp)
    90b4:	003c4d06 	br	81ec <__alt_data_end+0xfffe81ec>
    90b8:	d9402117 	ldw	r5,132(sp)
    90bc:	d9002017 	ldw	r4,128(sp)
    90c0:	d9801a04 	addi	r6,sp,104
    90c4:	da402c15 	stw	r9,176(sp)
    90c8:	0007cd80 	call	7cd8 <__sprint_r.part.0>
    90cc:	da402c17 	ldw	r9,176(sp)
    90d0:	103e9a1e 	bne	r2,zero,8b3c <__alt_data_end+0xfffe8b3c>
    90d4:	d9401b17 	ldw	r5,108(sp)
    90d8:	d8801c17 	ldw	r2,112(sp)
    90dc:	d811883a 	mov	r8,sp
    90e0:	29000044 	addi	r4,r5,1
    90e4:	003e4206 	br	89f0 <__alt_data_end+0xfffe89f0>
    90e8:	d9401b17 	ldw	r5,108(sp)
    90ec:	01000074 	movhi	r4,1
    90f0:	213dac04 	addi	r4,r4,-2384
    90f4:	d9002415 	stw	r4,144(sp)
    90f8:	29400044 	addi	r5,r5,1
    90fc:	003c6d06 	br	82b4 <__alt_data_end+0xfffe82b4>
    9100:	0039883a 	mov	fp,zero
    9104:	00800084 	movi	r2,2
    9108:	10803fcc 	andi	r2,r2,255
    910c:	01000044 	movi	r4,1
    9110:	11001e26 	beq	r2,r4,918c <___vfiprintf_internal_r+0x13a0>
    9114:	01000084 	movi	r4,2
    9118:	11001e1e 	bne	r2,r4,9194 <___vfiprintf_internal_r+0x13a8>
    911c:	1829883a 	mov	r20,r3
    9120:	003eea06 	br	8ccc <__alt_data_end+0xfffe8ccc>
    9124:	a007883a 	mov	r3,r20
    9128:	00800044 	movi	r2,1
    912c:	003ff606 	br	9108 <__alt_data_end+0xfffe9108>
    9130:	00800184 	movi	r2,6
    9134:	1240012e 	bgeu	r2,r9,913c <___vfiprintf_internal_r+0x1350>
    9138:	1013883a 	mov	r9,r2
    913c:	4827883a 	mov	r19,r9
    9140:	4825883a 	mov	r18,r9
    9144:	48001516 	blt	r9,zero,919c <___vfiprintf_internal_r+0x13b0>
    9148:	05400074 	movhi	r21,1
    914c:	d8c02215 	stw	r3,136(sp)
    9150:	ad7d4c04 	addi	r21,r21,-2768
    9154:	003d1406 	br	85a8 <__alt_data_end+0xfffe85a8>
    9158:	02800074 	movhi	r10,1
    915c:	52bda804 	addi	r10,r10,-2400
    9160:	da802415 	stw	r10,144(sp)
    9164:	200d883a 	mov	r6,r4
    9168:	003c9106 	br	83b0 <__alt_data_end+0xfffe83b0>
    916c:	5021883a 	mov	r16,r10
    9170:	0013883a 	mov	r9,zero
    9174:	003b7d06 	br	7f6c <__alt_data_end+0xfffe7f6c>
    9178:	4827883a 	mov	r19,r9
    917c:	df001d83 	ldbu	fp,118(sp)
    9180:	d8c02215 	stw	r3,136(sp)
    9184:	0013883a 	mov	r9,zero
    9188:	003c1806 	br	81ec <__alt_data_end+0xfffe81ec>
    918c:	1829883a 	mov	r20,r3
    9190:	003d1806 	br	85f4 <__alt_data_end+0xfffe85f4>
    9194:	1829883a 	mov	r20,r3
    9198:	003ccd06 	br	84d0 <__alt_data_end+0xfffe84d0>
    919c:	0025883a 	mov	r18,zero
    91a0:	003fe906 	br	9148 <__alt_data_end+0xfffe9148>
    91a4:	d8802217 	ldw	r2,136(sp)
    91a8:	80c00043 	ldbu	r3,1(r16)
    91ac:	5021883a 	mov	r16,r10
    91b0:	12400017 	ldw	r9,0(r2)
    91b4:	10800104 	addi	r2,r2,4
    91b8:	d8802215 	stw	r2,136(sp)
    91bc:	483faf0e 	bge	r9,zero,907c <__alt_data_end+0xfffe907c>
    91c0:	18c03fcc 	andi	r3,r3,255
    91c4:	18c0201c 	xori	r3,r3,128
    91c8:	027fffc4 	movi	r9,-1
    91cc:	18ffe004 	addi	r3,r3,-128
    91d0:	003b6506 	br	7f68 <__alt_data_end+0xfffe7f68>
    91d4:	d9c01d85 	stb	r7,118(sp)
    91d8:	003ca006 	br	845c <__alt_data_end+0xfffe845c>
    91dc:	d9c01d85 	stb	r7,118(sp)
    91e0:	003cad06 	br	8498 <__alt_data_end+0xfffe8498>
    91e4:	d9c01d85 	stb	r7,118(sp)
    91e8:	003d7d06 	br	87e0 <__alt_data_end+0xfffe87e0>
    91ec:	d9c01d85 	stb	r7,118(sp)
    91f0:	003d5f06 	br	8770 <__alt_data_end+0xfffe8770>
    91f4:	a080004c 	andi	r2,r20,1
    91f8:	0039883a 	mov	fp,zero
    91fc:	10000526 	beq	r2,zero,9214 <___vfiprintf_internal_r+0x1428>
    9200:	00800c04 	movi	r2,48
    9204:	d88019c5 	stb	r2,103(sp)
    9208:	dcc02717 	ldw	r19,156(sp)
    920c:	dd4019c4 	addi	r21,sp,103
    9210:	003bf606 	br	81ec <__alt_data_end+0xfffe81ec>
    9214:	0027883a 	mov	r19,zero
    9218:	dd401a04 	addi	r21,sp,104
    921c:	003bf306 	br	81ec <__alt_data_end+0xfffe81ec>
    9220:	d9c01d85 	stb	r7,118(sp)
    9224:	003dc806 	br	8948 <__alt_data_end+0xfffe8948>
    9228:	d9c01d85 	stb	r7,118(sp)
    922c:	003d3a06 	br	8718 <__alt_data_end+0xfffe8718>
    9230:	d9c01d85 	stb	r7,118(sp)
    9234:	003d2a06 	br	86e0 <__alt_data_end+0xfffe86e0>
    9238:	d9c01d85 	stb	r7,118(sp)
    923c:	003cde06 	br	85b8 <__alt_data_end+0xfffe85b8>
    9240:	d9c01d85 	stb	r7,118(sp)
    9244:	003cbc06 	br	8538 <__alt_data_end+0xfffe8538>

00009248 <__vfiprintf_internal>:
    9248:	00800074 	movhi	r2,1
    924c:	1084a904 	addi	r2,r2,4772
    9250:	300f883a 	mov	r7,r6
    9254:	280d883a 	mov	r6,r5
    9258:	200b883a 	mov	r5,r4
    925c:	11000017 	ldw	r4,0(r2)
    9260:	0007dec1 	jmpi	7dec <___vfiprintf_internal_r>

00009264 <__sbprintf>:
    9264:	2880030b 	ldhu	r2,12(r5)
    9268:	2ac01917 	ldw	r11,100(r5)
    926c:	2a80038b 	ldhu	r10,14(r5)
    9270:	2a400717 	ldw	r9,28(r5)
    9274:	2a000917 	ldw	r8,36(r5)
    9278:	defee204 	addi	sp,sp,-1144
    927c:	00c10004 	movi	r3,1024
    9280:	dc011a15 	stw	r16,1128(sp)
    9284:	10bfff4c 	andi	r2,r2,65533
    9288:	2821883a 	mov	r16,r5
    928c:	d8cb883a 	add	r5,sp,r3
    9290:	dc811c15 	stw	r18,1136(sp)
    9294:	dc411b15 	stw	r17,1132(sp)
    9298:	dfc11d15 	stw	ra,1140(sp)
    929c:	2025883a 	mov	r18,r4
    92a0:	d881030d 	sth	r2,1036(sp)
    92a4:	dac11915 	stw	r11,1124(sp)
    92a8:	da81038d 	sth	r10,1038(sp)
    92ac:	da410715 	stw	r9,1052(sp)
    92b0:	da010915 	stw	r8,1060(sp)
    92b4:	dec10015 	stw	sp,1024(sp)
    92b8:	dec10415 	stw	sp,1040(sp)
    92bc:	d8c10215 	stw	r3,1032(sp)
    92c0:	d8c10515 	stw	r3,1044(sp)
    92c4:	d8010615 	stw	zero,1048(sp)
    92c8:	0007dec0 	call	7dec <___vfiprintf_internal_r>
    92cc:	1023883a 	mov	r17,r2
    92d0:	10000416 	blt	r2,zero,92e4 <__sbprintf+0x80>
    92d4:	d9410004 	addi	r5,sp,1024
    92d8:	9009883a 	mov	r4,r18
    92dc:	00046a00 	call	46a0 <_fflush_r>
    92e0:	10000d1e 	bne	r2,zero,9318 <__sbprintf+0xb4>
    92e4:	d881030b 	ldhu	r2,1036(sp)
    92e8:	1080100c 	andi	r2,r2,64
    92ec:	10000326 	beq	r2,zero,92fc <__sbprintf+0x98>
    92f0:	8080030b 	ldhu	r2,12(r16)
    92f4:	10801014 	ori	r2,r2,64
    92f8:	8080030d 	sth	r2,12(r16)
    92fc:	8805883a 	mov	r2,r17
    9300:	dfc11d17 	ldw	ra,1140(sp)
    9304:	dc811c17 	ldw	r18,1136(sp)
    9308:	dc411b17 	ldw	r17,1132(sp)
    930c:	dc011a17 	ldw	r16,1128(sp)
    9310:	dec11e04 	addi	sp,sp,1144
    9314:	f800283a 	ret
    9318:	047fffc4 	movi	r17,-1
    931c:	003ff106 	br	92e4 <__alt_data_end+0xfffe92e4>

00009320 <_write_r>:
    9320:	defffd04 	addi	sp,sp,-12
    9324:	2805883a 	mov	r2,r5
    9328:	dc000015 	stw	r16,0(sp)
    932c:	04000074 	movhi	r16,1
    9330:	dc400115 	stw	r17,4(sp)
    9334:	300b883a 	mov	r5,r6
    9338:	840b7904 	addi	r16,r16,11748
    933c:	2023883a 	mov	r17,r4
    9340:	380d883a 	mov	r6,r7
    9344:	1009883a 	mov	r4,r2
    9348:	dfc00215 	stw	ra,8(sp)
    934c:	80000015 	stw	zero,0(r16)
    9350:	000d5b80 	call	d5b8 <write>
    9354:	00ffffc4 	movi	r3,-1
    9358:	10c00526 	beq	r2,r3,9370 <_write_r+0x50>
    935c:	dfc00217 	ldw	ra,8(sp)
    9360:	dc400117 	ldw	r17,4(sp)
    9364:	dc000017 	ldw	r16,0(sp)
    9368:	dec00304 	addi	sp,sp,12
    936c:	f800283a 	ret
    9370:	80c00017 	ldw	r3,0(r16)
    9374:	183ff926 	beq	r3,zero,935c <__alt_data_end+0xfffe935c>
    9378:	88c00015 	stw	r3,0(r17)
    937c:	003ff706 	br	935c <__alt_data_end+0xfffe935c>

00009380 <_close_r>:
    9380:	defffd04 	addi	sp,sp,-12
    9384:	dc000015 	stw	r16,0(sp)
    9388:	04000074 	movhi	r16,1
    938c:	dc400115 	stw	r17,4(sp)
    9390:	840b7904 	addi	r16,r16,11748
    9394:	2023883a 	mov	r17,r4
    9398:	2809883a 	mov	r4,r5
    939c:	dfc00215 	stw	ra,8(sp)
    93a0:	80000015 	stw	zero,0(r16)
    93a4:	000cda80 	call	cda8 <close>
    93a8:	00ffffc4 	movi	r3,-1
    93ac:	10c00526 	beq	r2,r3,93c4 <_close_r+0x44>
    93b0:	dfc00217 	ldw	ra,8(sp)
    93b4:	dc400117 	ldw	r17,4(sp)
    93b8:	dc000017 	ldw	r16,0(sp)
    93bc:	dec00304 	addi	sp,sp,12
    93c0:	f800283a 	ret
    93c4:	80c00017 	ldw	r3,0(r16)
    93c8:	183ff926 	beq	r3,zero,93b0 <__alt_data_end+0xfffe93b0>
    93cc:	88c00015 	stw	r3,0(r17)
    93d0:	003ff706 	br	93b0 <__alt_data_end+0xfffe93b0>

000093d4 <_calloc_r>:
    93d4:	298b383a 	mul	r5,r5,r6
    93d8:	defffe04 	addi	sp,sp,-8
    93dc:	dfc00115 	stw	ra,4(sp)
    93e0:	dc000015 	stw	r16,0(sp)
    93e4:	00057dc0 	call	57dc <_malloc_r>
    93e8:	10002926 	beq	r2,zero,9490 <_calloc_r+0xbc>
    93ec:	11bfff17 	ldw	r6,-4(r2)
    93f0:	1021883a 	mov	r16,r2
    93f4:	00bfff04 	movi	r2,-4
    93f8:	308c703a 	and	r6,r6,r2
    93fc:	00c00904 	movi	r3,36
    9400:	308d883a 	add	r6,r6,r2
    9404:	19801636 	bltu	r3,r6,9460 <_calloc_r+0x8c>
    9408:	008004c4 	movi	r2,19
    940c:	11800b2e 	bgeu	r2,r6,943c <_calloc_r+0x68>
    9410:	80000015 	stw	zero,0(r16)
    9414:	80000115 	stw	zero,4(r16)
    9418:	008006c4 	movi	r2,27
    941c:	11801a2e 	bgeu	r2,r6,9488 <_calloc_r+0xb4>
    9420:	80000215 	stw	zero,8(r16)
    9424:	80000315 	stw	zero,12(r16)
    9428:	30c0151e 	bne	r6,r3,9480 <_calloc_r+0xac>
    942c:	80000415 	stw	zero,16(r16)
    9430:	80800604 	addi	r2,r16,24
    9434:	80000515 	stw	zero,20(r16)
    9438:	00000106 	br	9440 <_calloc_r+0x6c>
    943c:	8005883a 	mov	r2,r16
    9440:	10000015 	stw	zero,0(r2)
    9444:	10000115 	stw	zero,4(r2)
    9448:	10000215 	stw	zero,8(r2)
    944c:	8005883a 	mov	r2,r16
    9450:	dfc00117 	ldw	ra,4(sp)
    9454:	dc000017 	ldw	r16,0(sp)
    9458:	dec00204 	addi	sp,sp,8
    945c:	f800283a 	ret
    9460:	000b883a 	mov	r5,zero
    9464:	8009883a 	mov	r4,r16
    9468:	00063700 	call	6370 <memset>
    946c:	8005883a 	mov	r2,r16
    9470:	dfc00117 	ldw	ra,4(sp)
    9474:	dc000017 	ldw	r16,0(sp)
    9478:	dec00204 	addi	sp,sp,8
    947c:	f800283a 	ret
    9480:	80800404 	addi	r2,r16,16
    9484:	003fee06 	br	9440 <__alt_data_end+0xfffe9440>
    9488:	80800204 	addi	r2,r16,8
    948c:	003fec06 	br	9440 <__alt_data_end+0xfffe9440>
    9490:	0005883a 	mov	r2,zero
    9494:	003fee06 	br	9450 <__alt_data_end+0xfffe9450>

00009498 <_fclose_r>:
    9498:	28003926 	beq	r5,zero,9580 <_fclose_r+0xe8>
    949c:	defffc04 	addi	sp,sp,-16
    94a0:	dc400115 	stw	r17,4(sp)
    94a4:	dc000015 	stw	r16,0(sp)
    94a8:	dfc00315 	stw	ra,12(sp)
    94ac:	dc800215 	stw	r18,8(sp)
    94b0:	2023883a 	mov	r17,r4
    94b4:	2821883a 	mov	r16,r5
    94b8:	20000226 	beq	r4,zero,94c4 <_fclose_r+0x2c>
    94bc:	20800e17 	ldw	r2,56(r4)
    94c0:	10002726 	beq	r2,zero,9560 <_fclose_r+0xc8>
    94c4:	8080030f 	ldh	r2,12(r16)
    94c8:	1000071e 	bne	r2,zero,94e8 <_fclose_r+0x50>
    94cc:	0005883a 	mov	r2,zero
    94d0:	dfc00317 	ldw	ra,12(sp)
    94d4:	dc800217 	ldw	r18,8(sp)
    94d8:	dc400117 	ldw	r17,4(sp)
    94dc:	dc000017 	ldw	r16,0(sp)
    94e0:	dec00404 	addi	sp,sp,16
    94e4:	f800283a 	ret
    94e8:	800b883a 	mov	r5,r16
    94ec:	8809883a 	mov	r4,r17
    94f0:	00044840 	call	4484 <__sflush_r>
    94f4:	1025883a 	mov	r18,r2
    94f8:	80800b17 	ldw	r2,44(r16)
    94fc:	10000426 	beq	r2,zero,9510 <_fclose_r+0x78>
    9500:	81400717 	ldw	r5,28(r16)
    9504:	8809883a 	mov	r4,r17
    9508:	103ee83a 	callr	r2
    950c:	10001616 	blt	r2,zero,9568 <_fclose_r+0xd0>
    9510:	8080030b 	ldhu	r2,12(r16)
    9514:	1080200c 	andi	r2,r2,128
    9518:	1000151e 	bne	r2,zero,9570 <_fclose_r+0xd8>
    951c:	81400c17 	ldw	r5,48(r16)
    9520:	28000526 	beq	r5,zero,9538 <_fclose_r+0xa0>
    9524:	80801004 	addi	r2,r16,64
    9528:	28800226 	beq	r5,r2,9534 <_fclose_r+0x9c>
    952c:	8809883a 	mov	r4,r17
    9530:	0004bf00 	call	4bf0 <_free_r>
    9534:	80000c15 	stw	zero,48(r16)
    9538:	81401117 	ldw	r5,68(r16)
    953c:	28000326 	beq	r5,zero,954c <_fclose_r+0xb4>
    9540:	8809883a 	mov	r4,r17
    9544:	0004bf00 	call	4bf0 <_free_r>
    9548:	80001115 	stw	zero,68(r16)
    954c:	0004a8c0 	call	4a8c <__sfp_lock_acquire>
    9550:	8000030d 	sth	zero,12(r16)
    9554:	0004a900 	call	4a90 <__sfp_lock_release>
    9558:	9005883a 	mov	r2,r18
    955c:	003fdc06 	br	94d0 <__alt_data_end+0xfffe94d0>
    9560:	0004a7c0 	call	4a7c <__sinit>
    9564:	003fd706 	br	94c4 <__alt_data_end+0xfffe94c4>
    9568:	04bfffc4 	movi	r18,-1
    956c:	003fe806 	br	9510 <__alt_data_end+0xfffe9510>
    9570:	81400417 	ldw	r5,16(r16)
    9574:	8809883a 	mov	r4,r17
    9578:	0004bf00 	call	4bf0 <_free_r>
    957c:	003fe706 	br	951c <__alt_data_end+0xfffe951c>
    9580:	0005883a 	mov	r2,zero
    9584:	f800283a 	ret

00009588 <fclose>:
    9588:	00800074 	movhi	r2,1
    958c:	1084a904 	addi	r2,r2,4772
    9590:	200b883a 	mov	r5,r4
    9594:	11000017 	ldw	r4,0(r2)
    9598:	00094981 	jmpi	9498 <_fclose_r>

0000959c <__fputwc>:
    959c:	defff804 	addi	sp,sp,-32
    95a0:	dcc00415 	stw	r19,16(sp)
    95a4:	dc800315 	stw	r18,12(sp)
    95a8:	dc000115 	stw	r16,4(sp)
    95ac:	dfc00715 	stw	ra,28(sp)
    95b0:	dd400615 	stw	r21,24(sp)
    95b4:	dd000515 	stw	r20,20(sp)
    95b8:	dc400215 	stw	r17,8(sp)
    95bc:	2027883a 	mov	r19,r4
    95c0:	2825883a 	mov	r18,r5
    95c4:	3021883a 	mov	r16,r6
    95c8:	00055cc0 	call	55cc <__locale_mb_cur_max>
    95cc:	00c00044 	movi	r3,1
    95d0:	10c03e26 	beq	r2,r3,96cc <__fputwc+0x130>
    95d4:	81c01704 	addi	r7,r16,92
    95d8:	900d883a 	mov	r6,r18
    95dc:	d80b883a 	mov	r5,sp
    95e0:	9809883a 	mov	r4,r19
    95e4:	0009a6c0 	call	9a6c <_wcrtomb_r>
    95e8:	1029883a 	mov	r20,r2
    95ec:	00bfffc4 	movi	r2,-1
    95f0:	a0802026 	beq	r20,r2,9674 <__fputwc+0xd8>
    95f4:	d9400003 	ldbu	r5,0(sp)
    95f8:	a0001c26 	beq	r20,zero,966c <__fputwc+0xd0>
    95fc:	0023883a 	mov	r17,zero
    9600:	05400284 	movi	r21,10
    9604:	00000906 	br	962c <__fputwc+0x90>
    9608:	80800017 	ldw	r2,0(r16)
    960c:	11400005 	stb	r5,0(r2)
    9610:	80c00017 	ldw	r3,0(r16)
    9614:	18c00044 	addi	r3,r3,1
    9618:	80c00015 	stw	r3,0(r16)
    961c:	8c400044 	addi	r17,r17,1
    9620:	dc45883a 	add	r2,sp,r17
    9624:	8d00112e 	bgeu	r17,r20,966c <__fputwc+0xd0>
    9628:	11400003 	ldbu	r5,0(r2)
    962c:	80c00217 	ldw	r3,8(r16)
    9630:	18ffffc4 	addi	r3,r3,-1
    9634:	80c00215 	stw	r3,8(r16)
    9638:	183ff30e 	bge	r3,zero,9608 <__alt_data_end+0xfffe9608>
    963c:	80800617 	ldw	r2,24(r16)
    9640:	18801916 	blt	r3,r2,96a8 <__fputwc+0x10c>
    9644:	80800017 	ldw	r2,0(r16)
    9648:	11400005 	stb	r5,0(r2)
    964c:	80800017 	ldw	r2,0(r16)
    9650:	10c00003 	ldbu	r3,0(r2)
    9654:	10800044 	addi	r2,r2,1
    9658:	1d402326 	beq	r3,r21,96e8 <__fputwc+0x14c>
    965c:	80800015 	stw	r2,0(r16)
    9660:	8c400044 	addi	r17,r17,1
    9664:	dc45883a 	add	r2,sp,r17
    9668:	8d3fef36 	bltu	r17,r20,9628 <__alt_data_end+0xfffe9628>
    966c:	9005883a 	mov	r2,r18
    9670:	00000406 	br	9684 <__fputwc+0xe8>
    9674:	80c0030b 	ldhu	r3,12(r16)
    9678:	a005883a 	mov	r2,r20
    967c:	18c01014 	ori	r3,r3,64
    9680:	80c0030d 	sth	r3,12(r16)
    9684:	dfc00717 	ldw	ra,28(sp)
    9688:	dd400617 	ldw	r21,24(sp)
    968c:	dd000517 	ldw	r20,20(sp)
    9690:	dcc00417 	ldw	r19,16(sp)
    9694:	dc800317 	ldw	r18,12(sp)
    9698:	dc400217 	ldw	r17,8(sp)
    969c:	dc000117 	ldw	r16,4(sp)
    96a0:	dec00804 	addi	sp,sp,32
    96a4:	f800283a 	ret
    96a8:	800d883a 	mov	r6,r16
    96ac:	29403fcc 	andi	r5,r5,255
    96b0:	9809883a 	mov	r4,r19
    96b4:	00099140 	call	9914 <__swbuf_r>
    96b8:	10bfffe0 	cmpeqi	r2,r2,-1
    96bc:	10803fcc 	andi	r2,r2,255
    96c0:	103fd626 	beq	r2,zero,961c <__alt_data_end+0xfffe961c>
    96c4:	00bfffc4 	movi	r2,-1
    96c8:	003fee06 	br	9684 <__alt_data_end+0xfffe9684>
    96cc:	90ffffc4 	addi	r3,r18,-1
    96d0:	01003f84 	movi	r4,254
    96d4:	20ffbf36 	bltu	r4,r3,95d4 <__alt_data_end+0xfffe95d4>
    96d8:	900b883a 	mov	r5,r18
    96dc:	dc800005 	stb	r18,0(sp)
    96e0:	1029883a 	mov	r20,r2
    96e4:	003fc506 	br	95fc <__alt_data_end+0xfffe95fc>
    96e8:	800d883a 	mov	r6,r16
    96ec:	a80b883a 	mov	r5,r21
    96f0:	9809883a 	mov	r4,r19
    96f4:	00099140 	call	9914 <__swbuf_r>
    96f8:	10bfffe0 	cmpeqi	r2,r2,-1
    96fc:	003fef06 	br	96bc <__alt_data_end+0xfffe96bc>

00009700 <_fputwc_r>:
    9700:	3080030b 	ldhu	r2,12(r6)
    9704:	10c8000c 	andi	r3,r2,8192
    9708:	1800051e 	bne	r3,zero,9720 <_fputwc_r+0x20>
    970c:	30c01917 	ldw	r3,100(r6)
    9710:	10880014 	ori	r2,r2,8192
    9714:	3080030d 	sth	r2,12(r6)
    9718:	18880014 	ori	r2,r3,8192
    971c:	30801915 	stw	r2,100(r6)
    9720:	000959c1 	jmpi	959c <__fputwc>

00009724 <fputwc>:
    9724:	00800074 	movhi	r2,1
    9728:	defffc04 	addi	sp,sp,-16
    972c:	1084a904 	addi	r2,r2,4772
    9730:	dc000115 	stw	r16,4(sp)
    9734:	14000017 	ldw	r16,0(r2)
    9738:	dc400215 	stw	r17,8(sp)
    973c:	dfc00315 	stw	ra,12(sp)
    9740:	2023883a 	mov	r17,r4
    9744:	80000226 	beq	r16,zero,9750 <fputwc+0x2c>
    9748:	80800e17 	ldw	r2,56(r16)
    974c:	10001026 	beq	r2,zero,9790 <fputwc+0x6c>
    9750:	2880030b 	ldhu	r2,12(r5)
    9754:	10c8000c 	andi	r3,r2,8192
    9758:	1800051e 	bne	r3,zero,9770 <fputwc+0x4c>
    975c:	28c01917 	ldw	r3,100(r5)
    9760:	10880014 	ori	r2,r2,8192
    9764:	2880030d 	sth	r2,12(r5)
    9768:	18880014 	ori	r2,r3,8192
    976c:	28801915 	stw	r2,100(r5)
    9770:	280d883a 	mov	r6,r5
    9774:	8009883a 	mov	r4,r16
    9778:	880b883a 	mov	r5,r17
    977c:	dfc00317 	ldw	ra,12(sp)
    9780:	dc400217 	ldw	r17,8(sp)
    9784:	dc000117 	ldw	r16,4(sp)
    9788:	dec00404 	addi	sp,sp,16
    978c:	000959c1 	jmpi	959c <__fputwc>
    9790:	8009883a 	mov	r4,r16
    9794:	d9400015 	stw	r5,0(sp)
    9798:	0004a7c0 	call	4a7c <__sinit>
    979c:	d9400017 	ldw	r5,0(sp)
    97a0:	003feb06 	br	9750 <__alt_data_end+0xfffe9750>

000097a4 <_fstat_r>:
    97a4:	defffd04 	addi	sp,sp,-12
    97a8:	2805883a 	mov	r2,r5
    97ac:	dc000015 	stw	r16,0(sp)
    97b0:	04000074 	movhi	r16,1
    97b4:	dc400115 	stw	r17,4(sp)
    97b8:	840b7904 	addi	r16,r16,11748
    97bc:	2023883a 	mov	r17,r4
    97c0:	300b883a 	mov	r5,r6
    97c4:	1009883a 	mov	r4,r2
    97c8:	dfc00215 	stw	ra,8(sp)
    97cc:	80000015 	stw	zero,0(r16)
    97d0:	000cee00 	call	cee0 <fstat>
    97d4:	00ffffc4 	movi	r3,-1
    97d8:	10c00526 	beq	r2,r3,97f0 <_fstat_r+0x4c>
    97dc:	dfc00217 	ldw	ra,8(sp)
    97e0:	dc400117 	ldw	r17,4(sp)
    97e4:	dc000017 	ldw	r16,0(sp)
    97e8:	dec00304 	addi	sp,sp,12
    97ec:	f800283a 	ret
    97f0:	80c00017 	ldw	r3,0(r16)
    97f4:	183ff926 	beq	r3,zero,97dc <__alt_data_end+0xfffe97dc>
    97f8:	88c00015 	stw	r3,0(r17)
    97fc:	003ff706 	br	97dc <__alt_data_end+0xfffe97dc>

00009800 <_isatty_r>:
    9800:	defffd04 	addi	sp,sp,-12
    9804:	dc000015 	stw	r16,0(sp)
    9808:	04000074 	movhi	r16,1
    980c:	dc400115 	stw	r17,4(sp)
    9810:	840b7904 	addi	r16,r16,11748
    9814:	2023883a 	mov	r17,r4
    9818:	2809883a 	mov	r4,r5
    981c:	dfc00215 	stw	ra,8(sp)
    9820:	80000015 	stw	zero,0(r16)
    9824:	000cfcc0 	call	cfcc <isatty>
    9828:	00ffffc4 	movi	r3,-1
    982c:	10c00526 	beq	r2,r3,9844 <_isatty_r+0x44>
    9830:	dfc00217 	ldw	ra,8(sp)
    9834:	dc400117 	ldw	r17,4(sp)
    9838:	dc000017 	ldw	r16,0(sp)
    983c:	dec00304 	addi	sp,sp,12
    9840:	f800283a 	ret
    9844:	80c00017 	ldw	r3,0(r16)
    9848:	183ff926 	beq	r3,zero,9830 <__alt_data_end+0xfffe9830>
    984c:	88c00015 	stw	r3,0(r17)
    9850:	003ff706 	br	9830 <__alt_data_end+0xfffe9830>

00009854 <_lseek_r>:
    9854:	defffd04 	addi	sp,sp,-12
    9858:	2805883a 	mov	r2,r5
    985c:	dc000015 	stw	r16,0(sp)
    9860:	04000074 	movhi	r16,1
    9864:	dc400115 	stw	r17,4(sp)
    9868:	300b883a 	mov	r5,r6
    986c:	840b7904 	addi	r16,r16,11748
    9870:	2023883a 	mov	r17,r4
    9874:	380d883a 	mov	r6,r7
    9878:	1009883a 	mov	r4,r2
    987c:	dfc00215 	stw	ra,8(sp)
    9880:	80000015 	stw	zero,0(r16)
    9884:	000d1980 	call	d198 <lseek>
    9888:	00ffffc4 	movi	r3,-1
    988c:	10c00526 	beq	r2,r3,98a4 <_lseek_r+0x50>
    9890:	dfc00217 	ldw	ra,8(sp)
    9894:	dc400117 	ldw	r17,4(sp)
    9898:	dc000017 	ldw	r16,0(sp)
    989c:	dec00304 	addi	sp,sp,12
    98a0:	f800283a 	ret
    98a4:	80c00017 	ldw	r3,0(r16)
    98a8:	183ff926 	beq	r3,zero,9890 <__alt_data_end+0xfffe9890>
    98ac:	88c00015 	stw	r3,0(r17)
    98b0:	003ff706 	br	9890 <__alt_data_end+0xfffe9890>

000098b4 <_read_r>:
    98b4:	defffd04 	addi	sp,sp,-12
    98b8:	2805883a 	mov	r2,r5
    98bc:	dc000015 	stw	r16,0(sp)
    98c0:	04000074 	movhi	r16,1
    98c4:	dc400115 	stw	r17,4(sp)
    98c8:	300b883a 	mov	r5,r6
    98cc:	840b7904 	addi	r16,r16,11748
    98d0:	2023883a 	mov	r17,r4
    98d4:	380d883a 	mov	r6,r7
    98d8:	1009883a 	mov	r4,r2
    98dc:	dfc00215 	stw	ra,8(sp)
    98e0:	80000015 	stw	zero,0(r16)
    98e4:	000d36c0 	call	d36c <read>
    98e8:	00ffffc4 	movi	r3,-1
    98ec:	10c00526 	beq	r2,r3,9904 <_read_r+0x50>
    98f0:	dfc00217 	ldw	ra,8(sp)
    98f4:	dc400117 	ldw	r17,4(sp)
    98f8:	dc000017 	ldw	r16,0(sp)
    98fc:	dec00304 	addi	sp,sp,12
    9900:	f800283a 	ret
    9904:	80c00017 	ldw	r3,0(r16)
    9908:	183ff926 	beq	r3,zero,98f0 <__alt_data_end+0xfffe98f0>
    990c:	88c00015 	stw	r3,0(r17)
    9910:	003ff706 	br	98f0 <__alt_data_end+0xfffe98f0>

00009914 <__swbuf_r>:
    9914:	defffb04 	addi	sp,sp,-20
    9918:	dcc00315 	stw	r19,12(sp)
    991c:	dc800215 	stw	r18,8(sp)
    9920:	dc000015 	stw	r16,0(sp)
    9924:	dfc00415 	stw	ra,16(sp)
    9928:	dc400115 	stw	r17,4(sp)
    992c:	2025883a 	mov	r18,r4
    9930:	2827883a 	mov	r19,r5
    9934:	3021883a 	mov	r16,r6
    9938:	20000226 	beq	r4,zero,9944 <__swbuf_r+0x30>
    993c:	20800e17 	ldw	r2,56(r4)
    9940:	10004226 	beq	r2,zero,9a4c <__swbuf_r+0x138>
    9944:	80800617 	ldw	r2,24(r16)
    9948:	8100030b 	ldhu	r4,12(r16)
    994c:	80800215 	stw	r2,8(r16)
    9950:	2080020c 	andi	r2,r4,8
    9954:	10003626 	beq	r2,zero,9a30 <__swbuf_r+0x11c>
    9958:	80c00417 	ldw	r3,16(r16)
    995c:	18003426 	beq	r3,zero,9a30 <__swbuf_r+0x11c>
    9960:	2088000c 	andi	r2,r4,8192
    9964:	9c403fcc 	andi	r17,r19,255
    9968:	10001a26 	beq	r2,zero,99d4 <__swbuf_r+0xc0>
    996c:	80800017 	ldw	r2,0(r16)
    9970:	81000517 	ldw	r4,20(r16)
    9974:	10c7c83a 	sub	r3,r2,r3
    9978:	1900200e 	bge	r3,r4,99fc <__swbuf_r+0xe8>
    997c:	18c00044 	addi	r3,r3,1
    9980:	81000217 	ldw	r4,8(r16)
    9984:	11400044 	addi	r5,r2,1
    9988:	81400015 	stw	r5,0(r16)
    998c:	213fffc4 	addi	r4,r4,-1
    9990:	81000215 	stw	r4,8(r16)
    9994:	14c00005 	stb	r19,0(r2)
    9998:	80800517 	ldw	r2,20(r16)
    999c:	10c01e26 	beq	r2,r3,9a18 <__swbuf_r+0x104>
    99a0:	8080030b 	ldhu	r2,12(r16)
    99a4:	1080004c 	andi	r2,r2,1
    99a8:	10000226 	beq	r2,zero,99b4 <__swbuf_r+0xa0>
    99ac:	00800284 	movi	r2,10
    99b0:	88801926 	beq	r17,r2,9a18 <__swbuf_r+0x104>
    99b4:	8805883a 	mov	r2,r17
    99b8:	dfc00417 	ldw	ra,16(sp)
    99bc:	dcc00317 	ldw	r19,12(sp)
    99c0:	dc800217 	ldw	r18,8(sp)
    99c4:	dc400117 	ldw	r17,4(sp)
    99c8:	dc000017 	ldw	r16,0(sp)
    99cc:	dec00504 	addi	sp,sp,20
    99d0:	f800283a 	ret
    99d4:	81401917 	ldw	r5,100(r16)
    99d8:	00b7ffc4 	movi	r2,-8193
    99dc:	21080014 	ori	r4,r4,8192
    99e0:	2884703a 	and	r2,r5,r2
    99e4:	80801915 	stw	r2,100(r16)
    99e8:	80800017 	ldw	r2,0(r16)
    99ec:	8100030d 	sth	r4,12(r16)
    99f0:	81000517 	ldw	r4,20(r16)
    99f4:	10c7c83a 	sub	r3,r2,r3
    99f8:	193fe016 	blt	r3,r4,997c <__alt_data_end+0xfffe997c>
    99fc:	800b883a 	mov	r5,r16
    9a00:	9009883a 	mov	r4,r18
    9a04:	00046a00 	call	46a0 <_fflush_r>
    9a08:	1000071e 	bne	r2,zero,9a28 <__swbuf_r+0x114>
    9a0c:	80800017 	ldw	r2,0(r16)
    9a10:	00c00044 	movi	r3,1
    9a14:	003fda06 	br	9980 <__alt_data_end+0xfffe9980>
    9a18:	800b883a 	mov	r5,r16
    9a1c:	9009883a 	mov	r4,r18
    9a20:	00046a00 	call	46a0 <_fflush_r>
    9a24:	103fe326 	beq	r2,zero,99b4 <__alt_data_end+0xfffe99b4>
    9a28:	00bfffc4 	movi	r2,-1
    9a2c:	003fe206 	br	99b8 <__alt_data_end+0xfffe99b8>
    9a30:	800b883a 	mov	r5,r16
    9a34:	9009883a 	mov	r4,r18
    9a38:	0002aa80 	call	2aa8 <__swsetup_r>
    9a3c:	103ffa1e 	bne	r2,zero,9a28 <__alt_data_end+0xfffe9a28>
    9a40:	8100030b 	ldhu	r4,12(r16)
    9a44:	80c00417 	ldw	r3,16(r16)
    9a48:	003fc506 	br	9960 <__alt_data_end+0xfffe9960>
    9a4c:	0004a7c0 	call	4a7c <__sinit>
    9a50:	003fbc06 	br	9944 <__alt_data_end+0xfffe9944>

00009a54 <__swbuf>:
    9a54:	00800074 	movhi	r2,1
    9a58:	1084a904 	addi	r2,r2,4772
    9a5c:	280d883a 	mov	r6,r5
    9a60:	200b883a 	mov	r5,r4
    9a64:	11000017 	ldw	r4,0(r2)
    9a68:	00099141 	jmpi	9914 <__swbuf_r>

00009a6c <_wcrtomb_r>:
    9a6c:	defff604 	addi	sp,sp,-40
    9a70:	00800074 	movhi	r2,1
    9a74:	dc800815 	stw	r18,32(sp)
    9a78:	dc400715 	stw	r17,28(sp)
    9a7c:	dc000615 	stw	r16,24(sp)
    9a80:	1084ad04 	addi	r2,r2,4788
    9a84:	dfc00915 	stw	ra,36(sp)
    9a88:	2021883a 	mov	r16,r4
    9a8c:	3823883a 	mov	r17,r7
    9a90:	14800017 	ldw	r18,0(r2)
    9a94:	28001426 	beq	r5,zero,9ae8 <_wcrtomb_r+0x7c>
    9a98:	d9400415 	stw	r5,16(sp)
    9a9c:	d9800515 	stw	r6,20(sp)
    9aa0:	00055c00 	call	55c0 <__locale_charset>
    9aa4:	d9800517 	ldw	r6,20(sp)
    9aa8:	d9400417 	ldw	r5,16(sp)
    9aac:	100f883a 	mov	r7,r2
    9ab0:	dc400015 	stw	r17,0(sp)
    9ab4:	8009883a 	mov	r4,r16
    9ab8:	903ee83a 	callr	r18
    9abc:	00ffffc4 	movi	r3,-1
    9ac0:	10c0031e 	bne	r2,r3,9ad0 <_wcrtomb_r+0x64>
    9ac4:	88000015 	stw	zero,0(r17)
    9ac8:	00c02284 	movi	r3,138
    9acc:	80c00015 	stw	r3,0(r16)
    9ad0:	dfc00917 	ldw	ra,36(sp)
    9ad4:	dc800817 	ldw	r18,32(sp)
    9ad8:	dc400717 	ldw	r17,28(sp)
    9adc:	dc000617 	ldw	r16,24(sp)
    9ae0:	dec00a04 	addi	sp,sp,40
    9ae4:	f800283a 	ret
    9ae8:	00055c00 	call	55c0 <__locale_charset>
    9aec:	100f883a 	mov	r7,r2
    9af0:	dc400015 	stw	r17,0(sp)
    9af4:	000d883a 	mov	r6,zero
    9af8:	d9400104 	addi	r5,sp,4
    9afc:	8009883a 	mov	r4,r16
    9b00:	903ee83a 	callr	r18
    9b04:	003fed06 	br	9abc <__alt_data_end+0xfffe9abc>

00009b08 <wcrtomb>:
    9b08:	defff604 	addi	sp,sp,-40
    9b0c:	00800074 	movhi	r2,1
    9b10:	dc800615 	stw	r18,24(sp)
    9b14:	dc400515 	stw	r17,20(sp)
    9b18:	1084a904 	addi	r2,r2,4772
    9b1c:	dfc00915 	stw	ra,36(sp)
    9b20:	dd000815 	stw	r20,32(sp)
    9b24:	dcc00715 	stw	r19,28(sp)
    9b28:	dc000415 	stw	r16,16(sp)
    9b2c:	3025883a 	mov	r18,r6
    9b30:	14400017 	ldw	r17,0(r2)
    9b34:	20001926 	beq	r4,zero,9b9c <wcrtomb+0x94>
    9b38:	00800074 	movhi	r2,1
    9b3c:	1084ad04 	addi	r2,r2,4788
    9b40:	15000017 	ldw	r20,0(r2)
    9b44:	2021883a 	mov	r16,r4
    9b48:	2827883a 	mov	r19,r5
    9b4c:	00055c00 	call	55c0 <__locale_charset>
    9b50:	100f883a 	mov	r7,r2
    9b54:	dc800015 	stw	r18,0(sp)
    9b58:	980d883a 	mov	r6,r19
    9b5c:	800b883a 	mov	r5,r16
    9b60:	8809883a 	mov	r4,r17
    9b64:	a03ee83a 	callr	r20
    9b68:	00ffffc4 	movi	r3,-1
    9b6c:	10c0031e 	bne	r2,r3,9b7c <wcrtomb+0x74>
    9b70:	90000015 	stw	zero,0(r18)
    9b74:	00c02284 	movi	r3,138
    9b78:	88c00015 	stw	r3,0(r17)
    9b7c:	dfc00917 	ldw	ra,36(sp)
    9b80:	dd000817 	ldw	r20,32(sp)
    9b84:	dcc00717 	ldw	r19,28(sp)
    9b88:	dc800617 	ldw	r18,24(sp)
    9b8c:	dc400517 	ldw	r17,20(sp)
    9b90:	dc000417 	ldw	r16,16(sp)
    9b94:	dec00a04 	addi	sp,sp,40
    9b98:	f800283a 	ret
    9b9c:	00800074 	movhi	r2,1
    9ba0:	1084ad04 	addi	r2,r2,4788
    9ba4:	14000017 	ldw	r16,0(r2)
    9ba8:	00055c00 	call	55c0 <__locale_charset>
    9bac:	100f883a 	mov	r7,r2
    9bb0:	dc800015 	stw	r18,0(sp)
    9bb4:	000d883a 	mov	r6,zero
    9bb8:	d9400104 	addi	r5,sp,4
    9bbc:	8809883a 	mov	r4,r17
    9bc0:	803ee83a 	callr	r16
    9bc4:	003fe806 	br	9b68 <__alt_data_end+0xfffe9b68>

00009bc8 <__ascii_wctomb>:
    9bc8:	28000526 	beq	r5,zero,9be0 <__ascii_wctomb+0x18>
    9bcc:	00803fc4 	movi	r2,255
    9bd0:	11800536 	bltu	r2,r6,9be8 <__ascii_wctomb+0x20>
    9bd4:	29800005 	stb	r6,0(r5)
    9bd8:	00800044 	movi	r2,1
    9bdc:	f800283a 	ret
    9be0:	0005883a 	mov	r2,zero
    9be4:	f800283a 	ret
    9be8:	00802284 	movi	r2,138
    9bec:	20800015 	stw	r2,0(r4)
    9bf0:	00bfffc4 	movi	r2,-1
    9bf4:	f800283a 	ret

00009bf8 <_wctomb_r>:
    9bf8:	00800074 	movhi	r2,1
    9bfc:	defff904 	addi	sp,sp,-28
    9c00:	1084ad04 	addi	r2,r2,4788
    9c04:	dfc00615 	stw	ra,24(sp)
    9c08:	dc400515 	stw	r17,20(sp)
    9c0c:	dc000415 	stw	r16,16(sp)
    9c10:	3823883a 	mov	r17,r7
    9c14:	14000017 	ldw	r16,0(r2)
    9c18:	d9000115 	stw	r4,4(sp)
    9c1c:	d9400215 	stw	r5,8(sp)
    9c20:	d9800315 	stw	r6,12(sp)
    9c24:	00055c00 	call	55c0 <__locale_charset>
    9c28:	d9800317 	ldw	r6,12(sp)
    9c2c:	d9400217 	ldw	r5,8(sp)
    9c30:	d9000117 	ldw	r4,4(sp)
    9c34:	100f883a 	mov	r7,r2
    9c38:	dc400015 	stw	r17,0(sp)
    9c3c:	803ee83a 	callr	r16
    9c40:	dfc00617 	ldw	ra,24(sp)
    9c44:	dc400517 	ldw	r17,20(sp)
    9c48:	dc000417 	ldw	r16,16(sp)
    9c4c:	dec00704 	addi	sp,sp,28
    9c50:	f800283a 	ret

00009c54 <__udivdi3>:
    9c54:	defff504 	addi	sp,sp,-44
    9c58:	dcc00415 	stw	r19,16(sp)
    9c5c:	dc000115 	stw	r16,4(sp)
    9c60:	dfc00a15 	stw	ra,40(sp)
    9c64:	df000915 	stw	fp,36(sp)
    9c68:	ddc00815 	stw	r23,32(sp)
    9c6c:	dd800715 	stw	r22,28(sp)
    9c70:	dd400615 	stw	r21,24(sp)
    9c74:	dd000515 	stw	r20,20(sp)
    9c78:	dc800315 	stw	r18,12(sp)
    9c7c:	dc400215 	stw	r17,8(sp)
    9c80:	2027883a 	mov	r19,r4
    9c84:	2821883a 	mov	r16,r5
    9c88:	3800411e 	bne	r7,zero,9d90 <__udivdi3+0x13c>
    9c8c:	3023883a 	mov	r17,r6
    9c90:	2025883a 	mov	r18,r4
    9c94:	2980522e 	bgeu	r5,r6,9de0 <__udivdi3+0x18c>
    9c98:	00bfffd4 	movui	r2,65535
    9c9c:	282d883a 	mov	r22,r5
    9ca0:	1180a836 	bltu	r2,r6,9f44 <__udivdi3+0x2f0>
    9ca4:	00803fc4 	movi	r2,255
    9ca8:	1185803a 	cmpltu	r2,r2,r6
    9cac:	100490fa 	slli	r2,r2,3
    9cb0:	3086d83a 	srl	r3,r6,r2
    9cb4:	01000074 	movhi	r4,1
    9cb8:	213db004 	addi	r4,r4,-2368
    9cbc:	20c7883a 	add	r3,r4,r3
    9cc0:	18c00003 	ldbu	r3,0(r3)
    9cc4:	1885883a 	add	r2,r3,r2
    9cc8:	00c00804 	movi	r3,32
    9ccc:	1887c83a 	sub	r3,r3,r2
    9cd0:	18000526 	beq	r3,zero,9ce8 <__udivdi3+0x94>
    9cd4:	80e0983a 	sll	r16,r16,r3
    9cd8:	9884d83a 	srl	r2,r19,r2
    9cdc:	30e2983a 	sll	r17,r6,r3
    9ce0:	98e4983a 	sll	r18,r19,r3
    9ce4:	142cb03a 	or	r22,r2,r16
    9ce8:	882ad43a 	srli	r21,r17,16
    9cec:	b009883a 	mov	r4,r22
    9cf0:	8d3fffcc 	andi	r20,r17,65535
    9cf4:	a80b883a 	mov	r5,r21
    9cf8:	00005a80 	call	5a8 <__umodsi3>
    9cfc:	b009883a 	mov	r4,r22
    9d00:	a80b883a 	mov	r5,r21
    9d04:	1027883a 	mov	r19,r2
    9d08:	00005440 	call	544 <__udivsi3>
    9d0c:	102d883a 	mov	r22,r2
    9d10:	9826943a 	slli	r19,r19,16
    9d14:	9004d43a 	srli	r2,r18,16
    9d18:	a5a1383a 	mul	r16,r20,r22
    9d1c:	14c4b03a 	or	r2,r2,r19
    9d20:	1400052e 	bgeu	r2,r16,9d38 <__udivdi3+0xe4>
    9d24:	1445883a 	add	r2,r2,r17
    9d28:	b0ffffc4 	addi	r3,r22,-1
    9d2c:	14400136 	bltu	r2,r17,9d34 <__udivdi3+0xe0>
    9d30:	14012336 	bltu	r2,r16,a1c0 <__udivdi3+0x56c>
    9d34:	182d883a 	mov	r22,r3
    9d38:	1421c83a 	sub	r16,r2,r16
    9d3c:	a80b883a 	mov	r5,r21
    9d40:	8009883a 	mov	r4,r16
    9d44:	00005a80 	call	5a8 <__umodsi3>
    9d48:	1027883a 	mov	r19,r2
    9d4c:	a80b883a 	mov	r5,r21
    9d50:	8009883a 	mov	r4,r16
    9d54:	00005440 	call	544 <__udivsi3>
    9d58:	9826943a 	slli	r19,r19,16
    9d5c:	a0a9383a 	mul	r20,r20,r2
    9d60:	94bfffcc 	andi	r18,r18,65535
    9d64:	94e4b03a 	or	r18,r18,r19
    9d68:	9500052e 	bgeu	r18,r20,9d80 <__udivdi3+0x12c>
    9d6c:	8ca5883a 	add	r18,r17,r18
    9d70:	10ffffc4 	addi	r3,r2,-1
    9d74:	9440f136 	bltu	r18,r17,a13c <__udivdi3+0x4e8>
    9d78:	9500f02e 	bgeu	r18,r20,a13c <__udivdi3+0x4e8>
    9d7c:	10bfff84 	addi	r2,r2,-2
    9d80:	b00c943a 	slli	r6,r22,16
    9d84:	0007883a 	mov	r3,zero
    9d88:	3084b03a 	or	r2,r6,r2
    9d8c:	00005906 	br	9ef4 <__udivdi3+0x2a0>
    9d90:	29c05636 	bltu	r5,r7,9eec <__udivdi3+0x298>
    9d94:	00bfffd4 	movui	r2,65535
    9d98:	11c0622e 	bgeu	r2,r7,9f24 <__udivdi3+0x2d0>
    9d9c:	00804034 	movhi	r2,256
    9da0:	10bfffc4 	addi	r2,r2,-1
    9da4:	11c0ee36 	bltu	r2,r7,a160 <__udivdi3+0x50c>
    9da8:	00800404 	movi	r2,16
    9dac:	3886d83a 	srl	r3,r7,r2
    9db0:	01000074 	movhi	r4,1
    9db4:	213db004 	addi	r4,r4,-2368
    9db8:	20c7883a 	add	r3,r4,r3
    9dbc:	18c00003 	ldbu	r3,0(r3)
    9dc0:	05400804 	movi	r21,32
    9dc4:	1885883a 	add	r2,r3,r2
    9dc8:	a8abc83a 	sub	r21,r21,r2
    9dcc:	a800621e 	bne	r21,zero,9f58 <__udivdi3+0x304>
    9dd0:	3c00e936 	bltu	r7,r16,a178 <__udivdi3+0x524>
    9dd4:	9985403a 	cmpgeu	r2,r19,r6
    9dd8:	0007883a 	mov	r3,zero
    9ddc:	00004506 	br	9ef4 <__udivdi3+0x2a0>
    9de0:	3000041e 	bne	r6,zero,9df4 <__udivdi3+0x1a0>
    9de4:	000b883a 	mov	r5,zero
    9de8:	01000044 	movi	r4,1
    9dec:	00005440 	call	544 <__udivsi3>
    9df0:	1023883a 	mov	r17,r2
    9df4:	00bfffd4 	movui	r2,65535
    9df8:	14404e2e 	bgeu	r2,r17,9f34 <__udivdi3+0x2e0>
    9dfc:	00804034 	movhi	r2,256
    9e00:	10bfffc4 	addi	r2,r2,-1
    9e04:	1440d836 	bltu	r2,r17,a168 <__udivdi3+0x514>
    9e08:	00800404 	movi	r2,16
    9e0c:	8886d83a 	srl	r3,r17,r2
    9e10:	01000074 	movhi	r4,1
    9e14:	213db004 	addi	r4,r4,-2368
    9e18:	20c7883a 	add	r3,r4,r3
    9e1c:	18c00003 	ldbu	r3,0(r3)
    9e20:	1885883a 	add	r2,r3,r2
    9e24:	00c00804 	movi	r3,32
    9e28:	1887c83a 	sub	r3,r3,r2
    9e2c:	18008f1e 	bne	r3,zero,a06c <__udivdi3+0x418>
    9e30:	882ad43a 	srli	r21,r17,16
    9e34:	8461c83a 	sub	r16,r16,r17
    9e38:	8d3fffcc 	andi	r20,r17,65535
    9e3c:	00c00044 	movi	r3,1
    9e40:	8009883a 	mov	r4,r16
    9e44:	a80b883a 	mov	r5,r21
    9e48:	d8c00015 	stw	r3,0(sp)
    9e4c:	00005a80 	call	5a8 <__umodsi3>
    9e50:	8009883a 	mov	r4,r16
    9e54:	a80b883a 	mov	r5,r21
    9e58:	1027883a 	mov	r19,r2
    9e5c:	00005440 	call	544 <__udivsi3>
    9e60:	9826943a 	slli	r19,r19,16
    9e64:	9008d43a 	srli	r4,r18,16
    9e68:	1521383a 	mul	r16,r2,r20
    9e6c:	102d883a 	mov	r22,r2
    9e70:	24c8b03a 	or	r4,r4,r19
    9e74:	d8c00017 	ldw	r3,0(sp)
    9e78:	2400052e 	bgeu	r4,r16,9e90 <__udivdi3+0x23c>
    9e7c:	2449883a 	add	r4,r4,r17
    9e80:	b0bfffc4 	addi	r2,r22,-1
    9e84:	24400136 	bltu	r4,r17,9e8c <__udivdi3+0x238>
    9e88:	2400ca36 	bltu	r4,r16,a1b4 <__udivdi3+0x560>
    9e8c:	102d883a 	mov	r22,r2
    9e90:	2421c83a 	sub	r16,r4,r16
    9e94:	a80b883a 	mov	r5,r21
    9e98:	8009883a 	mov	r4,r16
    9e9c:	d8c00015 	stw	r3,0(sp)
    9ea0:	00005a80 	call	5a8 <__umodsi3>
    9ea4:	1027883a 	mov	r19,r2
    9ea8:	a80b883a 	mov	r5,r21
    9eac:	8009883a 	mov	r4,r16
    9eb0:	00005440 	call	544 <__udivsi3>
    9eb4:	9826943a 	slli	r19,r19,16
    9eb8:	1529383a 	mul	r20,r2,r20
    9ebc:	94bfffcc 	andi	r18,r18,65535
    9ec0:	94e4b03a 	or	r18,r18,r19
    9ec4:	d8c00017 	ldw	r3,0(sp)
    9ec8:	9500052e 	bgeu	r18,r20,9ee0 <__udivdi3+0x28c>
    9ecc:	8ca5883a 	add	r18,r17,r18
    9ed0:	113fffc4 	addi	r4,r2,-1
    9ed4:	94409736 	bltu	r18,r17,a134 <__udivdi3+0x4e0>
    9ed8:	9500962e 	bgeu	r18,r20,a134 <__udivdi3+0x4e0>
    9edc:	10bfff84 	addi	r2,r2,-2
    9ee0:	b00c943a 	slli	r6,r22,16
    9ee4:	3084b03a 	or	r2,r6,r2
    9ee8:	00000206 	br	9ef4 <__udivdi3+0x2a0>
    9eec:	0007883a 	mov	r3,zero
    9ef0:	0005883a 	mov	r2,zero
    9ef4:	dfc00a17 	ldw	ra,40(sp)
    9ef8:	df000917 	ldw	fp,36(sp)
    9efc:	ddc00817 	ldw	r23,32(sp)
    9f00:	dd800717 	ldw	r22,28(sp)
    9f04:	dd400617 	ldw	r21,24(sp)
    9f08:	dd000517 	ldw	r20,20(sp)
    9f0c:	dcc00417 	ldw	r19,16(sp)
    9f10:	dc800317 	ldw	r18,12(sp)
    9f14:	dc400217 	ldw	r17,8(sp)
    9f18:	dc000117 	ldw	r16,4(sp)
    9f1c:	dec00b04 	addi	sp,sp,44
    9f20:	f800283a 	ret
    9f24:	00803fc4 	movi	r2,255
    9f28:	11c5803a 	cmpltu	r2,r2,r7
    9f2c:	100490fa 	slli	r2,r2,3
    9f30:	003f9e06 	br	9dac <__alt_data_end+0xfffe9dac>
    9f34:	00803fc4 	movi	r2,255
    9f38:	1445803a 	cmpltu	r2,r2,r17
    9f3c:	100490fa 	slli	r2,r2,3
    9f40:	003fb206 	br	9e0c <__alt_data_end+0xfffe9e0c>
    9f44:	00804034 	movhi	r2,256
    9f48:	10bfffc4 	addi	r2,r2,-1
    9f4c:	11808836 	bltu	r2,r6,a170 <__udivdi3+0x51c>
    9f50:	00800404 	movi	r2,16
    9f54:	003f5606 	br	9cb0 <__alt_data_end+0xfffe9cb0>
    9f58:	30aed83a 	srl	r23,r6,r2
    9f5c:	3d4e983a 	sll	r7,r7,r21
    9f60:	80acd83a 	srl	r22,r16,r2
    9f64:	9884d83a 	srl	r2,r19,r2
    9f68:	3deeb03a 	or	r23,r7,r23
    9f6c:	b824d43a 	srli	r18,r23,16
    9f70:	8560983a 	sll	r16,r16,r21
    9f74:	b009883a 	mov	r4,r22
    9f78:	900b883a 	mov	r5,r18
    9f7c:	3568983a 	sll	r20,r6,r21
    9f80:	1420b03a 	or	r16,r2,r16
    9f84:	00005a80 	call	5a8 <__umodsi3>
    9f88:	b009883a 	mov	r4,r22
    9f8c:	900b883a 	mov	r5,r18
    9f90:	1023883a 	mov	r17,r2
    9f94:	00005440 	call	544 <__udivsi3>
    9f98:	8808943a 	slli	r4,r17,16
    9f9c:	bf3fffcc 	andi	fp,r23,65535
    9fa0:	8006d43a 	srli	r3,r16,16
    9fa4:	e0a3383a 	mul	r17,fp,r2
    9fa8:	100d883a 	mov	r6,r2
    9fac:	1906b03a 	or	r3,r3,r4
    9fb0:	1c40042e 	bgeu	r3,r17,9fc4 <__udivdi3+0x370>
    9fb4:	1dc7883a 	add	r3,r3,r23
    9fb8:	10bfffc4 	addi	r2,r2,-1
    9fbc:	1dc0752e 	bgeu	r3,r23,a194 <__udivdi3+0x540>
    9fc0:	100d883a 	mov	r6,r2
    9fc4:	1c63c83a 	sub	r17,r3,r17
    9fc8:	900b883a 	mov	r5,r18
    9fcc:	8809883a 	mov	r4,r17
    9fd0:	d9800015 	stw	r6,0(sp)
    9fd4:	00005a80 	call	5a8 <__umodsi3>
    9fd8:	102d883a 	mov	r22,r2
    9fdc:	8809883a 	mov	r4,r17
    9fe0:	900b883a 	mov	r5,r18
    9fe4:	00005440 	call	544 <__udivsi3>
    9fe8:	b02c943a 	slli	r22,r22,16
    9fec:	e089383a 	mul	r4,fp,r2
    9ff0:	843fffcc 	andi	r16,r16,65535
    9ff4:	85a0b03a 	or	r16,r16,r22
    9ff8:	d9800017 	ldw	r6,0(sp)
    9ffc:	8100042e 	bgeu	r16,r4,a010 <__udivdi3+0x3bc>
    a000:	85e1883a 	add	r16,r16,r23
    a004:	10ffffc4 	addi	r3,r2,-1
    a008:	85c05e2e 	bgeu	r16,r23,a184 <__udivdi3+0x530>
    a00c:	1805883a 	mov	r2,r3
    a010:	300c943a 	slli	r6,r6,16
    a014:	a17fffcc 	andi	r5,r20,65535
    a018:	a028d43a 	srli	r20,r20,16
    a01c:	3084b03a 	or	r2,r6,r2
    a020:	10ffffcc 	andi	r3,r2,65535
    a024:	100cd43a 	srli	r6,r2,16
    a028:	194f383a 	mul	r7,r3,r5
    a02c:	1d07383a 	mul	r3,r3,r20
    a030:	314b383a 	mul	r5,r6,r5
    a034:	3810d43a 	srli	r8,r7,16
    a038:	8121c83a 	sub	r16,r16,r4
    a03c:	1947883a 	add	r3,r3,r5
    a040:	40c7883a 	add	r3,r8,r3
    a044:	350d383a 	mul	r6,r6,r20
    a048:	1940022e 	bgeu	r3,r5,a054 <__udivdi3+0x400>
    a04c:	01000074 	movhi	r4,1
    a050:	310d883a 	add	r6,r6,r4
    a054:	1828d43a 	srli	r20,r3,16
    a058:	a18d883a 	add	r6,r20,r6
    a05c:	81803e36 	bltu	r16,r6,a158 <__udivdi3+0x504>
    a060:	81803826 	beq	r16,r6,a144 <__udivdi3+0x4f0>
    a064:	0007883a 	mov	r3,zero
    a068:	003fa206 	br	9ef4 <__alt_data_end+0xfffe9ef4>
    a06c:	88e2983a 	sll	r17,r17,r3
    a070:	80a8d83a 	srl	r20,r16,r2
    a074:	80e0983a 	sll	r16,r16,r3
    a078:	882ad43a 	srli	r21,r17,16
    a07c:	9884d83a 	srl	r2,r19,r2
    a080:	a009883a 	mov	r4,r20
    a084:	a80b883a 	mov	r5,r21
    a088:	142eb03a 	or	r23,r2,r16
    a08c:	98e4983a 	sll	r18,r19,r3
    a090:	00005a80 	call	5a8 <__umodsi3>
    a094:	a009883a 	mov	r4,r20
    a098:	a80b883a 	mov	r5,r21
    a09c:	1021883a 	mov	r16,r2
    a0a0:	00005440 	call	544 <__udivsi3>
    a0a4:	1039883a 	mov	fp,r2
    a0a8:	8d3fffcc 	andi	r20,r17,65535
    a0ac:	8020943a 	slli	r16,r16,16
    a0b0:	b804d43a 	srli	r2,r23,16
    a0b4:	a72d383a 	mul	r22,r20,fp
    a0b8:	1404b03a 	or	r2,r2,r16
    a0bc:	1580062e 	bgeu	r2,r22,a0d8 <__udivdi3+0x484>
    a0c0:	1445883a 	add	r2,r2,r17
    a0c4:	e0ffffc4 	addi	r3,fp,-1
    a0c8:	14403836 	bltu	r2,r17,a1ac <__udivdi3+0x558>
    a0cc:	1580372e 	bgeu	r2,r22,a1ac <__udivdi3+0x558>
    a0d0:	e73fff84 	addi	fp,fp,-2
    a0d4:	1445883a 	add	r2,r2,r17
    a0d8:	15adc83a 	sub	r22,r2,r22
    a0dc:	a80b883a 	mov	r5,r21
    a0e0:	b009883a 	mov	r4,r22
    a0e4:	00005a80 	call	5a8 <__umodsi3>
    a0e8:	1027883a 	mov	r19,r2
    a0ec:	b009883a 	mov	r4,r22
    a0f0:	a80b883a 	mov	r5,r21
    a0f4:	00005440 	call	544 <__udivsi3>
    a0f8:	9826943a 	slli	r19,r19,16
    a0fc:	a0a1383a 	mul	r16,r20,r2
    a100:	b93fffcc 	andi	r4,r23,65535
    a104:	24c8b03a 	or	r4,r4,r19
    a108:	2400062e 	bgeu	r4,r16,a124 <__udivdi3+0x4d0>
    a10c:	2449883a 	add	r4,r4,r17
    a110:	10ffffc4 	addi	r3,r2,-1
    a114:	24402336 	bltu	r4,r17,a1a4 <__udivdi3+0x550>
    a118:	2400222e 	bgeu	r4,r16,a1a4 <__udivdi3+0x550>
    a11c:	10bfff84 	addi	r2,r2,-2
    a120:	2449883a 	add	r4,r4,r17
    a124:	e038943a 	slli	fp,fp,16
    a128:	2421c83a 	sub	r16,r4,r16
    a12c:	e086b03a 	or	r3,fp,r2
    a130:	003f4306 	br	9e40 <__alt_data_end+0xfffe9e40>
    a134:	2005883a 	mov	r2,r4
    a138:	003f6906 	br	9ee0 <__alt_data_end+0xfffe9ee0>
    a13c:	1805883a 	mov	r2,r3
    a140:	003f0f06 	br	9d80 <__alt_data_end+0xfffe9d80>
    a144:	1806943a 	slli	r3,r3,16
    a148:	9d66983a 	sll	r19,r19,r21
    a14c:	39ffffcc 	andi	r7,r7,65535
    a150:	19c7883a 	add	r3,r3,r7
    a154:	98ffc32e 	bgeu	r19,r3,a064 <__alt_data_end+0xfffea064>
    a158:	10bfffc4 	addi	r2,r2,-1
    a15c:	003fc106 	br	a064 <__alt_data_end+0xfffea064>
    a160:	00800604 	movi	r2,24
    a164:	003f1106 	br	9dac <__alt_data_end+0xfffe9dac>
    a168:	00800604 	movi	r2,24
    a16c:	003f2706 	br	9e0c <__alt_data_end+0xfffe9e0c>
    a170:	00800604 	movi	r2,24
    a174:	003ece06 	br	9cb0 <__alt_data_end+0xfffe9cb0>
    a178:	0007883a 	mov	r3,zero
    a17c:	00800044 	movi	r2,1
    a180:	003f5c06 	br	9ef4 <__alt_data_end+0xfffe9ef4>
    a184:	813fa12e 	bgeu	r16,r4,a00c <__alt_data_end+0xfffea00c>
    a188:	10bfff84 	addi	r2,r2,-2
    a18c:	85e1883a 	add	r16,r16,r23
    a190:	003f9f06 	br	a010 <__alt_data_end+0xfffea010>
    a194:	1c7f8a2e 	bgeu	r3,r17,9fc0 <__alt_data_end+0xfffe9fc0>
    a198:	31bfff84 	addi	r6,r6,-2
    a19c:	1dc7883a 	add	r3,r3,r23
    a1a0:	003f8806 	br	9fc4 <__alt_data_end+0xfffe9fc4>
    a1a4:	1805883a 	mov	r2,r3
    a1a8:	003fde06 	br	a124 <__alt_data_end+0xfffea124>
    a1ac:	1839883a 	mov	fp,r3
    a1b0:	003fc906 	br	a0d8 <__alt_data_end+0xfffea0d8>
    a1b4:	b5bfff84 	addi	r22,r22,-2
    a1b8:	2449883a 	add	r4,r4,r17
    a1bc:	003f3406 	br	9e90 <__alt_data_end+0xfffe9e90>
    a1c0:	b5bfff84 	addi	r22,r22,-2
    a1c4:	1445883a 	add	r2,r2,r17
    a1c8:	003edb06 	br	9d38 <__alt_data_end+0xfffe9d38>

0000a1cc <__umoddi3>:
    a1cc:	defff404 	addi	sp,sp,-48
    a1d0:	df000a15 	stw	fp,40(sp)
    a1d4:	dc400315 	stw	r17,12(sp)
    a1d8:	dc000215 	stw	r16,8(sp)
    a1dc:	dfc00b15 	stw	ra,44(sp)
    a1e0:	ddc00915 	stw	r23,36(sp)
    a1e4:	dd800815 	stw	r22,32(sp)
    a1e8:	dd400715 	stw	r21,28(sp)
    a1ec:	dd000615 	stw	r20,24(sp)
    a1f0:	dcc00515 	stw	r19,20(sp)
    a1f4:	dc800415 	stw	r18,16(sp)
    a1f8:	2021883a 	mov	r16,r4
    a1fc:	2823883a 	mov	r17,r5
    a200:	2839883a 	mov	fp,r5
    a204:	38003c1e 	bne	r7,zero,a2f8 <__umoddi3+0x12c>
    a208:	3027883a 	mov	r19,r6
    a20c:	2029883a 	mov	r20,r4
    a210:	2980512e 	bgeu	r5,r6,a358 <__umoddi3+0x18c>
    a214:	00bfffd4 	movui	r2,65535
    a218:	11809a36 	bltu	r2,r6,a484 <__umoddi3+0x2b8>
    a21c:	01003fc4 	movi	r4,255
    a220:	2189803a 	cmpltu	r4,r4,r6
    a224:	200890fa 	slli	r4,r4,3
    a228:	3104d83a 	srl	r2,r6,r4
    a22c:	00c00074 	movhi	r3,1
    a230:	18fdb004 	addi	r3,r3,-2368
    a234:	1885883a 	add	r2,r3,r2
    a238:	10c00003 	ldbu	r3,0(r2)
    a23c:	00800804 	movi	r2,32
    a240:	1909883a 	add	r4,r3,r4
    a244:	1125c83a 	sub	r18,r2,r4
    a248:	90000526 	beq	r18,zero,a260 <__umoddi3+0x94>
    a24c:	8ca2983a 	sll	r17,r17,r18
    a250:	8108d83a 	srl	r4,r16,r4
    a254:	34a6983a 	sll	r19,r6,r18
    a258:	84a8983a 	sll	r20,r16,r18
    a25c:	2478b03a 	or	fp,r4,r17
    a260:	982ed43a 	srli	r23,r19,16
    a264:	e009883a 	mov	r4,fp
    a268:	9dbfffcc 	andi	r22,r19,65535
    a26c:	b80b883a 	mov	r5,r23
    a270:	00005a80 	call	5a8 <__umodsi3>
    a274:	e009883a 	mov	r4,fp
    a278:	b80b883a 	mov	r5,r23
    a27c:	102b883a 	mov	r21,r2
    a280:	00005440 	call	544 <__udivsi3>
    a284:	a806943a 	slli	r3,r21,16
    a288:	a008d43a 	srli	r4,r20,16
    a28c:	b085383a 	mul	r2,r22,r2
    a290:	20c8b03a 	or	r4,r4,r3
    a294:	2080032e 	bgeu	r4,r2,a2a4 <__umoddi3+0xd8>
    a298:	24c9883a 	add	r4,r4,r19
    a29c:	24c00136 	bltu	r4,r19,a2a4 <__umoddi3+0xd8>
    a2a0:	20811036 	bltu	r4,r2,a6e4 <__umoddi3+0x518>
    a2a4:	20abc83a 	sub	r21,r4,r2
    a2a8:	b80b883a 	mov	r5,r23
    a2ac:	a809883a 	mov	r4,r21
    a2b0:	00005a80 	call	5a8 <__umodsi3>
    a2b4:	1023883a 	mov	r17,r2
    a2b8:	b80b883a 	mov	r5,r23
    a2bc:	a809883a 	mov	r4,r21
    a2c0:	00005440 	call	544 <__udivsi3>
    a2c4:	8822943a 	slli	r17,r17,16
    a2c8:	b085383a 	mul	r2,r22,r2
    a2cc:	a0ffffcc 	andi	r3,r20,65535
    a2d0:	1c46b03a 	or	r3,r3,r17
    a2d4:	1880042e 	bgeu	r3,r2,a2e8 <__umoddi3+0x11c>
    a2d8:	1cc7883a 	add	r3,r3,r19
    a2dc:	1cc00236 	bltu	r3,r19,a2e8 <__umoddi3+0x11c>
    a2e0:	1880012e 	bgeu	r3,r2,a2e8 <__umoddi3+0x11c>
    a2e4:	1cc7883a 	add	r3,r3,r19
    a2e8:	1885c83a 	sub	r2,r3,r2
    a2ec:	1484d83a 	srl	r2,r2,r18
    a2f0:	0007883a 	mov	r3,zero
    a2f4:	00004f06 	br	a434 <__umoddi3+0x268>
    a2f8:	29c04c36 	bltu	r5,r7,a42c <__umoddi3+0x260>
    a2fc:	00bfffd4 	movui	r2,65535
    a300:	11c0582e 	bgeu	r2,r7,a464 <__umoddi3+0x298>
    a304:	00804034 	movhi	r2,256
    a308:	10bfffc4 	addi	r2,r2,-1
    a30c:	11c0e736 	bltu	r2,r7,a6ac <__umoddi3+0x4e0>
    a310:	01000404 	movi	r4,16
    a314:	3904d83a 	srl	r2,r7,r4
    a318:	00c00074 	movhi	r3,1
    a31c:	18fdb004 	addi	r3,r3,-2368
    a320:	1885883a 	add	r2,r3,r2
    a324:	14c00003 	ldbu	r19,0(r2)
    a328:	00c00804 	movi	r3,32
    a32c:	9927883a 	add	r19,r19,r4
    a330:	1ce9c83a 	sub	r20,r3,r19
    a334:	a000581e 	bne	r20,zero,a498 <__umoddi3+0x2cc>
    a338:	3c400136 	bltu	r7,r17,a340 <__umoddi3+0x174>
    a33c:	8180eb36 	bltu	r16,r6,a6ec <__umoddi3+0x520>
    a340:	8185c83a 	sub	r2,r16,r6
    a344:	89e3c83a 	sub	r17,r17,r7
    a348:	8089803a 	cmpltu	r4,r16,r2
    a34c:	8939c83a 	sub	fp,r17,r4
    a350:	e007883a 	mov	r3,fp
    a354:	00003706 	br	a434 <__umoddi3+0x268>
    a358:	3000041e 	bne	r6,zero,a36c <__umoddi3+0x1a0>
    a35c:	000b883a 	mov	r5,zero
    a360:	01000044 	movi	r4,1
    a364:	00005440 	call	544 <__udivsi3>
    a368:	1027883a 	mov	r19,r2
    a36c:	00bfffd4 	movui	r2,65535
    a370:	14c0402e 	bgeu	r2,r19,a474 <__umoddi3+0x2a8>
    a374:	00804034 	movhi	r2,256
    a378:	10bfffc4 	addi	r2,r2,-1
    a37c:	14c0cd36 	bltu	r2,r19,a6b4 <__umoddi3+0x4e8>
    a380:	00800404 	movi	r2,16
    a384:	9886d83a 	srl	r3,r19,r2
    a388:	01000074 	movhi	r4,1
    a38c:	213db004 	addi	r4,r4,-2368
    a390:	20c7883a 	add	r3,r4,r3
    a394:	18c00003 	ldbu	r3,0(r3)
    a398:	1887883a 	add	r3,r3,r2
    a39c:	00800804 	movi	r2,32
    a3a0:	10e5c83a 	sub	r18,r2,r3
    a3a4:	9000901e 	bne	r18,zero,a5e8 <__umoddi3+0x41c>
    a3a8:	982cd43a 	srli	r22,r19,16
    a3ac:	8ce3c83a 	sub	r17,r17,r19
    a3b0:	9d7fffcc 	andi	r21,r19,65535
    a3b4:	b00b883a 	mov	r5,r22
    a3b8:	8809883a 	mov	r4,r17
    a3bc:	00005a80 	call	5a8 <__umodsi3>
    a3c0:	8809883a 	mov	r4,r17
    a3c4:	b00b883a 	mov	r5,r22
    a3c8:	1021883a 	mov	r16,r2
    a3cc:	00005440 	call	544 <__udivsi3>
    a3d0:	8006943a 	slli	r3,r16,16
    a3d4:	a008d43a 	srli	r4,r20,16
    a3d8:	1545383a 	mul	r2,r2,r21
    a3dc:	20c8b03a 	or	r4,r4,r3
    a3e0:	2080042e 	bgeu	r4,r2,a3f4 <__umoddi3+0x228>
    a3e4:	24c9883a 	add	r4,r4,r19
    a3e8:	24c00236 	bltu	r4,r19,a3f4 <__umoddi3+0x228>
    a3ec:	2080012e 	bgeu	r4,r2,a3f4 <__umoddi3+0x228>
    a3f0:	24c9883a 	add	r4,r4,r19
    a3f4:	20a1c83a 	sub	r16,r4,r2
    a3f8:	b00b883a 	mov	r5,r22
    a3fc:	8009883a 	mov	r4,r16
    a400:	00005a80 	call	5a8 <__umodsi3>
    a404:	1023883a 	mov	r17,r2
    a408:	b00b883a 	mov	r5,r22
    a40c:	8009883a 	mov	r4,r16
    a410:	00005440 	call	544 <__udivsi3>
    a414:	8822943a 	slli	r17,r17,16
    a418:	1545383a 	mul	r2,r2,r21
    a41c:	a53fffcc 	andi	r20,r20,65535
    a420:	a446b03a 	or	r3,r20,r17
    a424:	18bfb02e 	bgeu	r3,r2,a2e8 <__alt_data_end+0xfffea2e8>
    a428:	003fab06 	br	a2d8 <__alt_data_end+0xfffea2d8>
    a42c:	2005883a 	mov	r2,r4
    a430:	2807883a 	mov	r3,r5
    a434:	dfc00b17 	ldw	ra,44(sp)
    a438:	df000a17 	ldw	fp,40(sp)
    a43c:	ddc00917 	ldw	r23,36(sp)
    a440:	dd800817 	ldw	r22,32(sp)
    a444:	dd400717 	ldw	r21,28(sp)
    a448:	dd000617 	ldw	r20,24(sp)
    a44c:	dcc00517 	ldw	r19,20(sp)
    a450:	dc800417 	ldw	r18,16(sp)
    a454:	dc400317 	ldw	r17,12(sp)
    a458:	dc000217 	ldw	r16,8(sp)
    a45c:	dec00c04 	addi	sp,sp,48
    a460:	f800283a 	ret
    a464:	04c03fc4 	movi	r19,255
    a468:	99c9803a 	cmpltu	r4,r19,r7
    a46c:	200890fa 	slli	r4,r4,3
    a470:	003fa806 	br	a314 <__alt_data_end+0xfffea314>
    a474:	00803fc4 	movi	r2,255
    a478:	14c5803a 	cmpltu	r2,r2,r19
    a47c:	100490fa 	slli	r2,r2,3
    a480:	003fc006 	br	a384 <__alt_data_end+0xfffea384>
    a484:	00804034 	movhi	r2,256
    a488:	10bfffc4 	addi	r2,r2,-1
    a48c:	11808b36 	bltu	r2,r6,a6bc <__umoddi3+0x4f0>
    a490:	01000404 	movi	r4,16
    a494:	003f6406 	br	a228 <__alt_data_end+0xfffea228>
    a498:	34c4d83a 	srl	r2,r6,r19
    a49c:	3d0e983a 	sll	r7,r7,r20
    a4a0:	8cf8d83a 	srl	fp,r17,r19
    a4a4:	8d10983a 	sll	r8,r17,r20
    a4a8:	38aab03a 	or	r21,r7,r2
    a4ac:	a82cd43a 	srli	r22,r21,16
    a4b0:	84e2d83a 	srl	r17,r16,r19
    a4b4:	e009883a 	mov	r4,fp
    a4b8:	b00b883a 	mov	r5,r22
    a4bc:	8a22b03a 	or	r17,r17,r8
    a4c0:	3524983a 	sll	r18,r6,r20
    a4c4:	00005a80 	call	5a8 <__umodsi3>
    a4c8:	e009883a 	mov	r4,fp
    a4cc:	b00b883a 	mov	r5,r22
    a4d0:	102f883a 	mov	r23,r2
    a4d4:	00005440 	call	544 <__udivsi3>
    a4d8:	100d883a 	mov	r6,r2
    a4dc:	b808943a 	slli	r4,r23,16
    a4e0:	aa3fffcc 	andi	r8,r21,65535
    a4e4:	8804d43a 	srli	r2,r17,16
    a4e8:	41af383a 	mul	r23,r8,r6
    a4ec:	8520983a 	sll	r16,r16,r20
    a4f0:	1104b03a 	or	r2,r2,r4
    a4f4:	15c0042e 	bgeu	r2,r23,a508 <__umoddi3+0x33c>
    a4f8:	1545883a 	add	r2,r2,r21
    a4fc:	30ffffc4 	addi	r3,r6,-1
    a500:	1540742e 	bgeu	r2,r21,a6d4 <__umoddi3+0x508>
    a504:	180d883a 	mov	r6,r3
    a508:	15efc83a 	sub	r23,r2,r23
    a50c:	b00b883a 	mov	r5,r22
    a510:	b809883a 	mov	r4,r23
    a514:	d9800115 	stw	r6,4(sp)
    a518:	da000015 	stw	r8,0(sp)
    a51c:	00005a80 	call	5a8 <__umodsi3>
    a520:	b00b883a 	mov	r5,r22
    a524:	b809883a 	mov	r4,r23
    a528:	1039883a 	mov	fp,r2
    a52c:	00005440 	call	544 <__udivsi3>
    a530:	da000017 	ldw	r8,0(sp)
    a534:	e038943a 	slli	fp,fp,16
    a538:	100b883a 	mov	r5,r2
    a53c:	4089383a 	mul	r4,r8,r2
    a540:	8a3fffcc 	andi	r8,r17,65535
    a544:	4710b03a 	or	r8,r8,fp
    a548:	d9800117 	ldw	r6,4(sp)
    a54c:	4100042e 	bgeu	r8,r4,a560 <__umoddi3+0x394>
    a550:	4551883a 	add	r8,r8,r21
    a554:	10bfffc4 	addi	r2,r2,-1
    a558:	45405a2e 	bgeu	r8,r21,a6c4 <__umoddi3+0x4f8>
    a55c:	100b883a 	mov	r5,r2
    a560:	300c943a 	slli	r6,r6,16
    a564:	91ffffcc 	andi	r7,r18,65535
    a568:	9004d43a 	srli	r2,r18,16
    a56c:	314cb03a 	or	r6,r6,r5
    a570:	317fffcc 	andi	r5,r6,65535
    a574:	300cd43a 	srli	r6,r6,16
    a578:	29d3383a 	mul	r9,r5,r7
    a57c:	288b383a 	mul	r5,r5,r2
    a580:	31cf383a 	mul	r7,r6,r7
    a584:	4806d43a 	srli	r3,r9,16
    a588:	4111c83a 	sub	r8,r8,r4
    a58c:	29cb883a 	add	r5,r5,r7
    a590:	194b883a 	add	r5,r3,r5
    a594:	3085383a 	mul	r2,r6,r2
    a598:	29c0022e 	bgeu	r5,r7,a5a4 <__umoddi3+0x3d8>
    a59c:	00c00074 	movhi	r3,1
    a5a0:	10c5883a 	add	r2,r2,r3
    a5a4:	2808d43a 	srli	r4,r5,16
    a5a8:	280a943a 	slli	r5,r5,16
    a5ac:	4a7fffcc 	andi	r9,r9,65535
    a5b0:	2085883a 	add	r2,r4,r2
    a5b4:	2a4b883a 	add	r5,r5,r9
    a5b8:	40803636 	bltu	r8,r2,a694 <__umoddi3+0x4c8>
    a5bc:	40804d26 	beq	r8,r2,a6f4 <__umoddi3+0x528>
    a5c0:	4089c83a 	sub	r4,r8,r2
    a5c4:	280f883a 	mov	r7,r5
    a5c8:	81cfc83a 	sub	r7,r16,r7
    a5cc:	81c7803a 	cmpltu	r3,r16,r7
    a5d0:	20c7c83a 	sub	r3,r4,r3
    a5d4:	1cc4983a 	sll	r2,r3,r19
    a5d8:	3d0ed83a 	srl	r7,r7,r20
    a5dc:	1d06d83a 	srl	r3,r3,r20
    a5e0:	11c4b03a 	or	r2,r2,r7
    a5e4:	003f9306 	br	a434 <__alt_data_end+0xfffea434>
    a5e8:	9ca6983a 	sll	r19,r19,r18
    a5ec:	88e8d83a 	srl	r20,r17,r3
    a5f0:	80c4d83a 	srl	r2,r16,r3
    a5f4:	982cd43a 	srli	r22,r19,16
    a5f8:	8ca2983a 	sll	r17,r17,r18
    a5fc:	a009883a 	mov	r4,r20
    a600:	b00b883a 	mov	r5,r22
    a604:	1478b03a 	or	fp,r2,r17
    a608:	00005a80 	call	5a8 <__umodsi3>
    a60c:	a009883a 	mov	r4,r20
    a610:	b00b883a 	mov	r5,r22
    a614:	1023883a 	mov	r17,r2
    a618:	00005440 	call	544 <__udivsi3>
    a61c:	9d7fffcc 	andi	r21,r19,65535
    a620:	880a943a 	slli	r5,r17,16
    a624:	e008d43a 	srli	r4,fp,16
    a628:	a885383a 	mul	r2,r21,r2
    a62c:	84a8983a 	sll	r20,r16,r18
    a630:	2148b03a 	or	r4,r4,r5
    a634:	2080042e 	bgeu	r4,r2,a648 <__umoddi3+0x47c>
    a638:	24c9883a 	add	r4,r4,r19
    a63c:	24c00236 	bltu	r4,r19,a648 <__umoddi3+0x47c>
    a640:	2080012e 	bgeu	r4,r2,a648 <__umoddi3+0x47c>
    a644:	24c9883a 	add	r4,r4,r19
    a648:	20a3c83a 	sub	r17,r4,r2
    a64c:	b00b883a 	mov	r5,r22
    a650:	8809883a 	mov	r4,r17
    a654:	00005a80 	call	5a8 <__umodsi3>
    a658:	102f883a 	mov	r23,r2
    a65c:	8809883a 	mov	r4,r17
    a660:	b00b883a 	mov	r5,r22
    a664:	00005440 	call	544 <__udivsi3>
    a668:	b82e943a 	slli	r23,r23,16
    a66c:	a885383a 	mul	r2,r21,r2
    a670:	e13fffcc 	andi	r4,fp,65535
    a674:	25c8b03a 	or	r4,r4,r23
    a678:	2080042e 	bgeu	r4,r2,a68c <__umoddi3+0x4c0>
    a67c:	24c9883a 	add	r4,r4,r19
    a680:	24c00236 	bltu	r4,r19,a68c <__umoddi3+0x4c0>
    a684:	2080012e 	bgeu	r4,r2,a68c <__umoddi3+0x4c0>
    a688:	24c9883a 	add	r4,r4,r19
    a68c:	20a3c83a 	sub	r17,r4,r2
    a690:	003f4806 	br	a3b4 <__alt_data_end+0xfffea3b4>
    a694:	2c8fc83a 	sub	r7,r5,r18
    a698:	1545c83a 	sub	r2,r2,r21
    a69c:	29cb803a 	cmpltu	r5,r5,r7
    a6a0:	1145c83a 	sub	r2,r2,r5
    a6a4:	4089c83a 	sub	r4,r8,r2
    a6a8:	003fc706 	br	a5c8 <__alt_data_end+0xfffea5c8>
    a6ac:	01000604 	movi	r4,24
    a6b0:	003f1806 	br	a314 <__alt_data_end+0xfffea314>
    a6b4:	00800604 	movi	r2,24
    a6b8:	003f3206 	br	a384 <__alt_data_end+0xfffea384>
    a6bc:	01000604 	movi	r4,24
    a6c0:	003ed906 	br	a228 <__alt_data_end+0xfffea228>
    a6c4:	413fa52e 	bgeu	r8,r4,a55c <__alt_data_end+0xfffea55c>
    a6c8:	297fff84 	addi	r5,r5,-2
    a6cc:	4551883a 	add	r8,r8,r21
    a6d0:	003fa306 	br	a560 <__alt_data_end+0xfffea560>
    a6d4:	15ff8b2e 	bgeu	r2,r23,a504 <__alt_data_end+0xfffea504>
    a6d8:	31bfff84 	addi	r6,r6,-2
    a6dc:	1545883a 	add	r2,r2,r21
    a6e0:	003f8906 	br	a508 <__alt_data_end+0xfffea508>
    a6e4:	24c9883a 	add	r4,r4,r19
    a6e8:	003eee06 	br	a2a4 <__alt_data_end+0xfffea2a4>
    a6ec:	8005883a 	mov	r2,r16
    a6f0:	003f1706 	br	a350 <__alt_data_end+0xfffea350>
    a6f4:	817fe736 	bltu	r16,r5,a694 <__alt_data_end+0xfffea694>
    a6f8:	280f883a 	mov	r7,r5
    a6fc:	0009883a 	mov	r4,zero
    a700:	003fb106 	br	a5c8 <__alt_data_end+0xfffea5c8>

0000a704 <__adddf3>:
    a704:	02c00434 	movhi	r11,16
    a708:	5affffc4 	addi	r11,r11,-1
    a70c:	2806d7fa 	srli	r3,r5,31
    a710:	2ad4703a 	and	r10,r5,r11
    a714:	3ad2703a 	and	r9,r7,r11
    a718:	3804d53a 	srli	r2,r7,20
    a71c:	3018d77a 	srli	r12,r6,29
    a720:	280ad53a 	srli	r5,r5,20
    a724:	501490fa 	slli	r10,r10,3
    a728:	2010d77a 	srli	r8,r4,29
    a72c:	481290fa 	slli	r9,r9,3
    a730:	380ed7fa 	srli	r7,r7,31
    a734:	defffb04 	addi	sp,sp,-20
    a738:	dc800215 	stw	r18,8(sp)
    a73c:	dc400115 	stw	r17,4(sp)
    a740:	dc000015 	stw	r16,0(sp)
    a744:	dfc00415 	stw	ra,16(sp)
    a748:	dcc00315 	stw	r19,12(sp)
    a74c:	1c803fcc 	andi	r18,r3,255
    a750:	2c01ffcc 	andi	r16,r5,2047
    a754:	5210b03a 	or	r8,r10,r8
    a758:	202290fa 	slli	r17,r4,3
    a75c:	1081ffcc 	andi	r2,r2,2047
    a760:	4b12b03a 	or	r9,r9,r12
    a764:	300c90fa 	slli	r6,r6,3
    a768:	91c07526 	beq	r18,r7,a940 <__adddf3+0x23c>
    a76c:	8087c83a 	sub	r3,r16,r2
    a770:	00c0ab0e 	bge	zero,r3,aa20 <__adddf3+0x31c>
    a774:	10002a1e 	bne	r2,zero,a820 <__adddf3+0x11c>
    a778:	4984b03a 	or	r2,r9,r6
    a77c:	1000961e 	bne	r2,zero,a9d8 <__adddf3+0x2d4>
    a780:	888001cc 	andi	r2,r17,7
    a784:	10000726 	beq	r2,zero,a7a4 <__adddf3+0xa0>
    a788:	888003cc 	andi	r2,r17,15
    a78c:	00c00104 	movi	r3,4
    a790:	10c00426 	beq	r2,r3,a7a4 <__adddf3+0xa0>
    a794:	88c7883a 	add	r3,r17,r3
    a798:	1c63803a 	cmpltu	r17,r3,r17
    a79c:	4451883a 	add	r8,r8,r17
    a7a0:	1823883a 	mov	r17,r3
    a7a4:	4080202c 	andhi	r2,r8,128
    a7a8:	10005926 	beq	r2,zero,a910 <__adddf3+0x20c>
    a7ac:	84000044 	addi	r16,r16,1
    a7b0:	0081ffc4 	movi	r2,2047
    a7b4:	8080ba26 	beq	r16,r2,aaa0 <__adddf3+0x39c>
    a7b8:	00bfe034 	movhi	r2,65408
    a7bc:	10bfffc4 	addi	r2,r2,-1
    a7c0:	4090703a 	and	r8,r8,r2
    a7c4:	4004977a 	slli	r2,r8,29
    a7c8:	4010927a 	slli	r8,r8,9
    a7cc:	8822d0fa 	srli	r17,r17,3
    a7d0:	8401ffcc 	andi	r16,r16,2047
    a7d4:	4010d33a 	srli	r8,r8,12
    a7d8:	9007883a 	mov	r3,r18
    a7dc:	1444b03a 	or	r2,r2,r17
    a7e0:	8401ffcc 	andi	r16,r16,2047
    a7e4:	8020953a 	slli	r16,r16,20
    a7e8:	18c03fcc 	andi	r3,r3,255
    a7ec:	01000434 	movhi	r4,16
    a7f0:	213fffc4 	addi	r4,r4,-1
    a7f4:	180697fa 	slli	r3,r3,31
    a7f8:	4110703a 	and	r8,r8,r4
    a7fc:	4410b03a 	or	r8,r8,r16
    a800:	40c6b03a 	or	r3,r8,r3
    a804:	dfc00417 	ldw	ra,16(sp)
    a808:	dcc00317 	ldw	r19,12(sp)
    a80c:	dc800217 	ldw	r18,8(sp)
    a810:	dc400117 	ldw	r17,4(sp)
    a814:	dc000017 	ldw	r16,0(sp)
    a818:	dec00504 	addi	sp,sp,20
    a81c:	f800283a 	ret
    a820:	0081ffc4 	movi	r2,2047
    a824:	80bfd626 	beq	r16,r2,a780 <__alt_data_end+0xfffea780>
    a828:	4a402034 	orhi	r9,r9,128
    a82c:	00800e04 	movi	r2,56
    a830:	10c09f16 	blt	r2,r3,aab0 <__adddf3+0x3ac>
    a834:	008007c4 	movi	r2,31
    a838:	10c0c216 	blt	r2,r3,ab44 <__adddf3+0x440>
    a83c:	00800804 	movi	r2,32
    a840:	10c5c83a 	sub	r2,r2,r3
    a844:	488a983a 	sll	r5,r9,r2
    a848:	30c8d83a 	srl	r4,r6,r3
    a84c:	3084983a 	sll	r2,r6,r2
    a850:	48c6d83a 	srl	r3,r9,r3
    a854:	290cb03a 	or	r6,r5,r4
    a858:	1004c03a 	cmpne	r2,r2,zero
    a85c:	308cb03a 	or	r6,r6,r2
    a860:	898dc83a 	sub	r6,r17,r6
    a864:	89a3803a 	cmpltu	r17,r17,r6
    a868:	40d1c83a 	sub	r8,r8,r3
    a86c:	4451c83a 	sub	r8,r8,r17
    a870:	3023883a 	mov	r17,r6
    a874:	4080202c 	andhi	r2,r8,128
    a878:	10002326 	beq	r2,zero,a908 <__adddf3+0x204>
    a87c:	04c02034 	movhi	r19,128
    a880:	9cffffc4 	addi	r19,r19,-1
    a884:	44e6703a 	and	r19,r8,r19
    a888:	98007626 	beq	r19,zero,aa64 <__adddf3+0x360>
    a88c:	9809883a 	mov	r4,r19
    a890:	000cd080 	call	cd08 <__clzsi2>
    a894:	10fffe04 	addi	r3,r2,-8
    a898:	010007c4 	movi	r4,31
    a89c:	20c07716 	blt	r4,r3,aa7c <__adddf3+0x378>
    a8a0:	00800804 	movi	r2,32
    a8a4:	10c5c83a 	sub	r2,r2,r3
    a8a8:	8884d83a 	srl	r2,r17,r2
    a8ac:	98d0983a 	sll	r8,r19,r3
    a8b0:	88e2983a 	sll	r17,r17,r3
    a8b4:	1204b03a 	or	r2,r2,r8
    a8b8:	1c007416 	blt	r3,r16,aa8c <__adddf3+0x388>
    a8bc:	1c21c83a 	sub	r16,r3,r16
    a8c0:	82000044 	addi	r8,r16,1
    a8c4:	00c007c4 	movi	r3,31
    a8c8:	1a009116 	blt	r3,r8,ab10 <__adddf3+0x40c>
    a8cc:	00c00804 	movi	r3,32
    a8d0:	1a07c83a 	sub	r3,r3,r8
    a8d4:	8a08d83a 	srl	r4,r17,r8
    a8d8:	88e2983a 	sll	r17,r17,r3
    a8dc:	10c6983a 	sll	r3,r2,r3
    a8e0:	1210d83a 	srl	r8,r2,r8
    a8e4:	8804c03a 	cmpne	r2,r17,zero
    a8e8:	1906b03a 	or	r3,r3,r4
    a8ec:	18a2b03a 	or	r17,r3,r2
    a8f0:	0021883a 	mov	r16,zero
    a8f4:	003fa206 	br	a780 <__alt_data_end+0xfffea780>
    a8f8:	1890b03a 	or	r8,r3,r2
    a8fc:	40017d26 	beq	r8,zero,aef4 <__adddf3+0x7f0>
    a900:	1011883a 	mov	r8,r2
    a904:	1823883a 	mov	r17,r3
    a908:	888001cc 	andi	r2,r17,7
    a90c:	103f9e1e 	bne	r2,zero,a788 <__alt_data_end+0xfffea788>
    a910:	4004977a 	slli	r2,r8,29
    a914:	8822d0fa 	srli	r17,r17,3
    a918:	4010d0fa 	srli	r8,r8,3
    a91c:	9007883a 	mov	r3,r18
    a920:	1444b03a 	or	r2,r2,r17
    a924:	0101ffc4 	movi	r4,2047
    a928:	81002426 	beq	r16,r4,a9bc <__adddf3+0x2b8>
    a92c:	8120703a 	and	r16,r16,r4
    a930:	01000434 	movhi	r4,16
    a934:	213fffc4 	addi	r4,r4,-1
    a938:	4110703a 	and	r8,r8,r4
    a93c:	003fa806 	br	a7e0 <__alt_data_end+0xfffea7e0>
    a940:	8089c83a 	sub	r4,r16,r2
    a944:	01005e0e 	bge	zero,r4,aac0 <__adddf3+0x3bc>
    a948:	10002b26 	beq	r2,zero,a9f8 <__adddf3+0x2f4>
    a94c:	0081ffc4 	movi	r2,2047
    a950:	80bf8b26 	beq	r16,r2,a780 <__alt_data_end+0xfffea780>
    a954:	4a402034 	orhi	r9,r9,128
    a958:	00800e04 	movi	r2,56
    a95c:	1100a40e 	bge	r2,r4,abf0 <__adddf3+0x4ec>
    a960:	498cb03a 	or	r6,r9,r6
    a964:	300ac03a 	cmpne	r5,r6,zero
    a968:	0013883a 	mov	r9,zero
    a96c:	2c4b883a 	add	r5,r5,r17
    a970:	2c63803a 	cmpltu	r17,r5,r17
    a974:	4a11883a 	add	r8,r9,r8
    a978:	8a11883a 	add	r8,r17,r8
    a97c:	2823883a 	mov	r17,r5
    a980:	4080202c 	andhi	r2,r8,128
    a984:	103fe026 	beq	r2,zero,a908 <__alt_data_end+0xfffea908>
    a988:	84000044 	addi	r16,r16,1
    a98c:	0081ffc4 	movi	r2,2047
    a990:	8080d226 	beq	r16,r2,acdc <__adddf3+0x5d8>
    a994:	00bfe034 	movhi	r2,65408
    a998:	10bfffc4 	addi	r2,r2,-1
    a99c:	4090703a 	and	r8,r8,r2
    a9a0:	880ad07a 	srli	r5,r17,1
    a9a4:	400897fa 	slli	r4,r8,31
    a9a8:	88c0004c 	andi	r3,r17,1
    a9ac:	28e2b03a 	or	r17,r5,r3
    a9b0:	4010d07a 	srli	r8,r8,1
    a9b4:	2462b03a 	or	r17,r4,r17
    a9b8:	003f7106 	br	a780 <__alt_data_end+0xfffea780>
    a9bc:	4088b03a 	or	r4,r8,r2
    a9c0:	20014526 	beq	r4,zero,aed8 <__adddf3+0x7d4>
    a9c4:	01000434 	movhi	r4,16
    a9c8:	42000234 	orhi	r8,r8,8
    a9cc:	213fffc4 	addi	r4,r4,-1
    a9d0:	4110703a 	and	r8,r8,r4
    a9d4:	003f8206 	br	a7e0 <__alt_data_end+0xfffea7e0>
    a9d8:	18ffffc4 	addi	r3,r3,-1
    a9dc:	1800491e 	bne	r3,zero,ab04 <__adddf3+0x400>
    a9e0:	898bc83a 	sub	r5,r17,r6
    a9e4:	8963803a 	cmpltu	r17,r17,r5
    a9e8:	4251c83a 	sub	r8,r8,r9
    a9ec:	4451c83a 	sub	r8,r8,r17
    a9f0:	2823883a 	mov	r17,r5
    a9f4:	003f9f06 	br	a874 <__alt_data_end+0xfffea874>
    a9f8:	4984b03a 	or	r2,r9,r6
    a9fc:	103f6026 	beq	r2,zero,a780 <__alt_data_end+0xfffea780>
    aa00:	213fffc4 	addi	r4,r4,-1
    aa04:	2000931e 	bne	r4,zero,ac54 <__adddf3+0x550>
    aa08:	898d883a 	add	r6,r17,r6
    aa0c:	3463803a 	cmpltu	r17,r6,r17
    aa10:	4251883a 	add	r8,r8,r9
    aa14:	8a11883a 	add	r8,r17,r8
    aa18:	3023883a 	mov	r17,r6
    aa1c:	003fd806 	br	a980 <__alt_data_end+0xfffea980>
    aa20:	1800541e 	bne	r3,zero,ab74 <__adddf3+0x470>
    aa24:	80800044 	addi	r2,r16,1
    aa28:	1081ffcc 	andi	r2,r2,2047
    aa2c:	00c00044 	movi	r3,1
    aa30:	1880a00e 	bge	r3,r2,acb4 <__adddf3+0x5b0>
    aa34:	8989c83a 	sub	r4,r17,r6
    aa38:	8905803a 	cmpltu	r2,r17,r4
    aa3c:	4267c83a 	sub	r19,r8,r9
    aa40:	98a7c83a 	sub	r19,r19,r2
    aa44:	9880202c 	andhi	r2,r19,128
    aa48:	10006326 	beq	r2,zero,abd8 <__adddf3+0x4d4>
    aa4c:	3463c83a 	sub	r17,r6,r17
    aa50:	4a07c83a 	sub	r3,r9,r8
    aa54:	344d803a 	cmpltu	r6,r6,r17
    aa58:	19a7c83a 	sub	r19,r3,r6
    aa5c:	3825883a 	mov	r18,r7
    aa60:	983f8a1e 	bne	r19,zero,a88c <__alt_data_end+0xfffea88c>
    aa64:	8809883a 	mov	r4,r17
    aa68:	000cd080 	call	cd08 <__clzsi2>
    aa6c:	10800804 	addi	r2,r2,32
    aa70:	10fffe04 	addi	r3,r2,-8
    aa74:	010007c4 	movi	r4,31
    aa78:	20ff890e 	bge	r4,r3,a8a0 <__alt_data_end+0xfffea8a0>
    aa7c:	10bff604 	addi	r2,r2,-40
    aa80:	8884983a 	sll	r2,r17,r2
    aa84:	0023883a 	mov	r17,zero
    aa88:	1c3f8c0e 	bge	r3,r16,a8bc <__alt_data_end+0xfffea8bc>
    aa8c:	023fe034 	movhi	r8,65408
    aa90:	423fffc4 	addi	r8,r8,-1
    aa94:	80e1c83a 	sub	r16,r16,r3
    aa98:	1210703a 	and	r8,r2,r8
    aa9c:	003f3806 	br	a780 <__alt_data_end+0xfffea780>
    aaa0:	9007883a 	mov	r3,r18
    aaa4:	0011883a 	mov	r8,zero
    aaa8:	0005883a 	mov	r2,zero
    aaac:	003f4c06 	br	a7e0 <__alt_data_end+0xfffea7e0>
    aab0:	498cb03a 	or	r6,r9,r6
    aab4:	300cc03a 	cmpne	r6,r6,zero
    aab8:	0007883a 	mov	r3,zero
    aabc:	003f6806 	br	a860 <__alt_data_end+0xfffea860>
    aac0:	20009c1e 	bne	r4,zero,ad34 <__adddf3+0x630>
    aac4:	80800044 	addi	r2,r16,1
    aac8:	1141ffcc 	andi	r5,r2,2047
    aacc:	01000044 	movi	r4,1
    aad0:	2140670e 	bge	r4,r5,ac70 <__adddf3+0x56c>
    aad4:	0101ffc4 	movi	r4,2047
    aad8:	11007f26 	beq	r2,r4,acd8 <__adddf3+0x5d4>
    aadc:	898d883a 	add	r6,r17,r6
    aae0:	4247883a 	add	r3,r8,r9
    aae4:	3451803a 	cmpltu	r8,r6,r17
    aae8:	40d1883a 	add	r8,r8,r3
    aaec:	402297fa 	slli	r17,r8,31
    aaf0:	300cd07a 	srli	r6,r6,1
    aaf4:	4010d07a 	srli	r8,r8,1
    aaf8:	1021883a 	mov	r16,r2
    aafc:	89a2b03a 	or	r17,r17,r6
    ab00:	003f1f06 	br	a780 <__alt_data_end+0xfffea780>
    ab04:	0081ffc4 	movi	r2,2047
    ab08:	80bf481e 	bne	r16,r2,a82c <__alt_data_end+0xfffea82c>
    ab0c:	003f1c06 	br	a780 <__alt_data_end+0xfffea780>
    ab10:	843ff844 	addi	r16,r16,-31
    ab14:	01000804 	movi	r4,32
    ab18:	1406d83a 	srl	r3,r2,r16
    ab1c:	41005026 	beq	r8,r4,ac60 <__adddf3+0x55c>
    ab20:	01001004 	movi	r4,64
    ab24:	2211c83a 	sub	r8,r4,r8
    ab28:	1204983a 	sll	r2,r2,r8
    ab2c:	88a2b03a 	or	r17,r17,r2
    ab30:	8822c03a 	cmpne	r17,r17,zero
    ab34:	1c62b03a 	or	r17,r3,r17
    ab38:	0011883a 	mov	r8,zero
    ab3c:	0021883a 	mov	r16,zero
    ab40:	003f7106 	br	a908 <__alt_data_end+0xfffea908>
    ab44:	193ff804 	addi	r4,r3,-32
    ab48:	00800804 	movi	r2,32
    ab4c:	4908d83a 	srl	r4,r9,r4
    ab50:	18804526 	beq	r3,r2,ac68 <__adddf3+0x564>
    ab54:	00801004 	movi	r2,64
    ab58:	10c5c83a 	sub	r2,r2,r3
    ab5c:	4886983a 	sll	r3,r9,r2
    ab60:	198cb03a 	or	r6,r3,r6
    ab64:	300cc03a 	cmpne	r6,r6,zero
    ab68:	218cb03a 	or	r6,r4,r6
    ab6c:	0007883a 	mov	r3,zero
    ab70:	003f3b06 	br	a860 <__alt_data_end+0xfffea860>
    ab74:	80002a26 	beq	r16,zero,ac20 <__adddf3+0x51c>
    ab78:	0101ffc4 	movi	r4,2047
    ab7c:	11006826 	beq	r2,r4,ad20 <__adddf3+0x61c>
    ab80:	00c7c83a 	sub	r3,zero,r3
    ab84:	42002034 	orhi	r8,r8,128
    ab88:	01000e04 	movi	r4,56
    ab8c:	20c07c16 	blt	r4,r3,ad80 <__adddf3+0x67c>
    ab90:	010007c4 	movi	r4,31
    ab94:	20c0da16 	blt	r4,r3,af00 <__adddf3+0x7fc>
    ab98:	01000804 	movi	r4,32
    ab9c:	20c9c83a 	sub	r4,r4,r3
    aba0:	4114983a 	sll	r10,r8,r4
    aba4:	88cad83a 	srl	r5,r17,r3
    aba8:	8908983a 	sll	r4,r17,r4
    abac:	40c6d83a 	srl	r3,r8,r3
    abb0:	5162b03a 	or	r17,r10,r5
    abb4:	2008c03a 	cmpne	r4,r4,zero
    abb8:	8922b03a 	or	r17,r17,r4
    abbc:	3463c83a 	sub	r17,r6,r17
    abc0:	48c7c83a 	sub	r3,r9,r3
    abc4:	344d803a 	cmpltu	r6,r6,r17
    abc8:	1991c83a 	sub	r8,r3,r6
    abcc:	1021883a 	mov	r16,r2
    abd0:	3825883a 	mov	r18,r7
    abd4:	003f2706 	br	a874 <__alt_data_end+0xfffea874>
    abd8:	24d0b03a 	or	r8,r4,r19
    abdc:	40001b1e 	bne	r8,zero,ac4c <__adddf3+0x548>
    abe0:	0005883a 	mov	r2,zero
    abe4:	0007883a 	mov	r3,zero
    abe8:	0021883a 	mov	r16,zero
    abec:	003f4d06 	br	a924 <__alt_data_end+0xfffea924>
    abf0:	008007c4 	movi	r2,31
    abf4:	11003c16 	blt	r2,r4,ace8 <__adddf3+0x5e4>
    abf8:	00800804 	movi	r2,32
    abfc:	1105c83a 	sub	r2,r2,r4
    ac00:	488e983a 	sll	r7,r9,r2
    ac04:	310ad83a 	srl	r5,r6,r4
    ac08:	3084983a 	sll	r2,r6,r2
    ac0c:	4912d83a 	srl	r9,r9,r4
    ac10:	394ab03a 	or	r5,r7,r5
    ac14:	1004c03a 	cmpne	r2,r2,zero
    ac18:	288ab03a 	or	r5,r5,r2
    ac1c:	003f5306 	br	a96c <__alt_data_end+0xfffea96c>
    ac20:	4448b03a 	or	r4,r8,r17
    ac24:	20003e26 	beq	r4,zero,ad20 <__adddf3+0x61c>
    ac28:	00c6303a 	nor	r3,zero,r3
    ac2c:	18003a1e 	bne	r3,zero,ad18 <__adddf3+0x614>
    ac30:	3463c83a 	sub	r17,r6,r17
    ac34:	4a07c83a 	sub	r3,r9,r8
    ac38:	344d803a 	cmpltu	r6,r6,r17
    ac3c:	1991c83a 	sub	r8,r3,r6
    ac40:	1021883a 	mov	r16,r2
    ac44:	3825883a 	mov	r18,r7
    ac48:	003f0a06 	br	a874 <__alt_data_end+0xfffea874>
    ac4c:	2023883a 	mov	r17,r4
    ac50:	003f0d06 	br	a888 <__alt_data_end+0xfffea888>
    ac54:	0081ffc4 	movi	r2,2047
    ac58:	80bf3f1e 	bne	r16,r2,a958 <__alt_data_end+0xfffea958>
    ac5c:	003ec806 	br	a780 <__alt_data_end+0xfffea780>
    ac60:	0005883a 	mov	r2,zero
    ac64:	003fb106 	br	ab2c <__alt_data_end+0xfffeab2c>
    ac68:	0007883a 	mov	r3,zero
    ac6c:	003fbc06 	br	ab60 <__alt_data_end+0xfffeab60>
    ac70:	4444b03a 	or	r2,r8,r17
    ac74:	8000871e 	bne	r16,zero,ae94 <__adddf3+0x790>
    ac78:	1000ba26 	beq	r2,zero,af64 <__adddf3+0x860>
    ac7c:	4984b03a 	or	r2,r9,r6
    ac80:	103ebf26 	beq	r2,zero,a780 <__alt_data_end+0xfffea780>
    ac84:	8985883a 	add	r2,r17,r6
    ac88:	4247883a 	add	r3,r8,r9
    ac8c:	1451803a 	cmpltu	r8,r2,r17
    ac90:	40d1883a 	add	r8,r8,r3
    ac94:	40c0202c 	andhi	r3,r8,128
    ac98:	1023883a 	mov	r17,r2
    ac9c:	183f1a26 	beq	r3,zero,a908 <__alt_data_end+0xfffea908>
    aca0:	00bfe034 	movhi	r2,65408
    aca4:	10bfffc4 	addi	r2,r2,-1
    aca8:	2021883a 	mov	r16,r4
    acac:	4090703a 	and	r8,r8,r2
    acb0:	003eb306 	br	a780 <__alt_data_end+0xfffea780>
    acb4:	4444b03a 	or	r2,r8,r17
    acb8:	8000291e 	bne	r16,zero,ad60 <__adddf3+0x65c>
    acbc:	10004b1e 	bne	r2,zero,adec <__adddf3+0x6e8>
    acc0:	4990b03a 	or	r8,r9,r6
    acc4:	40008b26 	beq	r8,zero,aef4 <__adddf3+0x7f0>
    acc8:	4811883a 	mov	r8,r9
    accc:	3023883a 	mov	r17,r6
    acd0:	3825883a 	mov	r18,r7
    acd4:	003eaa06 	br	a780 <__alt_data_end+0xfffea780>
    acd8:	1021883a 	mov	r16,r2
    acdc:	0011883a 	mov	r8,zero
    ace0:	0005883a 	mov	r2,zero
    ace4:	003f0f06 	br	a924 <__alt_data_end+0xfffea924>
    ace8:	217ff804 	addi	r5,r4,-32
    acec:	00800804 	movi	r2,32
    acf0:	494ad83a 	srl	r5,r9,r5
    acf4:	20807d26 	beq	r4,r2,aeec <__adddf3+0x7e8>
    acf8:	00801004 	movi	r2,64
    acfc:	1109c83a 	sub	r4,r2,r4
    ad00:	4912983a 	sll	r9,r9,r4
    ad04:	498cb03a 	or	r6,r9,r6
    ad08:	300cc03a 	cmpne	r6,r6,zero
    ad0c:	298ab03a 	or	r5,r5,r6
    ad10:	0013883a 	mov	r9,zero
    ad14:	003f1506 	br	a96c <__alt_data_end+0xfffea96c>
    ad18:	0101ffc4 	movi	r4,2047
    ad1c:	113f9a1e 	bne	r2,r4,ab88 <__alt_data_end+0xfffeab88>
    ad20:	4811883a 	mov	r8,r9
    ad24:	3023883a 	mov	r17,r6
    ad28:	1021883a 	mov	r16,r2
    ad2c:	3825883a 	mov	r18,r7
    ad30:	003e9306 	br	a780 <__alt_data_end+0xfffea780>
    ad34:	8000161e 	bne	r16,zero,ad90 <__adddf3+0x68c>
    ad38:	444ab03a 	or	r5,r8,r17
    ad3c:	28005126 	beq	r5,zero,ae84 <__adddf3+0x780>
    ad40:	0108303a 	nor	r4,zero,r4
    ad44:	20004d1e 	bne	r4,zero,ae7c <__adddf3+0x778>
    ad48:	89a3883a 	add	r17,r17,r6
    ad4c:	4253883a 	add	r9,r8,r9
    ad50:	898d803a 	cmpltu	r6,r17,r6
    ad54:	3251883a 	add	r8,r6,r9
    ad58:	1021883a 	mov	r16,r2
    ad5c:	003f0806 	br	a980 <__alt_data_end+0xfffea980>
    ad60:	1000301e 	bne	r2,zero,ae24 <__adddf3+0x720>
    ad64:	4984b03a 	or	r2,r9,r6
    ad68:	10007126 	beq	r2,zero,af30 <__adddf3+0x82c>
    ad6c:	4811883a 	mov	r8,r9
    ad70:	3023883a 	mov	r17,r6
    ad74:	3825883a 	mov	r18,r7
    ad78:	0401ffc4 	movi	r16,2047
    ad7c:	003e8006 	br	a780 <__alt_data_end+0xfffea780>
    ad80:	4462b03a 	or	r17,r8,r17
    ad84:	8822c03a 	cmpne	r17,r17,zero
    ad88:	0007883a 	mov	r3,zero
    ad8c:	003f8b06 	br	abbc <__alt_data_end+0xfffeabbc>
    ad90:	0141ffc4 	movi	r5,2047
    ad94:	11403b26 	beq	r2,r5,ae84 <__adddf3+0x780>
    ad98:	0109c83a 	sub	r4,zero,r4
    ad9c:	42002034 	orhi	r8,r8,128
    ada0:	01400e04 	movi	r5,56
    ada4:	29006716 	blt	r5,r4,af44 <__adddf3+0x840>
    ada8:	014007c4 	movi	r5,31
    adac:	29007016 	blt	r5,r4,af70 <__adddf3+0x86c>
    adb0:	01400804 	movi	r5,32
    adb4:	290bc83a 	sub	r5,r5,r4
    adb8:	4154983a 	sll	r10,r8,r5
    adbc:	890ed83a 	srl	r7,r17,r4
    adc0:	894a983a 	sll	r5,r17,r5
    adc4:	4108d83a 	srl	r4,r8,r4
    adc8:	51e2b03a 	or	r17,r10,r7
    adcc:	280ac03a 	cmpne	r5,r5,zero
    add0:	8962b03a 	or	r17,r17,r5
    add4:	89a3883a 	add	r17,r17,r6
    add8:	2253883a 	add	r9,r4,r9
    addc:	898d803a 	cmpltu	r6,r17,r6
    ade0:	3251883a 	add	r8,r6,r9
    ade4:	1021883a 	mov	r16,r2
    ade8:	003ee506 	br	a980 <__alt_data_end+0xfffea980>
    adec:	4984b03a 	or	r2,r9,r6
    adf0:	103e6326 	beq	r2,zero,a780 <__alt_data_end+0xfffea780>
    adf4:	8987c83a 	sub	r3,r17,r6
    adf8:	88c9803a 	cmpltu	r4,r17,r3
    adfc:	4245c83a 	sub	r2,r8,r9
    ae00:	1105c83a 	sub	r2,r2,r4
    ae04:	1100202c 	andhi	r4,r2,128
    ae08:	203ebb26 	beq	r4,zero,a8f8 <__alt_data_end+0xfffea8f8>
    ae0c:	3463c83a 	sub	r17,r6,r17
    ae10:	4a07c83a 	sub	r3,r9,r8
    ae14:	344d803a 	cmpltu	r6,r6,r17
    ae18:	1991c83a 	sub	r8,r3,r6
    ae1c:	3825883a 	mov	r18,r7
    ae20:	003e5706 	br	a780 <__alt_data_end+0xfffea780>
    ae24:	4984b03a 	or	r2,r9,r6
    ae28:	10002e26 	beq	r2,zero,aee4 <__adddf3+0x7e0>
    ae2c:	4004d0fa 	srli	r2,r8,3
    ae30:	8822d0fa 	srli	r17,r17,3
    ae34:	4010977a 	slli	r8,r8,29
    ae38:	10c0022c 	andhi	r3,r2,8
    ae3c:	4462b03a 	or	r17,r8,r17
    ae40:	18000826 	beq	r3,zero,ae64 <__adddf3+0x760>
    ae44:	4808d0fa 	srli	r4,r9,3
    ae48:	20c0022c 	andhi	r3,r4,8
    ae4c:	1800051e 	bne	r3,zero,ae64 <__adddf3+0x760>
    ae50:	300cd0fa 	srli	r6,r6,3
    ae54:	4806977a 	slli	r3,r9,29
    ae58:	2005883a 	mov	r2,r4
    ae5c:	3825883a 	mov	r18,r7
    ae60:	19a2b03a 	or	r17,r3,r6
    ae64:	8810d77a 	srli	r8,r17,29
    ae68:	100490fa 	slli	r2,r2,3
    ae6c:	882290fa 	slli	r17,r17,3
    ae70:	0401ffc4 	movi	r16,2047
    ae74:	4090b03a 	or	r8,r8,r2
    ae78:	003e4106 	br	a780 <__alt_data_end+0xfffea780>
    ae7c:	0141ffc4 	movi	r5,2047
    ae80:	117fc71e 	bne	r2,r5,ada0 <__alt_data_end+0xfffeada0>
    ae84:	4811883a 	mov	r8,r9
    ae88:	3023883a 	mov	r17,r6
    ae8c:	1021883a 	mov	r16,r2
    ae90:	003e3b06 	br	a780 <__alt_data_end+0xfffea780>
    ae94:	10002f26 	beq	r2,zero,af54 <__adddf3+0x850>
    ae98:	4984b03a 	or	r2,r9,r6
    ae9c:	10001126 	beq	r2,zero,aee4 <__adddf3+0x7e0>
    aea0:	4004d0fa 	srli	r2,r8,3
    aea4:	8822d0fa 	srli	r17,r17,3
    aea8:	4010977a 	slli	r8,r8,29
    aeac:	10c0022c 	andhi	r3,r2,8
    aeb0:	4462b03a 	or	r17,r8,r17
    aeb4:	183feb26 	beq	r3,zero,ae64 <__alt_data_end+0xfffeae64>
    aeb8:	4808d0fa 	srli	r4,r9,3
    aebc:	20c0022c 	andhi	r3,r4,8
    aec0:	183fe81e 	bne	r3,zero,ae64 <__alt_data_end+0xfffeae64>
    aec4:	300cd0fa 	srli	r6,r6,3
    aec8:	4806977a 	slli	r3,r9,29
    aecc:	2005883a 	mov	r2,r4
    aed0:	19a2b03a 	or	r17,r3,r6
    aed4:	003fe306 	br	ae64 <__alt_data_end+0xfffeae64>
    aed8:	0011883a 	mov	r8,zero
    aedc:	0005883a 	mov	r2,zero
    aee0:	003e3f06 	br	a7e0 <__alt_data_end+0xfffea7e0>
    aee4:	0401ffc4 	movi	r16,2047
    aee8:	003e2506 	br	a780 <__alt_data_end+0xfffea780>
    aeec:	0013883a 	mov	r9,zero
    aef0:	003f8406 	br	ad04 <__alt_data_end+0xfffead04>
    aef4:	0005883a 	mov	r2,zero
    aef8:	0007883a 	mov	r3,zero
    aefc:	003e8906 	br	a924 <__alt_data_end+0xfffea924>
    af00:	197ff804 	addi	r5,r3,-32
    af04:	01000804 	movi	r4,32
    af08:	414ad83a 	srl	r5,r8,r5
    af0c:	19002426 	beq	r3,r4,afa0 <__adddf3+0x89c>
    af10:	01001004 	movi	r4,64
    af14:	20c7c83a 	sub	r3,r4,r3
    af18:	40c6983a 	sll	r3,r8,r3
    af1c:	1c46b03a 	or	r3,r3,r17
    af20:	1806c03a 	cmpne	r3,r3,zero
    af24:	28e2b03a 	or	r17,r5,r3
    af28:	0007883a 	mov	r3,zero
    af2c:	003f2306 	br	abbc <__alt_data_end+0xfffeabbc>
    af30:	0007883a 	mov	r3,zero
    af34:	5811883a 	mov	r8,r11
    af38:	00bfffc4 	movi	r2,-1
    af3c:	0401ffc4 	movi	r16,2047
    af40:	003e7806 	br	a924 <__alt_data_end+0xfffea924>
    af44:	4462b03a 	or	r17,r8,r17
    af48:	8822c03a 	cmpne	r17,r17,zero
    af4c:	0009883a 	mov	r4,zero
    af50:	003fa006 	br	add4 <__alt_data_end+0xfffeadd4>
    af54:	4811883a 	mov	r8,r9
    af58:	3023883a 	mov	r17,r6
    af5c:	0401ffc4 	movi	r16,2047
    af60:	003e0706 	br	a780 <__alt_data_end+0xfffea780>
    af64:	4811883a 	mov	r8,r9
    af68:	3023883a 	mov	r17,r6
    af6c:	003e0406 	br	a780 <__alt_data_end+0xfffea780>
    af70:	21fff804 	addi	r7,r4,-32
    af74:	01400804 	movi	r5,32
    af78:	41ced83a 	srl	r7,r8,r7
    af7c:	21400a26 	beq	r4,r5,afa8 <__adddf3+0x8a4>
    af80:	01401004 	movi	r5,64
    af84:	2909c83a 	sub	r4,r5,r4
    af88:	4108983a 	sll	r4,r8,r4
    af8c:	2448b03a 	or	r4,r4,r17
    af90:	2008c03a 	cmpne	r4,r4,zero
    af94:	3922b03a 	or	r17,r7,r4
    af98:	0009883a 	mov	r4,zero
    af9c:	003f8d06 	br	add4 <__alt_data_end+0xfffeadd4>
    afa0:	0007883a 	mov	r3,zero
    afa4:	003fdd06 	br	af1c <__alt_data_end+0xfffeaf1c>
    afa8:	0009883a 	mov	r4,zero
    afac:	003ff706 	br	af8c <__alt_data_end+0xfffeaf8c>

0000afb0 <__divdf3>:
    afb0:	defff204 	addi	sp,sp,-56
    afb4:	dd400915 	stw	r21,36(sp)
    afb8:	282ad53a 	srli	r21,r5,20
    afbc:	dd000815 	stw	r20,32(sp)
    afc0:	2828d7fa 	srli	r20,r5,31
    afc4:	dc000415 	stw	r16,16(sp)
    afc8:	04000434 	movhi	r16,16
    afcc:	df000c15 	stw	fp,48(sp)
    afd0:	843fffc4 	addi	r16,r16,-1
    afd4:	dfc00d15 	stw	ra,52(sp)
    afd8:	ddc00b15 	stw	r23,44(sp)
    afdc:	dd800a15 	stw	r22,40(sp)
    afe0:	dcc00715 	stw	r19,28(sp)
    afe4:	dc800615 	stw	r18,24(sp)
    afe8:	dc400515 	stw	r17,20(sp)
    afec:	ad41ffcc 	andi	r21,r21,2047
    aff0:	2c20703a 	and	r16,r5,r16
    aff4:	a7003fcc 	andi	fp,r20,255
    aff8:	a8006126 	beq	r21,zero,b180 <__divdf3+0x1d0>
    affc:	0081ffc4 	movi	r2,2047
    b000:	2025883a 	mov	r18,r4
    b004:	a8803726 	beq	r21,r2,b0e4 <__divdf3+0x134>
    b008:	80800434 	orhi	r2,r16,16
    b00c:	100490fa 	slli	r2,r2,3
    b010:	2020d77a 	srli	r16,r4,29
    b014:	202490fa 	slli	r18,r4,3
    b018:	ad7f0044 	addi	r21,r21,-1023
    b01c:	80a0b03a 	or	r16,r16,r2
    b020:	0027883a 	mov	r19,zero
    b024:	0013883a 	mov	r9,zero
    b028:	3804d53a 	srli	r2,r7,20
    b02c:	382cd7fa 	srli	r22,r7,31
    b030:	04400434 	movhi	r17,16
    b034:	8c7fffc4 	addi	r17,r17,-1
    b038:	1081ffcc 	andi	r2,r2,2047
    b03c:	3011883a 	mov	r8,r6
    b040:	3c62703a 	and	r17,r7,r17
    b044:	b5c03fcc 	andi	r23,r22,255
    b048:	10006c26 	beq	r2,zero,b1fc <__divdf3+0x24c>
    b04c:	00c1ffc4 	movi	r3,2047
    b050:	10c06426 	beq	r2,r3,b1e4 <__divdf3+0x234>
    b054:	88c00434 	orhi	r3,r17,16
    b058:	180690fa 	slli	r3,r3,3
    b05c:	3022d77a 	srli	r17,r6,29
    b060:	301090fa 	slli	r8,r6,3
    b064:	10bf0044 	addi	r2,r2,-1023
    b068:	88e2b03a 	or	r17,r17,r3
    b06c:	000f883a 	mov	r7,zero
    b070:	a58cf03a 	xor	r6,r20,r22
    b074:	3cc8b03a 	or	r4,r7,r19
    b078:	a8abc83a 	sub	r21,r21,r2
    b07c:	008003c4 	movi	r2,15
    b080:	3007883a 	mov	r3,r6
    b084:	34c03fcc 	andi	r19,r6,255
    b088:	11009036 	bltu	r2,r4,b2cc <__divdf3+0x31c>
    b08c:	200890ba 	slli	r4,r4,2
    b090:	00800074 	movhi	r2,1
    b094:	10ac2904 	addi	r2,r2,-20316
    b098:	2089883a 	add	r4,r4,r2
    b09c:	20800017 	ldw	r2,0(r4)
    b0a0:	1000683a 	jmp	r2
    b0a4:	0000b2cc 	andi	zero,zero,715
    b0a8:	0000b11c 	xori	zero,zero,708
    b0ac:	0000b2bc 	xorhi	zero,zero,714
    b0b0:	0000b110 	cmplti	zero,zero,708
    b0b4:	0000b2bc 	xorhi	zero,zero,714
    b0b8:	0000b290 	cmplti	zero,zero,714
    b0bc:	0000b2bc 	xorhi	zero,zero,714
    b0c0:	0000b110 	cmplti	zero,zero,708
    b0c4:	0000b11c 	xori	zero,zero,708
    b0c8:	0000b11c 	xori	zero,zero,708
    b0cc:	0000b290 	cmplti	zero,zero,714
    b0d0:	0000b110 	cmplti	zero,zero,708
    b0d4:	0000b100 	call	b10 <___vfprintf_internal_r+0x338>
    b0d8:	0000b100 	call	b10 <___vfprintf_internal_r+0x338>
    b0dc:	0000b100 	call	b10 <___vfprintf_internal_r+0x338>
    b0e0:	0000b5b0 	cmpltui	zero,zero,726
    b0e4:	2404b03a 	or	r2,r4,r16
    b0e8:	1000661e 	bne	r2,zero,b284 <__divdf3+0x2d4>
    b0ec:	04c00204 	movi	r19,8
    b0f0:	0021883a 	mov	r16,zero
    b0f4:	0025883a 	mov	r18,zero
    b0f8:	02400084 	movi	r9,2
    b0fc:	003fca06 	br	b028 <__alt_data_end+0xfffeb028>
    b100:	8023883a 	mov	r17,r16
    b104:	9011883a 	mov	r8,r18
    b108:	e02f883a 	mov	r23,fp
    b10c:	480f883a 	mov	r7,r9
    b110:	00800084 	movi	r2,2
    b114:	3881311e 	bne	r7,r2,b5dc <__divdf3+0x62c>
    b118:	b827883a 	mov	r19,r23
    b11c:	98c0004c 	andi	r3,r19,1
    b120:	0081ffc4 	movi	r2,2047
    b124:	000b883a 	mov	r5,zero
    b128:	0025883a 	mov	r18,zero
    b12c:	1004953a 	slli	r2,r2,20
    b130:	18c03fcc 	andi	r3,r3,255
    b134:	04400434 	movhi	r17,16
    b138:	8c7fffc4 	addi	r17,r17,-1
    b13c:	180697fa 	slli	r3,r3,31
    b140:	2c4a703a 	and	r5,r5,r17
    b144:	288ab03a 	or	r5,r5,r2
    b148:	28c6b03a 	or	r3,r5,r3
    b14c:	9005883a 	mov	r2,r18
    b150:	dfc00d17 	ldw	ra,52(sp)
    b154:	df000c17 	ldw	fp,48(sp)
    b158:	ddc00b17 	ldw	r23,44(sp)
    b15c:	dd800a17 	ldw	r22,40(sp)
    b160:	dd400917 	ldw	r21,36(sp)
    b164:	dd000817 	ldw	r20,32(sp)
    b168:	dcc00717 	ldw	r19,28(sp)
    b16c:	dc800617 	ldw	r18,24(sp)
    b170:	dc400517 	ldw	r17,20(sp)
    b174:	dc000417 	ldw	r16,16(sp)
    b178:	dec00e04 	addi	sp,sp,56
    b17c:	f800283a 	ret
    b180:	2404b03a 	or	r2,r4,r16
    b184:	2027883a 	mov	r19,r4
    b188:	10003926 	beq	r2,zero,b270 <__divdf3+0x2c0>
    b18c:	80012e26 	beq	r16,zero,b648 <__divdf3+0x698>
    b190:	8009883a 	mov	r4,r16
    b194:	d9800315 	stw	r6,12(sp)
    b198:	d9c00215 	stw	r7,8(sp)
    b19c:	000cd080 	call	cd08 <__clzsi2>
    b1a0:	d9800317 	ldw	r6,12(sp)
    b1a4:	d9c00217 	ldw	r7,8(sp)
    b1a8:	113ffd44 	addi	r4,r2,-11
    b1ac:	00c00704 	movi	r3,28
    b1b0:	19012116 	blt	r3,r4,b638 <__divdf3+0x688>
    b1b4:	00c00744 	movi	r3,29
    b1b8:	147ffe04 	addi	r17,r2,-8
    b1bc:	1907c83a 	sub	r3,r3,r4
    b1c0:	8460983a 	sll	r16,r16,r17
    b1c4:	98c6d83a 	srl	r3,r19,r3
    b1c8:	9c64983a 	sll	r18,r19,r17
    b1cc:	1c20b03a 	or	r16,r3,r16
    b1d0:	1080fcc4 	addi	r2,r2,1011
    b1d4:	00abc83a 	sub	r21,zero,r2
    b1d8:	0027883a 	mov	r19,zero
    b1dc:	0013883a 	mov	r9,zero
    b1e0:	003f9106 	br	b028 <__alt_data_end+0xfffeb028>
    b1e4:	3446b03a 	or	r3,r6,r17
    b1e8:	18001f1e 	bne	r3,zero,b268 <__divdf3+0x2b8>
    b1ec:	0023883a 	mov	r17,zero
    b1f0:	0011883a 	mov	r8,zero
    b1f4:	01c00084 	movi	r7,2
    b1f8:	003f9d06 	br	b070 <__alt_data_end+0xfffeb070>
    b1fc:	3446b03a 	or	r3,r6,r17
    b200:	18001526 	beq	r3,zero,b258 <__divdf3+0x2a8>
    b204:	88011b26 	beq	r17,zero,b674 <__divdf3+0x6c4>
    b208:	8809883a 	mov	r4,r17
    b20c:	d9800315 	stw	r6,12(sp)
    b210:	da400115 	stw	r9,4(sp)
    b214:	000cd080 	call	cd08 <__clzsi2>
    b218:	d9800317 	ldw	r6,12(sp)
    b21c:	da400117 	ldw	r9,4(sp)
    b220:	113ffd44 	addi	r4,r2,-11
    b224:	00c00704 	movi	r3,28
    b228:	19010e16 	blt	r3,r4,b664 <__divdf3+0x6b4>
    b22c:	00c00744 	movi	r3,29
    b230:	123ffe04 	addi	r8,r2,-8
    b234:	1907c83a 	sub	r3,r3,r4
    b238:	8a22983a 	sll	r17,r17,r8
    b23c:	30c6d83a 	srl	r3,r6,r3
    b240:	3210983a 	sll	r8,r6,r8
    b244:	1c62b03a 	or	r17,r3,r17
    b248:	1080fcc4 	addi	r2,r2,1011
    b24c:	0085c83a 	sub	r2,zero,r2
    b250:	000f883a 	mov	r7,zero
    b254:	003f8606 	br	b070 <__alt_data_end+0xfffeb070>
    b258:	0023883a 	mov	r17,zero
    b25c:	0011883a 	mov	r8,zero
    b260:	01c00044 	movi	r7,1
    b264:	003f8206 	br	b070 <__alt_data_end+0xfffeb070>
    b268:	01c000c4 	movi	r7,3
    b26c:	003f8006 	br	b070 <__alt_data_end+0xfffeb070>
    b270:	04c00104 	movi	r19,4
    b274:	0021883a 	mov	r16,zero
    b278:	0025883a 	mov	r18,zero
    b27c:	02400044 	movi	r9,1
    b280:	003f6906 	br	b028 <__alt_data_end+0xfffeb028>
    b284:	04c00304 	movi	r19,12
    b288:	024000c4 	movi	r9,3
    b28c:	003f6606 	br	b028 <__alt_data_end+0xfffeb028>
    b290:	01400434 	movhi	r5,16
    b294:	0007883a 	mov	r3,zero
    b298:	297fffc4 	addi	r5,r5,-1
    b29c:	04bfffc4 	movi	r18,-1
    b2a0:	0081ffc4 	movi	r2,2047
    b2a4:	003fa106 	br	b12c <__alt_data_end+0xfffeb12c>
    b2a8:	00c00044 	movi	r3,1
    b2ac:	1887c83a 	sub	r3,r3,r2
    b2b0:	01000e04 	movi	r4,56
    b2b4:	20c1210e 	bge	r4,r3,b73c <__divdf3+0x78c>
    b2b8:	98c0004c 	andi	r3,r19,1
    b2bc:	0005883a 	mov	r2,zero
    b2c0:	000b883a 	mov	r5,zero
    b2c4:	0025883a 	mov	r18,zero
    b2c8:	003f9806 	br	b12c <__alt_data_end+0xfffeb12c>
    b2cc:	8c00fd36 	bltu	r17,r16,b6c4 <__divdf3+0x714>
    b2d0:	8440fb26 	beq	r16,r17,b6c0 <__divdf3+0x710>
    b2d4:	8007883a 	mov	r3,r16
    b2d8:	ad7fffc4 	addi	r21,r21,-1
    b2dc:	0021883a 	mov	r16,zero
    b2e0:	4004d63a 	srli	r2,r8,24
    b2e4:	8822923a 	slli	r17,r17,8
    b2e8:	1809883a 	mov	r4,r3
    b2ec:	402c923a 	slli	r22,r8,8
    b2f0:	88b8b03a 	or	fp,r17,r2
    b2f4:	e028d43a 	srli	r20,fp,16
    b2f8:	d8c00015 	stw	r3,0(sp)
    b2fc:	e5ffffcc 	andi	r23,fp,65535
    b300:	a00b883a 	mov	r5,r20
    b304:	00005440 	call	544 <__udivsi3>
    b308:	d8c00017 	ldw	r3,0(sp)
    b30c:	a00b883a 	mov	r5,r20
    b310:	d8800315 	stw	r2,12(sp)
    b314:	1809883a 	mov	r4,r3
    b318:	00005a80 	call	5a8 <__umodsi3>
    b31c:	d9800317 	ldw	r6,12(sp)
    b320:	1006943a 	slli	r3,r2,16
    b324:	9004d43a 	srli	r2,r18,16
    b328:	b9a3383a 	mul	r17,r23,r6
    b32c:	10c4b03a 	or	r2,r2,r3
    b330:	1440062e 	bgeu	r2,r17,b34c <__divdf3+0x39c>
    b334:	1705883a 	add	r2,r2,fp
    b338:	30ffffc4 	addi	r3,r6,-1
    b33c:	1700ee36 	bltu	r2,fp,b6f8 <__divdf3+0x748>
    b340:	1440ed2e 	bgeu	r2,r17,b6f8 <__divdf3+0x748>
    b344:	31bfff84 	addi	r6,r6,-2
    b348:	1705883a 	add	r2,r2,fp
    b34c:	1463c83a 	sub	r17,r2,r17
    b350:	a00b883a 	mov	r5,r20
    b354:	8809883a 	mov	r4,r17
    b358:	d9800315 	stw	r6,12(sp)
    b35c:	00005440 	call	544 <__udivsi3>
    b360:	a00b883a 	mov	r5,r20
    b364:	8809883a 	mov	r4,r17
    b368:	d8800215 	stw	r2,8(sp)
    b36c:	00005a80 	call	5a8 <__umodsi3>
    b370:	d9c00217 	ldw	r7,8(sp)
    b374:	1004943a 	slli	r2,r2,16
    b378:	94bfffcc 	andi	r18,r18,65535
    b37c:	b9d1383a 	mul	r8,r23,r7
    b380:	90a4b03a 	or	r18,r18,r2
    b384:	d9800317 	ldw	r6,12(sp)
    b388:	9200062e 	bgeu	r18,r8,b3a4 <__divdf3+0x3f4>
    b38c:	9725883a 	add	r18,r18,fp
    b390:	38bfffc4 	addi	r2,r7,-1
    b394:	9700d636 	bltu	r18,fp,b6f0 <__divdf3+0x740>
    b398:	9200d52e 	bgeu	r18,r8,b6f0 <__divdf3+0x740>
    b39c:	39ffff84 	addi	r7,r7,-2
    b3a0:	9725883a 	add	r18,r18,fp
    b3a4:	3004943a 	slli	r2,r6,16
    b3a8:	b012d43a 	srli	r9,r22,16
    b3ac:	b1bfffcc 	andi	r6,r22,65535
    b3b0:	11e2b03a 	or	r17,r2,r7
    b3b4:	8806d43a 	srli	r3,r17,16
    b3b8:	893fffcc 	andi	r4,r17,65535
    b3bc:	218b383a 	mul	r5,r4,r6
    b3c0:	30c5383a 	mul	r2,r6,r3
    b3c4:	2249383a 	mul	r4,r4,r9
    b3c8:	280ed43a 	srli	r7,r5,16
    b3cc:	9225c83a 	sub	r18,r18,r8
    b3d0:	2089883a 	add	r4,r4,r2
    b3d4:	3909883a 	add	r4,r7,r4
    b3d8:	1a47383a 	mul	r3,r3,r9
    b3dc:	2080022e 	bgeu	r4,r2,b3e8 <__divdf3+0x438>
    b3e0:	00800074 	movhi	r2,1
    b3e4:	1887883a 	add	r3,r3,r2
    b3e8:	2004d43a 	srli	r2,r4,16
    b3ec:	2008943a 	slli	r4,r4,16
    b3f0:	297fffcc 	andi	r5,r5,65535
    b3f4:	10c7883a 	add	r3,r2,r3
    b3f8:	2149883a 	add	r4,r4,r5
    b3fc:	90c0a536 	bltu	r18,r3,b694 <__divdf3+0x6e4>
    b400:	90c0bf26 	beq	r18,r3,b700 <__divdf3+0x750>
    b404:	90c7c83a 	sub	r3,r18,r3
    b408:	810fc83a 	sub	r7,r16,r4
    b40c:	81e5803a 	cmpltu	r18,r16,r7
    b410:	1ca5c83a 	sub	r18,r3,r18
    b414:	e480c126 	beq	fp,r18,b71c <__divdf3+0x76c>
    b418:	a00b883a 	mov	r5,r20
    b41c:	9009883a 	mov	r4,r18
    b420:	d9800315 	stw	r6,12(sp)
    b424:	d9c00215 	stw	r7,8(sp)
    b428:	da400115 	stw	r9,4(sp)
    b42c:	00005440 	call	544 <__udivsi3>
    b430:	a00b883a 	mov	r5,r20
    b434:	9009883a 	mov	r4,r18
    b438:	d8800015 	stw	r2,0(sp)
    b43c:	00005a80 	call	5a8 <__umodsi3>
    b440:	d9c00217 	ldw	r7,8(sp)
    b444:	da000017 	ldw	r8,0(sp)
    b448:	1006943a 	slli	r3,r2,16
    b44c:	3804d43a 	srli	r2,r7,16
    b450:	ba21383a 	mul	r16,r23,r8
    b454:	d9800317 	ldw	r6,12(sp)
    b458:	10c4b03a 	or	r2,r2,r3
    b45c:	da400117 	ldw	r9,4(sp)
    b460:	1400062e 	bgeu	r2,r16,b47c <__divdf3+0x4cc>
    b464:	1705883a 	add	r2,r2,fp
    b468:	40ffffc4 	addi	r3,r8,-1
    b46c:	1700ad36 	bltu	r2,fp,b724 <__divdf3+0x774>
    b470:	1400ac2e 	bgeu	r2,r16,b724 <__divdf3+0x774>
    b474:	423fff84 	addi	r8,r8,-2
    b478:	1705883a 	add	r2,r2,fp
    b47c:	1421c83a 	sub	r16,r2,r16
    b480:	a00b883a 	mov	r5,r20
    b484:	8009883a 	mov	r4,r16
    b488:	d9800315 	stw	r6,12(sp)
    b48c:	d9c00215 	stw	r7,8(sp)
    b490:	da000015 	stw	r8,0(sp)
    b494:	da400115 	stw	r9,4(sp)
    b498:	00005440 	call	544 <__udivsi3>
    b49c:	8009883a 	mov	r4,r16
    b4a0:	a00b883a 	mov	r5,r20
    b4a4:	1025883a 	mov	r18,r2
    b4a8:	00005a80 	call	5a8 <__umodsi3>
    b4ac:	d9c00217 	ldw	r7,8(sp)
    b4b0:	1004943a 	slli	r2,r2,16
    b4b4:	bcaf383a 	mul	r23,r23,r18
    b4b8:	393fffcc 	andi	r4,r7,65535
    b4bc:	2088b03a 	or	r4,r4,r2
    b4c0:	d9800317 	ldw	r6,12(sp)
    b4c4:	da000017 	ldw	r8,0(sp)
    b4c8:	da400117 	ldw	r9,4(sp)
    b4cc:	25c0062e 	bgeu	r4,r23,b4e8 <__divdf3+0x538>
    b4d0:	2709883a 	add	r4,r4,fp
    b4d4:	90bfffc4 	addi	r2,r18,-1
    b4d8:	27009436 	bltu	r4,fp,b72c <__divdf3+0x77c>
    b4dc:	25c0932e 	bgeu	r4,r23,b72c <__divdf3+0x77c>
    b4e0:	94bfff84 	addi	r18,r18,-2
    b4e4:	2709883a 	add	r4,r4,fp
    b4e8:	4004943a 	slli	r2,r8,16
    b4ec:	25efc83a 	sub	r23,r4,r23
    b4f0:	1490b03a 	or	r8,r2,r18
    b4f4:	4008d43a 	srli	r4,r8,16
    b4f8:	40ffffcc 	andi	r3,r8,65535
    b4fc:	30c5383a 	mul	r2,r6,r3
    b500:	1a47383a 	mul	r3,r3,r9
    b504:	310d383a 	mul	r6,r6,r4
    b508:	100ad43a 	srli	r5,r2,16
    b50c:	4913383a 	mul	r9,r9,r4
    b510:	1987883a 	add	r3,r3,r6
    b514:	28c7883a 	add	r3,r5,r3
    b518:	1980022e 	bgeu	r3,r6,b524 <__divdf3+0x574>
    b51c:	01000074 	movhi	r4,1
    b520:	4913883a 	add	r9,r9,r4
    b524:	1808d43a 	srli	r4,r3,16
    b528:	1806943a 	slli	r3,r3,16
    b52c:	10bfffcc 	andi	r2,r2,65535
    b530:	2253883a 	add	r9,r4,r9
    b534:	1887883a 	add	r3,r3,r2
    b538:	ba403836 	bltu	r23,r9,b61c <__divdf3+0x66c>
    b53c:	ba403626 	beq	r23,r9,b618 <__divdf3+0x668>
    b540:	42000054 	ori	r8,r8,1
    b544:	a880ffc4 	addi	r2,r21,1023
    b548:	00bf570e 	bge	zero,r2,b2a8 <__alt_data_end+0xfffeb2a8>
    b54c:	40c001cc 	andi	r3,r8,7
    b550:	18000726 	beq	r3,zero,b570 <__divdf3+0x5c0>
    b554:	40c003cc 	andi	r3,r8,15
    b558:	01000104 	movi	r4,4
    b55c:	19000426 	beq	r3,r4,b570 <__divdf3+0x5c0>
    b560:	4107883a 	add	r3,r8,r4
    b564:	1a11803a 	cmpltu	r8,r3,r8
    b568:	8a23883a 	add	r17,r17,r8
    b56c:	1811883a 	mov	r8,r3
    b570:	88c0402c 	andhi	r3,r17,256
    b574:	18000426 	beq	r3,zero,b588 <__divdf3+0x5d8>
    b578:	00ffc034 	movhi	r3,65280
    b57c:	18ffffc4 	addi	r3,r3,-1
    b580:	a8810004 	addi	r2,r21,1024
    b584:	88e2703a 	and	r17,r17,r3
    b588:	00c1ff84 	movi	r3,2046
    b58c:	18bee316 	blt	r3,r2,b11c <__alt_data_end+0xfffeb11c>
    b590:	8824977a 	slli	r18,r17,29
    b594:	4010d0fa 	srli	r8,r8,3
    b598:	8822927a 	slli	r17,r17,9
    b59c:	1081ffcc 	andi	r2,r2,2047
    b5a0:	9224b03a 	or	r18,r18,r8
    b5a4:	880ad33a 	srli	r5,r17,12
    b5a8:	98c0004c 	andi	r3,r19,1
    b5ac:	003edf06 	br	b12c <__alt_data_end+0xfffeb12c>
    b5b0:	8080022c 	andhi	r2,r16,8
    b5b4:	10001226 	beq	r2,zero,b600 <__divdf3+0x650>
    b5b8:	8880022c 	andhi	r2,r17,8
    b5bc:	1000101e 	bne	r2,zero,b600 <__divdf3+0x650>
    b5c0:	00800434 	movhi	r2,16
    b5c4:	89400234 	orhi	r5,r17,8
    b5c8:	10bfffc4 	addi	r2,r2,-1
    b5cc:	b007883a 	mov	r3,r22
    b5d0:	288a703a 	and	r5,r5,r2
    b5d4:	4025883a 	mov	r18,r8
    b5d8:	003f3106 	br	b2a0 <__alt_data_end+0xfffeb2a0>
    b5dc:	008000c4 	movi	r2,3
    b5e0:	3880a626 	beq	r7,r2,b87c <__divdf3+0x8cc>
    b5e4:	00800044 	movi	r2,1
    b5e8:	3880521e 	bne	r7,r2,b734 <__divdf3+0x784>
    b5ec:	b807883a 	mov	r3,r23
    b5f0:	0005883a 	mov	r2,zero
    b5f4:	000b883a 	mov	r5,zero
    b5f8:	0025883a 	mov	r18,zero
    b5fc:	003ecb06 	br	b12c <__alt_data_end+0xfffeb12c>
    b600:	00800434 	movhi	r2,16
    b604:	81400234 	orhi	r5,r16,8
    b608:	10bfffc4 	addi	r2,r2,-1
    b60c:	a007883a 	mov	r3,r20
    b610:	288a703a 	and	r5,r5,r2
    b614:	003f2206 	br	b2a0 <__alt_data_end+0xfffeb2a0>
    b618:	183fca26 	beq	r3,zero,b544 <__alt_data_end+0xfffeb544>
    b61c:	e5ef883a 	add	r23,fp,r23
    b620:	40bfffc4 	addi	r2,r8,-1
    b624:	bf00392e 	bgeu	r23,fp,b70c <__divdf3+0x75c>
    b628:	1011883a 	mov	r8,r2
    b62c:	ba7fc41e 	bne	r23,r9,b540 <__alt_data_end+0xfffeb540>
    b630:	b0ffc31e 	bne	r22,r3,b540 <__alt_data_end+0xfffeb540>
    b634:	003fc306 	br	b544 <__alt_data_end+0xfffeb544>
    b638:	143ff604 	addi	r16,r2,-40
    b63c:	9c20983a 	sll	r16,r19,r16
    b640:	0025883a 	mov	r18,zero
    b644:	003ee206 	br	b1d0 <__alt_data_end+0xfffeb1d0>
    b648:	d9800315 	stw	r6,12(sp)
    b64c:	d9c00215 	stw	r7,8(sp)
    b650:	000cd080 	call	cd08 <__clzsi2>
    b654:	10800804 	addi	r2,r2,32
    b658:	d9c00217 	ldw	r7,8(sp)
    b65c:	d9800317 	ldw	r6,12(sp)
    b660:	003ed106 	br	b1a8 <__alt_data_end+0xfffeb1a8>
    b664:	147ff604 	addi	r17,r2,-40
    b668:	3462983a 	sll	r17,r6,r17
    b66c:	0011883a 	mov	r8,zero
    b670:	003ef506 	br	b248 <__alt_data_end+0xfffeb248>
    b674:	3009883a 	mov	r4,r6
    b678:	d9800315 	stw	r6,12(sp)
    b67c:	da400115 	stw	r9,4(sp)
    b680:	000cd080 	call	cd08 <__clzsi2>
    b684:	10800804 	addi	r2,r2,32
    b688:	da400117 	ldw	r9,4(sp)
    b68c:	d9800317 	ldw	r6,12(sp)
    b690:	003ee306 	br	b220 <__alt_data_end+0xfffeb220>
    b694:	85a1883a 	add	r16,r16,r22
    b698:	8585803a 	cmpltu	r2,r16,r22
    b69c:	1705883a 	add	r2,r2,fp
    b6a0:	14a5883a 	add	r18,r2,r18
    b6a4:	88bfffc4 	addi	r2,r17,-1
    b6a8:	e4800c2e 	bgeu	fp,r18,b6dc <__divdf3+0x72c>
    b6ac:	90c03e36 	bltu	r18,r3,b7a8 <__divdf3+0x7f8>
    b6b0:	1c806926 	beq	r3,r18,b858 <__divdf3+0x8a8>
    b6b4:	90c7c83a 	sub	r3,r18,r3
    b6b8:	1023883a 	mov	r17,r2
    b6bc:	003f5206 	br	b408 <__alt_data_end+0xfffeb408>
    b6c0:	923f0436 	bltu	r18,r8,b2d4 <__alt_data_end+0xfffeb2d4>
    b6c4:	800897fa 	slli	r4,r16,31
    b6c8:	9004d07a 	srli	r2,r18,1
    b6cc:	8006d07a 	srli	r3,r16,1
    b6d0:	902097fa 	slli	r16,r18,31
    b6d4:	20a4b03a 	or	r18,r4,r2
    b6d8:	003f0106 	br	b2e0 <__alt_data_end+0xfffeb2e0>
    b6dc:	e4bff51e 	bne	fp,r18,b6b4 <__alt_data_end+0xfffeb6b4>
    b6e0:	85bff22e 	bgeu	r16,r22,b6ac <__alt_data_end+0xfffeb6ac>
    b6e4:	e0c7c83a 	sub	r3,fp,r3
    b6e8:	1023883a 	mov	r17,r2
    b6ec:	003f4606 	br	b408 <__alt_data_end+0xfffeb408>
    b6f0:	100f883a 	mov	r7,r2
    b6f4:	003f2b06 	br	b3a4 <__alt_data_end+0xfffeb3a4>
    b6f8:	180d883a 	mov	r6,r3
    b6fc:	003f1306 	br	b34c <__alt_data_end+0xfffeb34c>
    b700:	813fe436 	bltu	r16,r4,b694 <__alt_data_end+0xfffeb694>
    b704:	0007883a 	mov	r3,zero
    b708:	003f3f06 	br	b408 <__alt_data_end+0xfffeb408>
    b70c:	ba402c36 	bltu	r23,r9,b7c0 <__divdf3+0x810>
    b710:	4dc05426 	beq	r9,r23,b864 <__divdf3+0x8b4>
    b714:	1011883a 	mov	r8,r2
    b718:	003f8906 	br	b540 <__alt_data_end+0xfffeb540>
    b71c:	023fffc4 	movi	r8,-1
    b720:	003f8806 	br	b544 <__alt_data_end+0xfffeb544>
    b724:	1811883a 	mov	r8,r3
    b728:	003f5406 	br	b47c <__alt_data_end+0xfffeb47c>
    b72c:	1025883a 	mov	r18,r2
    b730:	003f6d06 	br	b4e8 <__alt_data_end+0xfffeb4e8>
    b734:	b827883a 	mov	r19,r23
    b738:	003f8206 	br	b544 <__alt_data_end+0xfffeb544>
    b73c:	010007c4 	movi	r4,31
    b740:	20c02616 	blt	r4,r3,b7dc <__divdf3+0x82c>
    b744:	00800804 	movi	r2,32
    b748:	10c5c83a 	sub	r2,r2,r3
    b74c:	888a983a 	sll	r5,r17,r2
    b750:	40c8d83a 	srl	r4,r8,r3
    b754:	4084983a 	sll	r2,r8,r2
    b758:	88e2d83a 	srl	r17,r17,r3
    b75c:	2906b03a 	or	r3,r5,r4
    b760:	1004c03a 	cmpne	r2,r2,zero
    b764:	1886b03a 	or	r3,r3,r2
    b768:	188001cc 	andi	r2,r3,7
    b76c:	10000726 	beq	r2,zero,b78c <__divdf3+0x7dc>
    b770:	188003cc 	andi	r2,r3,15
    b774:	01000104 	movi	r4,4
    b778:	11000426 	beq	r2,r4,b78c <__divdf3+0x7dc>
    b77c:	1805883a 	mov	r2,r3
    b780:	10c00104 	addi	r3,r2,4
    b784:	1885803a 	cmpltu	r2,r3,r2
    b788:	88a3883a 	add	r17,r17,r2
    b78c:	8880202c 	andhi	r2,r17,128
    b790:	10002726 	beq	r2,zero,b830 <__divdf3+0x880>
    b794:	98c0004c 	andi	r3,r19,1
    b798:	00800044 	movi	r2,1
    b79c:	000b883a 	mov	r5,zero
    b7a0:	0025883a 	mov	r18,zero
    b7a4:	003e6106 	br	b12c <__alt_data_end+0xfffeb12c>
    b7a8:	85a1883a 	add	r16,r16,r22
    b7ac:	8585803a 	cmpltu	r2,r16,r22
    b7b0:	1705883a 	add	r2,r2,fp
    b7b4:	14a5883a 	add	r18,r2,r18
    b7b8:	8c7fff84 	addi	r17,r17,-2
    b7bc:	003f1106 	br	b404 <__alt_data_end+0xfffeb404>
    b7c0:	b589883a 	add	r4,r22,r22
    b7c4:	25ad803a 	cmpltu	r22,r4,r22
    b7c8:	b739883a 	add	fp,r22,fp
    b7cc:	40bfff84 	addi	r2,r8,-2
    b7d0:	bf2f883a 	add	r23,r23,fp
    b7d4:	202d883a 	mov	r22,r4
    b7d8:	003f9306 	br	b628 <__alt_data_end+0xfffeb628>
    b7dc:	013ff844 	movi	r4,-31
    b7e0:	2085c83a 	sub	r2,r4,r2
    b7e4:	8888d83a 	srl	r4,r17,r2
    b7e8:	00800804 	movi	r2,32
    b7ec:	18802126 	beq	r3,r2,b874 <__divdf3+0x8c4>
    b7f0:	00801004 	movi	r2,64
    b7f4:	10c5c83a 	sub	r2,r2,r3
    b7f8:	8884983a 	sll	r2,r17,r2
    b7fc:	1204b03a 	or	r2,r2,r8
    b800:	1004c03a 	cmpne	r2,r2,zero
    b804:	2084b03a 	or	r2,r4,r2
    b808:	144001cc 	andi	r17,r2,7
    b80c:	88000d1e 	bne	r17,zero,b844 <__divdf3+0x894>
    b810:	000b883a 	mov	r5,zero
    b814:	1024d0fa 	srli	r18,r2,3
    b818:	98c0004c 	andi	r3,r19,1
    b81c:	0005883a 	mov	r2,zero
    b820:	9464b03a 	or	r18,r18,r17
    b824:	003e4106 	br	b12c <__alt_data_end+0xfffeb12c>
    b828:	1007883a 	mov	r3,r2
    b82c:	0023883a 	mov	r17,zero
    b830:	880a927a 	slli	r5,r17,9
    b834:	1805883a 	mov	r2,r3
    b838:	8822977a 	slli	r17,r17,29
    b83c:	280ad33a 	srli	r5,r5,12
    b840:	003ff406 	br	b814 <__alt_data_end+0xfffeb814>
    b844:	10c003cc 	andi	r3,r2,15
    b848:	01000104 	movi	r4,4
    b84c:	193ff626 	beq	r3,r4,b828 <__alt_data_end+0xfffeb828>
    b850:	0023883a 	mov	r17,zero
    b854:	003fca06 	br	b780 <__alt_data_end+0xfffeb780>
    b858:	813fd336 	bltu	r16,r4,b7a8 <__alt_data_end+0xfffeb7a8>
    b85c:	1023883a 	mov	r17,r2
    b860:	003fa806 	br	b704 <__alt_data_end+0xfffeb704>
    b864:	b0ffd636 	bltu	r22,r3,b7c0 <__alt_data_end+0xfffeb7c0>
    b868:	1011883a 	mov	r8,r2
    b86c:	b0ff341e 	bne	r22,r3,b540 <__alt_data_end+0xfffeb540>
    b870:	003f3406 	br	b544 <__alt_data_end+0xfffeb544>
    b874:	0005883a 	mov	r2,zero
    b878:	003fe006 	br	b7fc <__alt_data_end+0xfffeb7fc>
    b87c:	00800434 	movhi	r2,16
    b880:	89400234 	orhi	r5,r17,8
    b884:	10bfffc4 	addi	r2,r2,-1
    b888:	b807883a 	mov	r3,r23
    b88c:	288a703a 	and	r5,r5,r2
    b890:	4025883a 	mov	r18,r8
    b894:	003e8206 	br	b2a0 <__alt_data_end+0xfffeb2a0>

0000b898 <__eqdf2>:
    b898:	2804d53a 	srli	r2,r5,20
    b89c:	3806d53a 	srli	r3,r7,20
    b8a0:	02000434 	movhi	r8,16
    b8a4:	423fffc4 	addi	r8,r8,-1
    b8a8:	1081ffcc 	andi	r2,r2,2047
    b8ac:	0281ffc4 	movi	r10,2047
    b8b0:	2a12703a 	and	r9,r5,r8
    b8b4:	18c1ffcc 	andi	r3,r3,2047
    b8b8:	3a10703a 	and	r8,r7,r8
    b8bc:	280ad7fa 	srli	r5,r5,31
    b8c0:	380ed7fa 	srli	r7,r7,31
    b8c4:	12801026 	beq	r2,r10,b908 <__eqdf2+0x70>
    b8c8:	0281ffc4 	movi	r10,2047
    b8cc:	1a800a26 	beq	r3,r10,b8f8 <__eqdf2+0x60>
    b8d0:	10c00226 	beq	r2,r3,b8dc <__eqdf2+0x44>
    b8d4:	00800044 	movi	r2,1
    b8d8:	f800283a 	ret
    b8dc:	4a3ffd1e 	bne	r9,r8,b8d4 <__alt_data_end+0xfffeb8d4>
    b8e0:	21bffc1e 	bne	r4,r6,b8d4 <__alt_data_end+0xfffeb8d4>
    b8e4:	29c00c26 	beq	r5,r7,b918 <__eqdf2+0x80>
    b8e8:	103ffa1e 	bne	r2,zero,b8d4 <__alt_data_end+0xfffeb8d4>
    b8ec:	2244b03a 	or	r2,r4,r9
    b8f0:	1004c03a 	cmpne	r2,r2,zero
    b8f4:	f800283a 	ret
    b8f8:	3214b03a 	or	r10,r6,r8
    b8fc:	503ff426 	beq	r10,zero,b8d0 <__alt_data_end+0xfffeb8d0>
    b900:	00800044 	movi	r2,1
    b904:	f800283a 	ret
    b908:	2254b03a 	or	r10,r4,r9
    b90c:	503fee26 	beq	r10,zero,b8c8 <__alt_data_end+0xfffeb8c8>
    b910:	00800044 	movi	r2,1
    b914:	f800283a 	ret
    b918:	0005883a 	mov	r2,zero
    b91c:	f800283a 	ret

0000b920 <__gedf2>:
    b920:	2804d53a 	srli	r2,r5,20
    b924:	3806d53a 	srli	r3,r7,20
    b928:	02000434 	movhi	r8,16
    b92c:	423fffc4 	addi	r8,r8,-1
    b930:	1081ffcc 	andi	r2,r2,2047
    b934:	0241ffc4 	movi	r9,2047
    b938:	2a14703a 	and	r10,r5,r8
    b93c:	18c1ffcc 	andi	r3,r3,2047
    b940:	3a10703a 	and	r8,r7,r8
    b944:	280ad7fa 	srli	r5,r5,31
    b948:	380ed7fa 	srli	r7,r7,31
    b94c:	12401d26 	beq	r2,r9,b9c4 <__gedf2+0xa4>
    b950:	0241ffc4 	movi	r9,2047
    b954:	1a401226 	beq	r3,r9,b9a0 <__gedf2+0x80>
    b958:	1000081e 	bne	r2,zero,b97c <__gedf2+0x5c>
    b95c:	2296b03a 	or	r11,r4,r10
    b960:	5813003a 	cmpeq	r9,r11,zero
    b964:	1800091e 	bne	r3,zero,b98c <__gedf2+0x6c>
    b968:	3218b03a 	or	r12,r6,r8
    b96c:	6000071e 	bne	r12,zero,b98c <__gedf2+0x6c>
    b970:	0005883a 	mov	r2,zero
    b974:	5800101e 	bne	r11,zero,b9b8 <__gedf2+0x98>
    b978:	f800283a 	ret
    b97c:	18000c1e 	bne	r3,zero,b9b0 <__gedf2+0x90>
    b980:	3212b03a 	or	r9,r6,r8
    b984:	48000c26 	beq	r9,zero,b9b8 <__gedf2+0x98>
    b988:	0013883a 	mov	r9,zero
    b98c:	39c03fcc 	andi	r7,r7,255
    b990:	48000826 	beq	r9,zero,b9b4 <__gedf2+0x94>
    b994:	38000926 	beq	r7,zero,b9bc <__gedf2+0x9c>
    b998:	00800044 	movi	r2,1
    b99c:	f800283a 	ret
    b9a0:	3212b03a 	or	r9,r6,r8
    b9a4:	483fec26 	beq	r9,zero,b958 <__alt_data_end+0xfffeb958>
    b9a8:	00bfff84 	movi	r2,-2
    b9ac:	f800283a 	ret
    b9b0:	39c03fcc 	andi	r7,r7,255
    b9b4:	29c00626 	beq	r5,r7,b9d0 <__gedf2+0xb0>
    b9b8:	283ff726 	beq	r5,zero,b998 <__alt_data_end+0xfffeb998>
    b9bc:	00bfffc4 	movi	r2,-1
    b9c0:	f800283a 	ret
    b9c4:	2292b03a 	or	r9,r4,r10
    b9c8:	483fe126 	beq	r9,zero,b950 <__alt_data_end+0xfffeb950>
    b9cc:	003ff606 	br	b9a8 <__alt_data_end+0xfffeb9a8>
    b9d0:	18bff916 	blt	r3,r2,b9b8 <__alt_data_end+0xfffeb9b8>
    b9d4:	10c00316 	blt	r2,r3,b9e4 <__gedf2+0xc4>
    b9d8:	42bff736 	bltu	r8,r10,b9b8 <__alt_data_end+0xfffeb9b8>
    b9dc:	52000326 	beq	r10,r8,b9ec <__gedf2+0xcc>
    b9e0:	5200042e 	bgeu	r10,r8,b9f4 <__gedf2+0xd4>
    b9e4:	283fec1e 	bne	r5,zero,b998 <__alt_data_end+0xfffeb998>
    b9e8:	003ff406 	br	b9bc <__alt_data_end+0xfffeb9bc>
    b9ec:	313ff236 	bltu	r6,r4,b9b8 <__alt_data_end+0xfffeb9b8>
    b9f0:	21bffc36 	bltu	r4,r6,b9e4 <__alt_data_end+0xfffeb9e4>
    b9f4:	0005883a 	mov	r2,zero
    b9f8:	f800283a 	ret

0000b9fc <__ledf2>:
    b9fc:	2804d53a 	srli	r2,r5,20
    ba00:	3810d53a 	srli	r8,r7,20
    ba04:	00c00434 	movhi	r3,16
    ba08:	18ffffc4 	addi	r3,r3,-1
    ba0c:	1081ffcc 	andi	r2,r2,2047
    ba10:	0241ffc4 	movi	r9,2047
    ba14:	28d4703a 	and	r10,r5,r3
    ba18:	4201ffcc 	andi	r8,r8,2047
    ba1c:	38c6703a 	and	r3,r7,r3
    ba20:	280ad7fa 	srli	r5,r5,31
    ba24:	380ed7fa 	srli	r7,r7,31
    ba28:	12401f26 	beq	r2,r9,baa8 <__ledf2+0xac>
    ba2c:	0241ffc4 	movi	r9,2047
    ba30:	42401426 	beq	r8,r9,ba84 <__ledf2+0x88>
    ba34:	1000091e 	bne	r2,zero,ba5c <__ledf2+0x60>
    ba38:	2296b03a 	or	r11,r4,r10
    ba3c:	5813003a 	cmpeq	r9,r11,zero
    ba40:	29403fcc 	andi	r5,r5,255
    ba44:	40000a1e 	bne	r8,zero,ba70 <__ledf2+0x74>
    ba48:	30d8b03a 	or	r12,r6,r3
    ba4c:	6000081e 	bne	r12,zero,ba70 <__ledf2+0x74>
    ba50:	0005883a 	mov	r2,zero
    ba54:	5800111e 	bne	r11,zero,ba9c <__ledf2+0xa0>
    ba58:	f800283a 	ret
    ba5c:	29403fcc 	andi	r5,r5,255
    ba60:	40000c1e 	bne	r8,zero,ba94 <__ledf2+0x98>
    ba64:	30d2b03a 	or	r9,r6,r3
    ba68:	48000c26 	beq	r9,zero,ba9c <__ledf2+0xa0>
    ba6c:	0013883a 	mov	r9,zero
    ba70:	39c03fcc 	andi	r7,r7,255
    ba74:	48000826 	beq	r9,zero,ba98 <__ledf2+0x9c>
    ba78:	38001126 	beq	r7,zero,bac0 <__ledf2+0xc4>
    ba7c:	00800044 	movi	r2,1
    ba80:	f800283a 	ret
    ba84:	30d2b03a 	or	r9,r6,r3
    ba88:	483fea26 	beq	r9,zero,ba34 <__alt_data_end+0xfffeba34>
    ba8c:	00800084 	movi	r2,2
    ba90:	f800283a 	ret
    ba94:	39c03fcc 	andi	r7,r7,255
    ba98:	39400726 	beq	r7,r5,bab8 <__ledf2+0xbc>
    ba9c:	2800081e 	bne	r5,zero,bac0 <__ledf2+0xc4>
    baa0:	00800044 	movi	r2,1
    baa4:	f800283a 	ret
    baa8:	2292b03a 	or	r9,r4,r10
    baac:	483fdf26 	beq	r9,zero,ba2c <__alt_data_end+0xfffeba2c>
    bab0:	00800084 	movi	r2,2
    bab4:	f800283a 	ret
    bab8:	4080030e 	bge	r8,r2,bac8 <__ledf2+0xcc>
    babc:	383fef26 	beq	r7,zero,ba7c <__alt_data_end+0xfffeba7c>
    bac0:	00bfffc4 	movi	r2,-1
    bac4:	f800283a 	ret
    bac8:	123feb16 	blt	r2,r8,ba78 <__alt_data_end+0xfffeba78>
    bacc:	1abff336 	bltu	r3,r10,ba9c <__alt_data_end+0xfffeba9c>
    bad0:	50c00326 	beq	r10,r3,bae0 <__ledf2+0xe4>
    bad4:	50c0042e 	bgeu	r10,r3,bae8 <__ledf2+0xec>
    bad8:	283fe81e 	bne	r5,zero,ba7c <__alt_data_end+0xfffeba7c>
    badc:	003ff806 	br	bac0 <__alt_data_end+0xfffebac0>
    bae0:	313fee36 	bltu	r6,r4,ba9c <__alt_data_end+0xfffeba9c>
    bae4:	21bffc36 	bltu	r4,r6,bad8 <__alt_data_end+0xfffebad8>
    bae8:	0005883a 	mov	r2,zero
    baec:	f800283a 	ret

0000baf0 <__muldf3>:
    baf0:	defff304 	addi	sp,sp,-52
    baf4:	2804d53a 	srli	r2,r5,20
    baf8:	dd800915 	stw	r22,36(sp)
    bafc:	282cd7fa 	srli	r22,r5,31
    bb00:	dc000315 	stw	r16,12(sp)
    bb04:	04000434 	movhi	r16,16
    bb08:	dd400815 	stw	r21,32(sp)
    bb0c:	dc800515 	stw	r18,20(sp)
    bb10:	843fffc4 	addi	r16,r16,-1
    bb14:	dfc00c15 	stw	ra,48(sp)
    bb18:	df000b15 	stw	fp,44(sp)
    bb1c:	ddc00a15 	stw	r23,40(sp)
    bb20:	dd000715 	stw	r20,28(sp)
    bb24:	dcc00615 	stw	r19,24(sp)
    bb28:	dc400415 	stw	r17,16(sp)
    bb2c:	1481ffcc 	andi	r18,r2,2047
    bb30:	2c20703a 	and	r16,r5,r16
    bb34:	b02b883a 	mov	r21,r22
    bb38:	b2403fcc 	andi	r9,r22,255
    bb3c:	90006026 	beq	r18,zero,bcc0 <__muldf3+0x1d0>
    bb40:	0081ffc4 	movi	r2,2047
    bb44:	2029883a 	mov	r20,r4
    bb48:	90803626 	beq	r18,r2,bc24 <__muldf3+0x134>
    bb4c:	80800434 	orhi	r2,r16,16
    bb50:	100490fa 	slli	r2,r2,3
    bb54:	2020d77a 	srli	r16,r4,29
    bb58:	202890fa 	slli	r20,r4,3
    bb5c:	94bf0044 	addi	r18,r18,-1023
    bb60:	80a0b03a 	or	r16,r16,r2
    bb64:	0027883a 	mov	r19,zero
    bb68:	0039883a 	mov	fp,zero
    bb6c:	3804d53a 	srli	r2,r7,20
    bb70:	382ed7fa 	srli	r23,r7,31
    bb74:	04400434 	movhi	r17,16
    bb78:	8c7fffc4 	addi	r17,r17,-1
    bb7c:	1081ffcc 	andi	r2,r2,2047
    bb80:	3011883a 	mov	r8,r6
    bb84:	3c62703a 	and	r17,r7,r17
    bb88:	ba803fcc 	andi	r10,r23,255
    bb8c:	10006d26 	beq	r2,zero,bd44 <__muldf3+0x254>
    bb90:	00c1ffc4 	movi	r3,2047
    bb94:	10c06526 	beq	r2,r3,bd2c <__muldf3+0x23c>
    bb98:	88c00434 	orhi	r3,r17,16
    bb9c:	180690fa 	slli	r3,r3,3
    bba0:	3022d77a 	srli	r17,r6,29
    bba4:	301090fa 	slli	r8,r6,3
    bba8:	10bf0044 	addi	r2,r2,-1023
    bbac:	88e2b03a 	or	r17,r17,r3
    bbb0:	000b883a 	mov	r5,zero
    bbb4:	9085883a 	add	r2,r18,r2
    bbb8:	2cc8b03a 	or	r4,r5,r19
    bbbc:	00c003c4 	movi	r3,15
    bbc0:	bdacf03a 	xor	r22,r23,r22
    bbc4:	12c00044 	addi	r11,r2,1
    bbc8:	19009936 	bltu	r3,r4,be30 <__muldf3+0x340>
    bbcc:	200890ba 	slli	r4,r4,2
    bbd0:	00c00074 	movhi	r3,1
    bbd4:	18eef904 	addi	r3,r3,-17436
    bbd8:	20c9883a 	add	r4,r4,r3
    bbdc:	20c00017 	ldw	r3,0(r4)
    bbe0:	1800683a 	jmp	r3
    bbe4:	0000be30 	cmpltui	zero,zero,760
    bbe8:	0000bc44 	movi	zero,753
    bbec:	0000bc44 	movi	zero,753
    bbf0:	0000bc40 	call	bc4 <___vfprintf_internal_r+0x3ec>
    bbf4:	0000be0c 	andi	zero,zero,760
    bbf8:	0000be0c 	andi	zero,zero,760
    bbfc:	0000bdf4 	movhi	zero,759
    bc00:	0000bc40 	call	bc4 <___vfprintf_internal_r+0x3ec>
    bc04:	0000be0c 	andi	zero,zero,760
    bc08:	0000bdf4 	movhi	zero,759
    bc0c:	0000be0c 	andi	zero,zero,760
    bc10:	0000bc40 	call	bc4 <___vfprintf_internal_r+0x3ec>
    bc14:	0000be1c 	xori	zero,zero,760
    bc18:	0000be1c 	xori	zero,zero,760
    bc1c:	0000be1c 	xori	zero,zero,760
    bc20:	0000c038 	rdprs	zero,zero,768
    bc24:	2404b03a 	or	r2,r4,r16
    bc28:	10006f1e 	bne	r2,zero,bde8 <__muldf3+0x2f8>
    bc2c:	04c00204 	movi	r19,8
    bc30:	0021883a 	mov	r16,zero
    bc34:	0029883a 	mov	r20,zero
    bc38:	07000084 	movi	fp,2
    bc3c:	003fcb06 	br	bb6c <__alt_data_end+0xfffebb6c>
    bc40:	502d883a 	mov	r22,r10
    bc44:	00800084 	movi	r2,2
    bc48:	28805726 	beq	r5,r2,bda8 <__muldf3+0x2b8>
    bc4c:	008000c4 	movi	r2,3
    bc50:	28816626 	beq	r5,r2,c1ec <__muldf3+0x6fc>
    bc54:	00800044 	movi	r2,1
    bc58:	2881411e 	bne	r5,r2,c160 <__muldf3+0x670>
    bc5c:	b02b883a 	mov	r21,r22
    bc60:	0005883a 	mov	r2,zero
    bc64:	000b883a 	mov	r5,zero
    bc68:	0029883a 	mov	r20,zero
    bc6c:	1004953a 	slli	r2,r2,20
    bc70:	a8c03fcc 	andi	r3,r21,255
    bc74:	04400434 	movhi	r17,16
    bc78:	8c7fffc4 	addi	r17,r17,-1
    bc7c:	180697fa 	slli	r3,r3,31
    bc80:	2c4a703a 	and	r5,r5,r17
    bc84:	288ab03a 	or	r5,r5,r2
    bc88:	28c6b03a 	or	r3,r5,r3
    bc8c:	a005883a 	mov	r2,r20
    bc90:	dfc00c17 	ldw	ra,48(sp)
    bc94:	df000b17 	ldw	fp,44(sp)
    bc98:	ddc00a17 	ldw	r23,40(sp)
    bc9c:	dd800917 	ldw	r22,36(sp)
    bca0:	dd400817 	ldw	r21,32(sp)
    bca4:	dd000717 	ldw	r20,28(sp)
    bca8:	dcc00617 	ldw	r19,24(sp)
    bcac:	dc800517 	ldw	r18,20(sp)
    bcb0:	dc400417 	ldw	r17,16(sp)
    bcb4:	dc000317 	ldw	r16,12(sp)
    bcb8:	dec00d04 	addi	sp,sp,52
    bcbc:	f800283a 	ret
    bcc0:	2404b03a 	or	r2,r4,r16
    bcc4:	2027883a 	mov	r19,r4
    bcc8:	10004226 	beq	r2,zero,bdd4 <__muldf3+0x2e4>
    bccc:	8000fc26 	beq	r16,zero,c0c0 <__muldf3+0x5d0>
    bcd0:	8009883a 	mov	r4,r16
    bcd4:	d9800215 	stw	r6,8(sp)
    bcd8:	d9c00015 	stw	r7,0(sp)
    bcdc:	da400115 	stw	r9,4(sp)
    bce0:	000cd080 	call	cd08 <__clzsi2>
    bce4:	d9800217 	ldw	r6,8(sp)
    bce8:	d9c00017 	ldw	r7,0(sp)
    bcec:	da400117 	ldw	r9,4(sp)
    bcf0:	113ffd44 	addi	r4,r2,-11
    bcf4:	00c00704 	movi	r3,28
    bcf8:	1900ed16 	blt	r3,r4,c0b0 <__muldf3+0x5c0>
    bcfc:	00c00744 	movi	r3,29
    bd00:	147ffe04 	addi	r17,r2,-8
    bd04:	1907c83a 	sub	r3,r3,r4
    bd08:	8460983a 	sll	r16,r16,r17
    bd0c:	98c6d83a 	srl	r3,r19,r3
    bd10:	9c68983a 	sll	r20,r19,r17
    bd14:	1c20b03a 	or	r16,r3,r16
    bd18:	1080fcc4 	addi	r2,r2,1011
    bd1c:	00a5c83a 	sub	r18,zero,r2
    bd20:	0027883a 	mov	r19,zero
    bd24:	0039883a 	mov	fp,zero
    bd28:	003f9006 	br	bb6c <__alt_data_end+0xfffebb6c>
    bd2c:	3446b03a 	or	r3,r6,r17
    bd30:	1800261e 	bne	r3,zero,bdcc <__muldf3+0x2dc>
    bd34:	0023883a 	mov	r17,zero
    bd38:	0011883a 	mov	r8,zero
    bd3c:	01400084 	movi	r5,2
    bd40:	003f9c06 	br	bbb4 <__alt_data_end+0xfffebbb4>
    bd44:	3446b03a 	or	r3,r6,r17
    bd48:	18001c26 	beq	r3,zero,bdbc <__muldf3+0x2cc>
    bd4c:	8800ce26 	beq	r17,zero,c088 <__muldf3+0x598>
    bd50:	8809883a 	mov	r4,r17
    bd54:	d9800215 	stw	r6,8(sp)
    bd58:	da400115 	stw	r9,4(sp)
    bd5c:	da800015 	stw	r10,0(sp)
    bd60:	000cd080 	call	cd08 <__clzsi2>
    bd64:	d9800217 	ldw	r6,8(sp)
    bd68:	da400117 	ldw	r9,4(sp)
    bd6c:	da800017 	ldw	r10,0(sp)
    bd70:	113ffd44 	addi	r4,r2,-11
    bd74:	00c00704 	movi	r3,28
    bd78:	1900bf16 	blt	r3,r4,c078 <__muldf3+0x588>
    bd7c:	00c00744 	movi	r3,29
    bd80:	123ffe04 	addi	r8,r2,-8
    bd84:	1907c83a 	sub	r3,r3,r4
    bd88:	8a22983a 	sll	r17,r17,r8
    bd8c:	30c6d83a 	srl	r3,r6,r3
    bd90:	3210983a 	sll	r8,r6,r8
    bd94:	1c62b03a 	or	r17,r3,r17
    bd98:	1080fcc4 	addi	r2,r2,1011
    bd9c:	0085c83a 	sub	r2,zero,r2
    bda0:	000b883a 	mov	r5,zero
    bda4:	003f8306 	br	bbb4 <__alt_data_end+0xfffebbb4>
    bda8:	b02b883a 	mov	r21,r22
    bdac:	0081ffc4 	movi	r2,2047
    bdb0:	000b883a 	mov	r5,zero
    bdb4:	0029883a 	mov	r20,zero
    bdb8:	003fac06 	br	bc6c <__alt_data_end+0xfffebc6c>
    bdbc:	0023883a 	mov	r17,zero
    bdc0:	0011883a 	mov	r8,zero
    bdc4:	01400044 	movi	r5,1
    bdc8:	003f7a06 	br	bbb4 <__alt_data_end+0xfffebbb4>
    bdcc:	014000c4 	movi	r5,3
    bdd0:	003f7806 	br	bbb4 <__alt_data_end+0xfffebbb4>
    bdd4:	04c00104 	movi	r19,4
    bdd8:	0021883a 	mov	r16,zero
    bddc:	0029883a 	mov	r20,zero
    bde0:	07000044 	movi	fp,1
    bde4:	003f6106 	br	bb6c <__alt_data_end+0xfffebb6c>
    bde8:	04c00304 	movi	r19,12
    bdec:	070000c4 	movi	fp,3
    bdf0:	003f5e06 	br	bb6c <__alt_data_end+0xfffebb6c>
    bdf4:	01400434 	movhi	r5,16
    bdf8:	002b883a 	mov	r21,zero
    bdfc:	297fffc4 	addi	r5,r5,-1
    be00:	053fffc4 	movi	r20,-1
    be04:	0081ffc4 	movi	r2,2047
    be08:	003f9806 	br	bc6c <__alt_data_end+0xfffebc6c>
    be0c:	8023883a 	mov	r17,r16
    be10:	a011883a 	mov	r8,r20
    be14:	e00b883a 	mov	r5,fp
    be18:	003f8a06 	br	bc44 <__alt_data_end+0xfffebc44>
    be1c:	8023883a 	mov	r17,r16
    be20:	a011883a 	mov	r8,r20
    be24:	482d883a 	mov	r22,r9
    be28:	e00b883a 	mov	r5,fp
    be2c:	003f8506 	br	bc44 <__alt_data_end+0xfffebc44>
    be30:	a00ad43a 	srli	r5,r20,16
    be34:	401ad43a 	srli	r13,r8,16
    be38:	a53fffcc 	andi	r20,r20,65535
    be3c:	423fffcc 	andi	r8,r8,65535
    be40:	4519383a 	mul	r12,r8,r20
    be44:	4147383a 	mul	r3,r8,r5
    be48:	6d09383a 	mul	r4,r13,r20
    be4c:	600cd43a 	srli	r6,r12,16
    be50:	2b5d383a 	mul	r14,r5,r13
    be54:	20c9883a 	add	r4,r4,r3
    be58:	310d883a 	add	r6,r6,r4
    be5c:	30c0022e 	bgeu	r6,r3,be68 <__muldf3+0x378>
    be60:	00c00074 	movhi	r3,1
    be64:	70dd883a 	add	r14,r14,r3
    be68:	8826d43a 	srli	r19,r17,16
    be6c:	8bffffcc 	andi	r15,r17,65535
    be70:	7d23383a 	mul	r17,r15,r20
    be74:	7949383a 	mul	r4,r15,r5
    be78:	9d29383a 	mul	r20,r19,r20
    be7c:	8814d43a 	srli	r10,r17,16
    be80:	3012943a 	slli	r9,r6,16
    be84:	a129883a 	add	r20,r20,r4
    be88:	633fffcc 	andi	r12,r12,65535
    be8c:	5515883a 	add	r10,r10,r20
    be90:	3006d43a 	srli	r3,r6,16
    be94:	4b13883a 	add	r9,r9,r12
    be98:	2ccb383a 	mul	r5,r5,r19
    be9c:	5100022e 	bgeu	r10,r4,bea8 <__muldf3+0x3b8>
    bea0:	01000074 	movhi	r4,1
    bea4:	290b883a 	add	r5,r5,r4
    bea8:	802ad43a 	srli	r21,r16,16
    beac:	843fffcc 	andi	r16,r16,65535
    beb0:	440d383a 	mul	r6,r8,r16
    beb4:	4565383a 	mul	r18,r8,r21
    beb8:	8349383a 	mul	r4,r16,r13
    bebc:	500e943a 	slli	r7,r10,16
    bec0:	3010d43a 	srli	r8,r6,16
    bec4:	5028d43a 	srli	r20,r10,16
    bec8:	2489883a 	add	r4,r4,r18
    becc:	8abfffcc 	andi	r10,r17,65535
    bed0:	3a95883a 	add	r10,r7,r10
    bed4:	4119883a 	add	r12,r8,r4
    bed8:	a169883a 	add	r20,r20,r5
    bedc:	1a87883a 	add	r3,r3,r10
    bee0:	6d5b383a 	mul	r13,r13,r21
    bee4:	6480022e 	bgeu	r12,r18,bef0 <__muldf3+0x400>
    bee8:	01000074 	movhi	r4,1
    beec:	691b883a 	add	r13,r13,r4
    bef0:	7c25383a 	mul	r18,r15,r16
    bef4:	7d4b383a 	mul	r5,r15,r21
    bef8:	84cf383a 	mul	r7,r16,r19
    befc:	901ed43a 	srli	r15,r18,16
    bf00:	6008d43a 	srli	r4,r12,16
    bf04:	6010943a 	slli	r8,r12,16
    bf08:	394f883a 	add	r7,r7,r5
    bf0c:	333fffcc 	andi	r12,r6,65535
    bf10:	79df883a 	add	r15,r15,r7
    bf14:	235b883a 	add	r13,r4,r13
    bf18:	9d63383a 	mul	r17,r19,r21
    bf1c:	4309883a 	add	r4,r8,r12
    bf20:	7940022e 	bgeu	r15,r5,bf2c <__muldf3+0x43c>
    bf24:	01400074 	movhi	r5,1
    bf28:	8963883a 	add	r17,r17,r5
    bf2c:	780a943a 	slli	r5,r15,16
    bf30:	91bfffcc 	andi	r6,r18,65535
    bf34:	70c7883a 	add	r3,r14,r3
    bf38:	298d883a 	add	r6,r5,r6
    bf3c:	1a8f803a 	cmpltu	r7,r3,r10
    bf40:	350b883a 	add	r5,r6,r20
    bf44:	20c7883a 	add	r3,r4,r3
    bf48:	3955883a 	add	r10,r7,r5
    bf4c:	1909803a 	cmpltu	r4,r3,r4
    bf50:	6a91883a 	add	r8,r13,r10
    bf54:	780cd43a 	srli	r6,r15,16
    bf58:	2219883a 	add	r12,r4,r8
    bf5c:	2d0b803a 	cmpltu	r5,r5,r20
    bf60:	51cf803a 	cmpltu	r7,r10,r7
    bf64:	29ceb03a 	or	r7,r5,r7
    bf68:	4351803a 	cmpltu	r8,r8,r13
    bf6c:	610b803a 	cmpltu	r5,r12,r4
    bf70:	4148b03a 	or	r4,r8,r5
    bf74:	398f883a 	add	r7,r7,r6
    bf78:	3909883a 	add	r4,r7,r4
    bf7c:	1810927a 	slli	r8,r3,9
    bf80:	2449883a 	add	r4,r4,r17
    bf84:	2008927a 	slli	r4,r4,9
    bf88:	6022d5fa 	srli	r17,r12,23
    bf8c:	1806d5fa 	srli	r3,r3,23
    bf90:	4252b03a 	or	r9,r8,r9
    bf94:	600a927a 	slli	r5,r12,9
    bf98:	4810c03a 	cmpne	r8,r9,zero
    bf9c:	2462b03a 	or	r17,r4,r17
    bfa0:	40c6b03a 	or	r3,r8,r3
    bfa4:	8900402c 	andhi	r4,r17,256
    bfa8:	1950b03a 	or	r8,r3,r5
    bfac:	20000726 	beq	r4,zero,bfcc <__muldf3+0x4dc>
    bfb0:	4006d07a 	srli	r3,r8,1
    bfb4:	880497fa 	slli	r2,r17,31
    bfb8:	4200004c 	andi	r8,r8,1
    bfbc:	8822d07a 	srli	r17,r17,1
    bfc0:	1a10b03a 	or	r8,r3,r8
    bfc4:	1210b03a 	or	r8,r2,r8
    bfc8:	5805883a 	mov	r2,r11
    bfcc:	1140ffc4 	addi	r5,r2,1023
    bfd0:	0140440e 	bge	zero,r5,c0e4 <__muldf3+0x5f4>
    bfd4:	40c001cc 	andi	r3,r8,7
    bfd8:	18000726 	beq	r3,zero,bff8 <__muldf3+0x508>
    bfdc:	40c003cc 	andi	r3,r8,15
    bfe0:	01000104 	movi	r4,4
    bfe4:	19000426 	beq	r3,r4,bff8 <__muldf3+0x508>
    bfe8:	4107883a 	add	r3,r8,r4
    bfec:	1a11803a 	cmpltu	r8,r3,r8
    bff0:	8a23883a 	add	r17,r17,r8
    bff4:	1811883a 	mov	r8,r3
    bff8:	88c0402c 	andhi	r3,r17,256
    bffc:	18000426 	beq	r3,zero,c010 <__muldf3+0x520>
    c000:	11410004 	addi	r5,r2,1024
    c004:	00bfc034 	movhi	r2,65280
    c008:	10bfffc4 	addi	r2,r2,-1
    c00c:	88a2703a 	and	r17,r17,r2
    c010:	0081ff84 	movi	r2,2046
    c014:	117f6416 	blt	r2,r5,bda8 <__alt_data_end+0xfffebda8>
    c018:	8828977a 	slli	r20,r17,29
    c01c:	4010d0fa 	srli	r8,r8,3
    c020:	8822927a 	slli	r17,r17,9
    c024:	2881ffcc 	andi	r2,r5,2047
    c028:	a228b03a 	or	r20,r20,r8
    c02c:	880ad33a 	srli	r5,r17,12
    c030:	b02b883a 	mov	r21,r22
    c034:	003f0d06 	br	bc6c <__alt_data_end+0xfffebc6c>
    c038:	8080022c 	andhi	r2,r16,8
    c03c:	10000926 	beq	r2,zero,c064 <__muldf3+0x574>
    c040:	8880022c 	andhi	r2,r17,8
    c044:	1000071e 	bne	r2,zero,c064 <__muldf3+0x574>
    c048:	00800434 	movhi	r2,16
    c04c:	89400234 	orhi	r5,r17,8
    c050:	10bfffc4 	addi	r2,r2,-1
    c054:	b82b883a 	mov	r21,r23
    c058:	288a703a 	and	r5,r5,r2
    c05c:	4029883a 	mov	r20,r8
    c060:	003f6806 	br	be04 <__alt_data_end+0xfffebe04>
    c064:	00800434 	movhi	r2,16
    c068:	81400234 	orhi	r5,r16,8
    c06c:	10bfffc4 	addi	r2,r2,-1
    c070:	288a703a 	and	r5,r5,r2
    c074:	003f6306 	br	be04 <__alt_data_end+0xfffebe04>
    c078:	147ff604 	addi	r17,r2,-40
    c07c:	3462983a 	sll	r17,r6,r17
    c080:	0011883a 	mov	r8,zero
    c084:	003f4406 	br	bd98 <__alt_data_end+0xfffebd98>
    c088:	3009883a 	mov	r4,r6
    c08c:	d9800215 	stw	r6,8(sp)
    c090:	da400115 	stw	r9,4(sp)
    c094:	da800015 	stw	r10,0(sp)
    c098:	000cd080 	call	cd08 <__clzsi2>
    c09c:	10800804 	addi	r2,r2,32
    c0a0:	da800017 	ldw	r10,0(sp)
    c0a4:	da400117 	ldw	r9,4(sp)
    c0a8:	d9800217 	ldw	r6,8(sp)
    c0ac:	003f3006 	br	bd70 <__alt_data_end+0xfffebd70>
    c0b0:	143ff604 	addi	r16,r2,-40
    c0b4:	9c20983a 	sll	r16,r19,r16
    c0b8:	0029883a 	mov	r20,zero
    c0bc:	003f1606 	br	bd18 <__alt_data_end+0xfffebd18>
    c0c0:	d9800215 	stw	r6,8(sp)
    c0c4:	d9c00015 	stw	r7,0(sp)
    c0c8:	da400115 	stw	r9,4(sp)
    c0cc:	000cd080 	call	cd08 <__clzsi2>
    c0d0:	10800804 	addi	r2,r2,32
    c0d4:	da400117 	ldw	r9,4(sp)
    c0d8:	d9c00017 	ldw	r7,0(sp)
    c0dc:	d9800217 	ldw	r6,8(sp)
    c0e0:	003f0306 	br	bcf0 <__alt_data_end+0xfffebcf0>
    c0e4:	00c00044 	movi	r3,1
    c0e8:	1947c83a 	sub	r3,r3,r5
    c0ec:	00800e04 	movi	r2,56
    c0f0:	10feda16 	blt	r2,r3,bc5c <__alt_data_end+0xfffebc5c>
    c0f4:	008007c4 	movi	r2,31
    c0f8:	10c01b16 	blt	r2,r3,c168 <__muldf3+0x678>
    c0fc:	00800804 	movi	r2,32
    c100:	10c5c83a 	sub	r2,r2,r3
    c104:	888a983a 	sll	r5,r17,r2
    c108:	40c8d83a 	srl	r4,r8,r3
    c10c:	4084983a 	sll	r2,r8,r2
    c110:	88e2d83a 	srl	r17,r17,r3
    c114:	2906b03a 	or	r3,r5,r4
    c118:	1004c03a 	cmpne	r2,r2,zero
    c11c:	1886b03a 	or	r3,r3,r2
    c120:	188001cc 	andi	r2,r3,7
    c124:	10000726 	beq	r2,zero,c144 <__muldf3+0x654>
    c128:	188003cc 	andi	r2,r3,15
    c12c:	01000104 	movi	r4,4
    c130:	11000426 	beq	r2,r4,c144 <__muldf3+0x654>
    c134:	1805883a 	mov	r2,r3
    c138:	10c00104 	addi	r3,r2,4
    c13c:	1885803a 	cmpltu	r2,r3,r2
    c140:	88a3883a 	add	r17,r17,r2
    c144:	8880202c 	andhi	r2,r17,128
    c148:	10001c26 	beq	r2,zero,c1bc <__muldf3+0x6cc>
    c14c:	b02b883a 	mov	r21,r22
    c150:	00800044 	movi	r2,1
    c154:	000b883a 	mov	r5,zero
    c158:	0029883a 	mov	r20,zero
    c15c:	003ec306 	br	bc6c <__alt_data_end+0xfffebc6c>
    c160:	5805883a 	mov	r2,r11
    c164:	003f9906 	br	bfcc <__alt_data_end+0xfffebfcc>
    c168:	00bff844 	movi	r2,-31
    c16c:	1145c83a 	sub	r2,r2,r5
    c170:	8888d83a 	srl	r4,r17,r2
    c174:	00800804 	movi	r2,32
    c178:	18801a26 	beq	r3,r2,c1e4 <__muldf3+0x6f4>
    c17c:	00801004 	movi	r2,64
    c180:	10c5c83a 	sub	r2,r2,r3
    c184:	8884983a 	sll	r2,r17,r2
    c188:	1204b03a 	or	r2,r2,r8
    c18c:	1004c03a 	cmpne	r2,r2,zero
    c190:	2084b03a 	or	r2,r4,r2
    c194:	144001cc 	andi	r17,r2,7
    c198:	88000d1e 	bne	r17,zero,c1d0 <__muldf3+0x6e0>
    c19c:	000b883a 	mov	r5,zero
    c1a0:	1028d0fa 	srli	r20,r2,3
    c1a4:	b02b883a 	mov	r21,r22
    c1a8:	0005883a 	mov	r2,zero
    c1ac:	a468b03a 	or	r20,r20,r17
    c1b0:	003eae06 	br	bc6c <__alt_data_end+0xfffebc6c>
    c1b4:	1007883a 	mov	r3,r2
    c1b8:	0023883a 	mov	r17,zero
    c1bc:	880a927a 	slli	r5,r17,9
    c1c0:	1805883a 	mov	r2,r3
    c1c4:	8822977a 	slli	r17,r17,29
    c1c8:	280ad33a 	srli	r5,r5,12
    c1cc:	003ff406 	br	c1a0 <__alt_data_end+0xfffec1a0>
    c1d0:	10c003cc 	andi	r3,r2,15
    c1d4:	01000104 	movi	r4,4
    c1d8:	193ff626 	beq	r3,r4,c1b4 <__alt_data_end+0xfffec1b4>
    c1dc:	0023883a 	mov	r17,zero
    c1e0:	003fd506 	br	c138 <__alt_data_end+0xfffec138>
    c1e4:	0005883a 	mov	r2,zero
    c1e8:	003fe706 	br	c188 <__alt_data_end+0xfffec188>
    c1ec:	00800434 	movhi	r2,16
    c1f0:	89400234 	orhi	r5,r17,8
    c1f4:	10bfffc4 	addi	r2,r2,-1
    c1f8:	b02b883a 	mov	r21,r22
    c1fc:	288a703a 	and	r5,r5,r2
    c200:	4029883a 	mov	r20,r8
    c204:	003eff06 	br	be04 <__alt_data_end+0xfffebe04>

0000c208 <__subdf3>:
    c208:	02000434 	movhi	r8,16
    c20c:	423fffc4 	addi	r8,r8,-1
    c210:	defffb04 	addi	sp,sp,-20
    c214:	2a14703a 	and	r10,r5,r8
    c218:	3812d53a 	srli	r9,r7,20
    c21c:	3a10703a 	and	r8,r7,r8
    c220:	2006d77a 	srli	r3,r4,29
    c224:	3004d77a 	srli	r2,r6,29
    c228:	dc000015 	stw	r16,0(sp)
    c22c:	501490fa 	slli	r10,r10,3
    c230:	2820d53a 	srli	r16,r5,20
    c234:	401090fa 	slli	r8,r8,3
    c238:	dc800215 	stw	r18,8(sp)
    c23c:	dc400115 	stw	r17,4(sp)
    c240:	dfc00415 	stw	ra,16(sp)
    c244:	202290fa 	slli	r17,r4,3
    c248:	dcc00315 	stw	r19,12(sp)
    c24c:	4a41ffcc 	andi	r9,r9,2047
    c250:	0101ffc4 	movi	r4,2047
    c254:	2824d7fa 	srli	r18,r5,31
    c258:	8401ffcc 	andi	r16,r16,2047
    c25c:	50c6b03a 	or	r3,r10,r3
    c260:	380ed7fa 	srli	r7,r7,31
    c264:	408ab03a 	or	r5,r8,r2
    c268:	300c90fa 	slli	r6,r6,3
    c26c:	49009626 	beq	r9,r4,c4c8 <__subdf3+0x2c0>
    c270:	39c0005c 	xori	r7,r7,1
    c274:	8245c83a 	sub	r2,r16,r9
    c278:	3c807426 	beq	r7,r18,c44c <__subdf3+0x244>
    c27c:	0080af0e 	bge	zero,r2,c53c <__subdf3+0x334>
    c280:	48002a1e 	bne	r9,zero,c32c <__subdf3+0x124>
    c284:	2988b03a 	or	r4,r5,r6
    c288:	20009a1e 	bne	r4,zero,c4f4 <__subdf3+0x2ec>
    c28c:	888001cc 	andi	r2,r17,7
    c290:	10000726 	beq	r2,zero,c2b0 <__subdf3+0xa8>
    c294:	888003cc 	andi	r2,r17,15
    c298:	01000104 	movi	r4,4
    c29c:	11000426 	beq	r2,r4,c2b0 <__subdf3+0xa8>
    c2a0:	890b883a 	add	r5,r17,r4
    c2a4:	2c63803a 	cmpltu	r17,r5,r17
    c2a8:	1c47883a 	add	r3,r3,r17
    c2ac:	2823883a 	mov	r17,r5
    c2b0:	1880202c 	andhi	r2,r3,128
    c2b4:	10005926 	beq	r2,zero,c41c <__subdf3+0x214>
    c2b8:	84000044 	addi	r16,r16,1
    c2bc:	0081ffc4 	movi	r2,2047
    c2c0:	8080be26 	beq	r16,r2,c5bc <__subdf3+0x3b4>
    c2c4:	017fe034 	movhi	r5,65408
    c2c8:	297fffc4 	addi	r5,r5,-1
    c2cc:	1946703a 	and	r3,r3,r5
    c2d0:	1804977a 	slli	r2,r3,29
    c2d4:	1806927a 	slli	r3,r3,9
    c2d8:	8822d0fa 	srli	r17,r17,3
    c2dc:	8401ffcc 	andi	r16,r16,2047
    c2e0:	180ad33a 	srli	r5,r3,12
    c2e4:	9100004c 	andi	r4,r18,1
    c2e8:	1444b03a 	or	r2,r2,r17
    c2ec:	80c1ffcc 	andi	r3,r16,2047
    c2f0:	1820953a 	slli	r16,r3,20
    c2f4:	20c03fcc 	andi	r3,r4,255
    c2f8:	180897fa 	slli	r4,r3,31
    c2fc:	00c00434 	movhi	r3,16
    c300:	18ffffc4 	addi	r3,r3,-1
    c304:	28c6703a 	and	r3,r5,r3
    c308:	1c06b03a 	or	r3,r3,r16
    c30c:	1906b03a 	or	r3,r3,r4
    c310:	dfc00417 	ldw	ra,16(sp)
    c314:	dcc00317 	ldw	r19,12(sp)
    c318:	dc800217 	ldw	r18,8(sp)
    c31c:	dc400117 	ldw	r17,4(sp)
    c320:	dc000017 	ldw	r16,0(sp)
    c324:	dec00504 	addi	sp,sp,20
    c328:	f800283a 	ret
    c32c:	0101ffc4 	movi	r4,2047
    c330:	813fd626 	beq	r16,r4,c28c <__alt_data_end+0xfffec28c>
    c334:	29402034 	orhi	r5,r5,128
    c338:	01000e04 	movi	r4,56
    c33c:	2080a316 	blt	r4,r2,c5cc <__subdf3+0x3c4>
    c340:	010007c4 	movi	r4,31
    c344:	2080c616 	blt	r4,r2,c660 <__subdf3+0x458>
    c348:	01000804 	movi	r4,32
    c34c:	2089c83a 	sub	r4,r4,r2
    c350:	2910983a 	sll	r8,r5,r4
    c354:	308ed83a 	srl	r7,r6,r2
    c358:	3108983a 	sll	r4,r6,r4
    c35c:	2884d83a 	srl	r2,r5,r2
    c360:	41ccb03a 	or	r6,r8,r7
    c364:	2008c03a 	cmpne	r4,r4,zero
    c368:	310cb03a 	or	r6,r6,r4
    c36c:	898dc83a 	sub	r6,r17,r6
    c370:	89a3803a 	cmpltu	r17,r17,r6
    c374:	1887c83a 	sub	r3,r3,r2
    c378:	1c47c83a 	sub	r3,r3,r17
    c37c:	3023883a 	mov	r17,r6
    c380:	1880202c 	andhi	r2,r3,128
    c384:	10002326 	beq	r2,zero,c414 <__subdf3+0x20c>
    c388:	04c02034 	movhi	r19,128
    c38c:	9cffffc4 	addi	r19,r19,-1
    c390:	1ce6703a 	and	r19,r3,r19
    c394:	98007a26 	beq	r19,zero,c580 <__subdf3+0x378>
    c398:	9809883a 	mov	r4,r19
    c39c:	000cd080 	call	cd08 <__clzsi2>
    c3a0:	113ffe04 	addi	r4,r2,-8
    c3a4:	00c007c4 	movi	r3,31
    c3a8:	19007b16 	blt	r3,r4,c598 <__subdf3+0x390>
    c3ac:	00800804 	movi	r2,32
    c3b0:	1105c83a 	sub	r2,r2,r4
    c3b4:	8884d83a 	srl	r2,r17,r2
    c3b8:	9906983a 	sll	r3,r19,r4
    c3bc:	8922983a 	sll	r17,r17,r4
    c3c0:	10c4b03a 	or	r2,r2,r3
    c3c4:	24007816 	blt	r4,r16,c5a8 <__subdf3+0x3a0>
    c3c8:	2421c83a 	sub	r16,r4,r16
    c3cc:	80c00044 	addi	r3,r16,1
    c3d0:	010007c4 	movi	r4,31
    c3d4:	20c09516 	blt	r4,r3,c62c <__subdf3+0x424>
    c3d8:	01400804 	movi	r5,32
    c3dc:	28cbc83a 	sub	r5,r5,r3
    c3e0:	88c8d83a 	srl	r4,r17,r3
    c3e4:	8962983a 	sll	r17,r17,r5
    c3e8:	114a983a 	sll	r5,r2,r5
    c3ec:	10c6d83a 	srl	r3,r2,r3
    c3f0:	8804c03a 	cmpne	r2,r17,zero
    c3f4:	290ab03a 	or	r5,r5,r4
    c3f8:	28a2b03a 	or	r17,r5,r2
    c3fc:	0021883a 	mov	r16,zero
    c400:	003fa206 	br	c28c <__alt_data_end+0xfffec28c>
    c404:	2090b03a 	or	r8,r4,r2
    c408:	40018e26 	beq	r8,zero,ca44 <__subdf3+0x83c>
    c40c:	1007883a 	mov	r3,r2
    c410:	2023883a 	mov	r17,r4
    c414:	888001cc 	andi	r2,r17,7
    c418:	103f9e1e 	bne	r2,zero,c294 <__alt_data_end+0xfffec294>
    c41c:	1804977a 	slli	r2,r3,29
    c420:	8822d0fa 	srli	r17,r17,3
    c424:	1810d0fa 	srli	r8,r3,3
    c428:	9100004c 	andi	r4,r18,1
    c42c:	1444b03a 	or	r2,r2,r17
    c430:	00c1ffc4 	movi	r3,2047
    c434:	80c02826 	beq	r16,r3,c4d8 <__subdf3+0x2d0>
    c438:	01400434 	movhi	r5,16
    c43c:	297fffc4 	addi	r5,r5,-1
    c440:	80e0703a 	and	r16,r16,r3
    c444:	414a703a 	and	r5,r8,r5
    c448:	003fa806 	br	c2ec <__alt_data_end+0xfffec2ec>
    c44c:	0080630e 	bge	zero,r2,c5dc <__subdf3+0x3d4>
    c450:	48003026 	beq	r9,zero,c514 <__subdf3+0x30c>
    c454:	0101ffc4 	movi	r4,2047
    c458:	813f8c26 	beq	r16,r4,c28c <__alt_data_end+0xfffec28c>
    c45c:	29402034 	orhi	r5,r5,128
    c460:	01000e04 	movi	r4,56
    c464:	2080a90e 	bge	r4,r2,c70c <__subdf3+0x504>
    c468:	298cb03a 	or	r6,r5,r6
    c46c:	3012c03a 	cmpne	r9,r6,zero
    c470:	0005883a 	mov	r2,zero
    c474:	4c53883a 	add	r9,r9,r17
    c478:	4c63803a 	cmpltu	r17,r9,r17
    c47c:	10c7883a 	add	r3,r2,r3
    c480:	88c7883a 	add	r3,r17,r3
    c484:	4823883a 	mov	r17,r9
    c488:	1880202c 	andhi	r2,r3,128
    c48c:	1000d026 	beq	r2,zero,c7d0 <__subdf3+0x5c8>
    c490:	84000044 	addi	r16,r16,1
    c494:	0081ffc4 	movi	r2,2047
    c498:	8080fe26 	beq	r16,r2,c894 <__subdf3+0x68c>
    c49c:	00bfe034 	movhi	r2,65408
    c4a0:	10bfffc4 	addi	r2,r2,-1
    c4a4:	1886703a 	and	r3,r3,r2
    c4a8:	880ad07a 	srli	r5,r17,1
    c4ac:	180497fa 	slli	r2,r3,31
    c4b0:	8900004c 	andi	r4,r17,1
    c4b4:	2922b03a 	or	r17,r5,r4
    c4b8:	1806d07a 	srli	r3,r3,1
    c4bc:	1462b03a 	or	r17,r2,r17
    c4c0:	3825883a 	mov	r18,r7
    c4c4:	003f7106 	br	c28c <__alt_data_end+0xfffec28c>
    c4c8:	2984b03a 	or	r2,r5,r6
    c4cc:	103f6826 	beq	r2,zero,c270 <__alt_data_end+0xfffec270>
    c4d0:	39c03fcc 	andi	r7,r7,255
    c4d4:	003f6706 	br	c274 <__alt_data_end+0xfffec274>
    c4d8:	4086b03a 	or	r3,r8,r2
    c4dc:	18015226 	beq	r3,zero,ca28 <__subdf3+0x820>
    c4e0:	00c00434 	movhi	r3,16
    c4e4:	41400234 	orhi	r5,r8,8
    c4e8:	18ffffc4 	addi	r3,r3,-1
    c4ec:	28ca703a 	and	r5,r5,r3
    c4f0:	003f7e06 	br	c2ec <__alt_data_end+0xfffec2ec>
    c4f4:	10bfffc4 	addi	r2,r2,-1
    c4f8:	1000491e 	bne	r2,zero,c620 <__subdf3+0x418>
    c4fc:	898fc83a 	sub	r7,r17,r6
    c500:	89e3803a 	cmpltu	r17,r17,r7
    c504:	1947c83a 	sub	r3,r3,r5
    c508:	1c47c83a 	sub	r3,r3,r17
    c50c:	3823883a 	mov	r17,r7
    c510:	003f9b06 	br	c380 <__alt_data_end+0xfffec380>
    c514:	2988b03a 	or	r4,r5,r6
    c518:	203f5c26 	beq	r4,zero,c28c <__alt_data_end+0xfffec28c>
    c51c:	10bfffc4 	addi	r2,r2,-1
    c520:	1000931e 	bne	r2,zero,c770 <__subdf3+0x568>
    c524:	898d883a 	add	r6,r17,r6
    c528:	3463803a 	cmpltu	r17,r6,r17
    c52c:	1947883a 	add	r3,r3,r5
    c530:	88c7883a 	add	r3,r17,r3
    c534:	3023883a 	mov	r17,r6
    c538:	003fd306 	br	c488 <__alt_data_end+0xfffec488>
    c53c:	1000541e 	bne	r2,zero,c690 <__subdf3+0x488>
    c540:	80800044 	addi	r2,r16,1
    c544:	1081ffcc 	andi	r2,r2,2047
    c548:	01000044 	movi	r4,1
    c54c:	2080a20e 	bge	r4,r2,c7d8 <__subdf3+0x5d0>
    c550:	8989c83a 	sub	r4,r17,r6
    c554:	8905803a 	cmpltu	r2,r17,r4
    c558:	1967c83a 	sub	r19,r3,r5
    c55c:	98a7c83a 	sub	r19,r19,r2
    c560:	9880202c 	andhi	r2,r19,128
    c564:	10006326 	beq	r2,zero,c6f4 <__subdf3+0x4ec>
    c568:	3463c83a 	sub	r17,r6,r17
    c56c:	28c7c83a 	sub	r3,r5,r3
    c570:	344d803a 	cmpltu	r6,r6,r17
    c574:	19a7c83a 	sub	r19,r3,r6
    c578:	3825883a 	mov	r18,r7
    c57c:	983f861e 	bne	r19,zero,c398 <__alt_data_end+0xfffec398>
    c580:	8809883a 	mov	r4,r17
    c584:	000cd080 	call	cd08 <__clzsi2>
    c588:	10800804 	addi	r2,r2,32
    c58c:	113ffe04 	addi	r4,r2,-8
    c590:	00c007c4 	movi	r3,31
    c594:	193f850e 	bge	r3,r4,c3ac <__alt_data_end+0xfffec3ac>
    c598:	10bff604 	addi	r2,r2,-40
    c59c:	8884983a 	sll	r2,r17,r2
    c5a0:	0023883a 	mov	r17,zero
    c5a4:	243f880e 	bge	r4,r16,c3c8 <__alt_data_end+0xfffec3c8>
    c5a8:	00ffe034 	movhi	r3,65408
    c5ac:	18ffffc4 	addi	r3,r3,-1
    c5b0:	8121c83a 	sub	r16,r16,r4
    c5b4:	10c6703a 	and	r3,r2,r3
    c5b8:	003f3406 	br	c28c <__alt_data_end+0xfffec28c>
    c5bc:	9100004c 	andi	r4,r18,1
    c5c0:	000b883a 	mov	r5,zero
    c5c4:	0005883a 	mov	r2,zero
    c5c8:	003f4806 	br	c2ec <__alt_data_end+0xfffec2ec>
    c5cc:	298cb03a 	or	r6,r5,r6
    c5d0:	300cc03a 	cmpne	r6,r6,zero
    c5d4:	0005883a 	mov	r2,zero
    c5d8:	003f6406 	br	c36c <__alt_data_end+0xfffec36c>
    c5dc:	10009a1e 	bne	r2,zero,c848 <__subdf3+0x640>
    c5e0:	82400044 	addi	r9,r16,1
    c5e4:	4881ffcc 	andi	r2,r9,2047
    c5e8:	02800044 	movi	r10,1
    c5ec:	5080670e 	bge	r10,r2,c78c <__subdf3+0x584>
    c5f0:	0081ffc4 	movi	r2,2047
    c5f4:	4880af26 	beq	r9,r2,c8b4 <__subdf3+0x6ac>
    c5f8:	898d883a 	add	r6,r17,r6
    c5fc:	1945883a 	add	r2,r3,r5
    c600:	3447803a 	cmpltu	r3,r6,r17
    c604:	1887883a 	add	r3,r3,r2
    c608:	182297fa 	slli	r17,r3,31
    c60c:	300cd07a 	srli	r6,r6,1
    c610:	1806d07a 	srli	r3,r3,1
    c614:	4821883a 	mov	r16,r9
    c618:	89a2b03a 	or	r17,r17,r6
    c61c:	003f1b06 	br	c28c <__alt_data_end+0xfffec28c>
    c620:	0101ffc4 	movi	r4,2047
    c624:	813f441e 	bne	r16,r4,c338 <__alt_data_end+0xfffec338>
    c628:	003f1806 	br	c28c <__alt_data_end+0xfffec28c>
    c62c:	843ff844 	addi	r16,r16,-31
    c630:	01400804 	movi	r5,32
    c634:	1408d83a 	srl	r4,r2,r16
    c638:	19405026 	beq	r3,r5,c77c <__subdf3+0x574>
    c63c:	01401004 	movi	r5,64
    c640:	28c7c83a 	sub	r3,r5,r3
    c644:	10c4983a 	sll	r2,r2,r3
    c648:	88a2b03a 	or	r17,r17,r2
    c64c:	8822c03a 	cmpne	r17,r17,zero
    c650:	2462b03a 	or	r17,r4,r17
    c654:	0007883a 	mov	r3,zero
    c658:	0021883a 	mov	r16,zero
    c65c:	003f6d06 	br	c414 <__alt_data_end+0xfffec414>
    c660:	11fff804 	addi	r7,r2,-32
    c664:	01000804 	movi	r4,32
    c668:	29ced83a 	srl	r7,r5,r7
    c66c:	11004526 	beq	r2,r4,c784 <__subdf3+0x57c>
    c670:	01001004 	movi	r4,64
    c674:	2089c83a 	sub	r4,r4,r2
    c678:	2904983a 	sll	r2,r5,r4
    c67c:	118cb03a 	or	r6,r2,r6
    c680:	300cc03a 	cmpne	r6,r6,zero
    c684:	398cb03a 	or	r6,r7,r6
    c688:	0005883a 	mov	r2,zero
    c68c:	003f3706 	br	c36c <__alt_data_end+0xfffec36c>
    c690:	80002a26 	beq	r16,zero,c73c <__subdf3+0x534>
    c694:	0101ffc4 	movi	r4,2047
    c698:	49006626 	beq	r9,r4,c834 <__subdf3+0x62c>
    c69c:	0085c83a 	sub	r2,zero,r2
    c6a0:	18c02034 	orhi	r3,r3,128
    c6a4:	01000e04 	movi	r4,56
    c6a8:	20807e16 	blt	r4,r2,c8a4 <__subdf3+0x69c>
    c6ac:	010007c4 	movi	r4,31
    c6b0:	2080e716 	blt	r4,r2,ca50 <__subdf3+0x848>
    c6b4:	01000804 	movi	r4,32
    c6b8:	2089c83a 	sub	r4,r4,r2
    c6bc:	1914983a 	sll	r10,r3,r4
    c6c0:	8890d83a 	srl	r8,r17,r2
    c6c4:	8908983a 	sll	r4,r17,r4
    c6c8:	1884d83a 	srl	r2,r3,r2
    c6cc:	5222b03a 	or	r17,r10,r8
    c6d0:	2006c03a 	cmpne	r3,r4,zero
    c6d4:	88e2b03a 	or	r17,r17,r3
    c6d8:	3463c83a 	sub	r17,r6,r17
    c6dc:	2885c83a 	sub	r2,r5,r2
    c6e0:	344d803a 	cmpltu	r6,r6,r17
    c6e4:	1187c83a 	sub	r3,r2,r6
    c6e8:	4821883a 	mov	r16,r9
    c6ec:	3825883a 	mov	r18,r7
    c6f0:	003f2306 	br	c380 <__alt_data_end+0xfffec380>
    c6f4:	24d0b03a 	or	r8,r4,r19
    c6f8:	40001b1e 	bne	r8,zero,c768 <__subdf3+0x560>
    c6fc:	0005883a 	mov	r2,zero
    c700:	0009883a 	mov	r4,zero
    c704:	0021883a 	mov	r16,zero
    c708:	003f4906 	br	c430 <__alt_data_end+0xfffec430>
    c70c:	010007c4 	movi	r4,31
    c710:	20803a16 	blt	r4,r2,c7fc <__subdf3+0x5f4>
    c714:	01000804 	movi	r4,32
    c718:	2089c83a 	sub	r4,r4,r2
    c71c:	2912983a 	sll	r9,r5,r4
    c720:	3090d83a 	srl	r8,r6,r2
    c724:	3108983a 	sll	r4,r6,r4
    c728:	2884d83a 	srl	r2,r5,r2
    c72c:	4a12b03a 	or	r9,r9,r8
    c730:	2008c03a 	cmpne	r4,r4,zero
    c734:	4912b03a 	or	r9,r9,r4
    c738:	003f4e06 	br	c474 <__alt_data_end+0xfffec474>
    c73c:	1c48b03a 	or	r4,r3,r17
    c740:	20003c26 	beq	r4,zero,c834 <__subdf3+0x62c>
    c744:	0084303a 	nor	r2,zero,r2
    c748:	1000381e 	bne	r2,zero,c82c <__subdf3+0x624>
    c74c:	3463c83a 	sub	r17,r6,r17
    c750:	28c5c83a 	sub	r2,r5,r3
    c754:	344d803a 	cmpltu	r6,r6,r17
    c758:	1187c83a 	sub	r3,r2,r6
    c75c:	4821883a 	mov	r16,r9
    c760:	3825883a 	mov	r18,r7
    c764:	003f0606 	br	c380 <__alt_data_end+0xfffec380>
    c768:	2023883a 	mov	r17,r4
    c76c:	003f0906 	br	c394 <__alt_data_end+0xfffec394>
    c770:	0101ffc4 	movi	r4,2047
    c774:	813f3a1e 	bne	r16,r4,c460 <__alt_data_end+0xfffec460>
    c778:	003ec406 	br	c28c <__alt_data_end+0xfffec28c>
    c77c:	0005883a 	mov	r2,zero
    c780:	003fb106 	br	c648 <__alt_data_end+0xfffec648>
    c784:	0005883a 	mov	r2,zero
    c788:	003fbc06 	br	c67c <__alt_data_end+0xfffec67c>
    c78c:	1c44b03a 	or	r2,r3,r17
    c790:	80008e1e 	bne	r16,zero,c9cc <__subdf3+0x7c4>
    c794:	1000c826 	beq	r2,zero,cab8 <__subdf3+0x8b0>
    c798:	2984b03a 	or	r2,r5,r6
    c79c:	103ebb26 	beq	r2,zero,c28c <__alt_data_end+0xfffec28c>
    c7a0:	8989883a 	add	r4,r17,r6
    c7a4:	1945883a 	add	r2,r3,r5
    c7a8:	2447803a 	cmpltu	r3,r4,r17
    c7ac:	1887883a 	add	r3,r3,r2
    c7b0:	1880202c 	andhi	r2,r3,128
    c7b4:	2023883a 	mov	r17,r4
    c7b8:	103f1626 	beq	r2,zero,c414 <__alt_data_end+0xfffec414>
    c7bc:	00bfe034 	movhi	r2,65408
    c7c0:	10bfffc4 	addi	r2,r2,-1
    c7c4:	5021883a 	mov	r16,r10
    c7c8:	1886703a 	and	r3,r3,r2
    c7cc:	003eaf06 	br	c28c <__alt_data_end+0xfffec28c>
    c7d0:	3825883a 	mov	r18,r7
    c7d4:	003f0f06 	br	c414 <__alt_data_end+0xfffec414>
    c7d8:	1c44b03a 	or	r2,r3,r17
    c7dc:	8000251e 	bne	r16,zero,c874 <__subdf3+0x66c>
    c7e0:	1000661e 	bne	r2,zero,c97c <__subdf3+0x774>
    c7e4:	2990b03a 	or	r8,r5,r6
    c7e8:	40009626 	beq	r8,zero,ca44 <__subdf3+0x83c>
    c7ec:	2807883a 	mov	r3,r5
    c7f0:	3023883a 	mov	r17,r6
    c7f4:	3825883a 	mov	r18,r7
    c7f8:	003ea406 	br	c28c <__alt_data_end+0xfffec28c>
    c7fc:	127ff804 	addi	r9,r2,-32
    c800:	01000804 	movi	r4,32
    c804:	2a52d83a 	srl	r9,r5,r9
    c808:	11008c26 	beq	r2,r4,ca3c <__subdf3+0x834>
    c80c:	01001004 	movi	r4,64
    c810:	2085c83a 	sub	r2,r4,r2
    c814:	2884983a 	sll	r2,r5,r2
    c818:	118cb03a 	or	r6,r2,r6
    c81c:	300cc03a 	cmpne	r6,r6,zero
    c820:	4992b03a 	or	r9,r9,r6
    c824:	0005883a 	mov	r2,zero
    c828:	003f1206 	br	c474 <__alt_data_end+0xfffec474>
    c82c:	0101ffc4 	movi	r4,2047
    c830:	493f9c1e 	bne	r9,r4,c6a4 <__alt_data_end+0xfffec6a4>
    c834:	2807883a 	mov	r3,r5
    c838:	3023883a 	mov	r17,r6
    c83c:	4821883a 	mov	r16,r9
    c840:	3825883a 	mov	r18,r7
    c844:	003e9106 	br	c28c <__alt_data_end+0xfffec28c>
    c848:	80001f1e 	bne	r16,zero,c8c8 <__subdf3+0x6c0>
    c84c:	1c48b03a 	or	r4,r3,r17
    c850:	20005a26 	beq	r4,zero,c9bc <__subdf3+0x7b4>
    c854:	0084303a 	nor	r2,zero,r2
    c858:	1000561e 	bne	r2,zero,c9b4 <__subdf3+0x7ac>
    c85c:	89a3883a 	add	r17,r17,r6
    c860:	1945883a 	add	r2,r3,r5
    c864:	898d803a 	cmpltu	r6,r17,r6
    c868:	3087883a 	add	r3,r6,r2
    c86c:	4821883a 	mov	r16,r9
    c870:	003f0506 	br	c488 <__alt_data_end+0xfffec488>
    c874:	10002b1e 	bne	r2,zero,c924 <__subdf3+0x71c>
    c878:	2984b03a 	or	r2,r5,r6
    c87c:	10008026 	beq	r2,zero,ca80 <__subdf3+0x878>
    c880:	2807883a 	mov	r3,r5
    c884:	3023883a 	mov	r17,r6
    c888:	3825883a 	mov	r18,r7
    c88c:	0401ffc4 	movi	r16,2047
    c890:	003e7e06 	br	c28c <__alt_data_end+0xfffec28c>
    c894:	3809883a 	mov	r4,r7
    c898:	0011883a 	mov	r8,zero
    c89c:	0005883a 	mov	r2,zero
    c8a0:	003ee306 	br	c430 <__alt_data_end+0xfffec430>
    c8a4:	1c62b03a 	or	r17,r3,r17
    c8a8:	8822c03a 	cmpne	r17,r17,zero
    c8ac:	0005883a 	mov	r2,zero
    c8b0:	003f8906 	br	c6d8 <__alt_data_end+0xfffec6d8>
    c8b4:	3809883a 	mov	r4,r7
    c8b8:	4821883a 	mov	r16,r9
    c8bc:	0011883a 	mov	r8,zero
    c8c0:	0005883a 	mov	r2,zero
    c8c4:	003eda06 	br	c430 <__alt_data_end+0xfffec430>
    c8c8:	0101ffc4 	movi	r4,2047
    c8cc:	49003b26 	beq	r9,r4,c9bc <__subdf3+0x7b4>
    c8d0:	0085c83a 	sub	r2,zero,r2
    c8d4:	18c02034 	orhi	r3,r3,128
    c8d8:	01000e04 	movi	r4,56
    c8dc:	20806e16 	blt	r4,r2,ca98 <__subdf3+0x890>
    c8e0:	010007c4 	movi	r4,31
    c8e4:	20807716 	blt	r4,r2,cac4 <__subdf3+0x8bc>
    c8e8:	01000804 	movi	r4,32
    c8ec:	2089c83a 	sub	r4,r4,r2
    c8f0:	1914983a 	sll	r10,r3,r4
    c8f4:	8890d83a 	srl	r8,r17,r2
    c8f8:	8908983a 	sll	r4,r17,r4
    c8fc:	1884d83a 	srl	r2,r3,r2
    c900:	5222b03a 	or	r17,r10,r8
    c904:	2006c03a 	cmpne	r3,r4,zero
    c908:	88e2b03a 	or	r17,r17,r3
    c90c:	89a3883a 	add	r17,r17,r6
    c910:	1145883a 	add	r2,r2,r5
    c914:	898d803a 	cmpltu	r6,r17,r6
    c918:	3087883a 	add	r3,r6,r2
    c91c:	4821883a 	mov	r16,r9
    c920:	003ed906 	br	c488 <__alt_data_end+0xfffec488>
    c924:	2984b03a 	or	r2,r5,r6
    c928:	10004226 	beq	r2,zero,ca34 <__subdf3+0x82c>
    c92c:	1808d0fa 	srli	r4,r3,3
    c930:	8822d0fa 	srli	r17,r17,3
    c934:	1806977a 	slli	r3,r3,29
    c938:	2080022c 	andhi	r2,r4,8
    c93c:	1c62b03a 	or	r17,r3,r17
    c940:	10000826 	beq	r2,zero,c964 <__subdf3+0x75c>
    c944:	2812d0fa 	srli	r9,r5,3
    c948:	4880022c 	andhi	r2,r9,8
    c94c:	1000051e 	bne	r2,zero,c964 <__subdf3+0x75c>
    c950:	300cd0fa 	srli	r6,r6,3
    c954:	2804977a 	slli	r2,r5,29
    c958:	4809883a 	mov	r4,r9
    c95c:	3825883a 	mov	r18,r7
    c960:	11a2b03a 	or	r17,r2,r6
    c964:	8806d77a 	srli	r3,r17,29
    c968:	200890fa 	slli	r4,r4,3
    c96c:	882290fa 	slli	r17,r17,3
    c970:	0401ffc4 	movi	r16,2047
    c974:	1906b03a 	or	r3,r3,r4
    c978:	003e4406 	br	c28c <__alt_data_end+0xfffec28c>
    c97c:	2984b03a 	or	r2,r5,r6
    c980:	103e4226 	beq	r2,zero,c28c <__alt_data_end+0xfffec28c>
    c984:	8989c83a 	sub	r4,r17,r6
    c988:	8911803a 	cmpltu	r8,r17,r4
    c98c:	1945c83a 	sub	r2,r3,r5
    c990:	1205c83a 	sub	r2,r2,r8
    c994:	1200202c 	andhi	r8,r2,128
    c998:	403e9a26 	beq	r8,zero,c404 <__alt_data_end+0xfffec404>
    c99c:	3463c83a 	sub	r17,r6,r17
    c9a0:	28c5c83a 	sub	r2,r5,r3
    c9a4:	344d803a 	cmpltu	r6,r6,r17
    c9a8:	1187c83a 	sub	r3,r2,r6
    c9ac:	3825883a 	mov	r18,r7
    c9b0:	003e3606 	br	c28c <__alt_data_end+0xfffec28c>
    c9b4:	0101ffc4 	movi	r4,2047
    c9b8:	493fc71e 	bne	r9,r4,c8d8 <__alt_data_end+0xfffec8d8>
    c9bc:	2807883a 	mov	r3,r5
    c9c0:	3023883a 	mov	r17,r6
    c9c4:	4821883a 	mov	r16,r9
    c9c8:	003e3006 	br	c28c <__alt_data_end+0xfffec28c>
    c9cc:	10003626 	beq	r2,zero,caa8 <__subdf3+0x8a0>
    c9d0:	2984b03a 	or	r2,r5,r6
    c9d4:	10001726 	beq	r2,zero,ca34 <__subdf3+0x82c>
    c9d8:	1808d0fa 	srli	r4,r3,3
    c9dc:	8822d0fa 	srli	r17,r17,3
    c9e0:	1806977a 	slli	r3,r3,29
    c9e4:	2080022c 	andhi	r2,r4,8
    c9e8:	1c62b03a 	or	r17,r3,r17
    c9ec:	10000726 	beq	r2,zero,ca0c <__subdf3+0x804>
    c9f0:	2812d0fa 	srli	r9,r5,3
    c9f4:	4880022c 	andhi	r2,r9,8
    c9f8:	1000041e 	bne	r2,zero,ca0c <__subdf3+0x804>
    c9fc:	300cd0fa 	srli	r6,r6,3
    ca00:	2804977a 	slli	r2,r5,29
    ca04:	4809883a 	mov	r4,r9
    ca08:	11a2b03a 	or	r17,r2,r6
    ca0c:	8806d77a 	srli	r3,r17,29
    ca10:	200890fa 	slli	r4,r4,3
    ca14:	882290fa 	slli	r17,r17,3
    ca18:	3825883a 	mov	r18,r7
    ca1c:	1906b03a 	or	r3,r3,r4
    ca20:	0401ffc4 	movi	r16,2047
    ca24:	003e1906 	br	c28c <__alt_data_end+0xfffec28c>
    ca28:	000b883a 	mov	r5,zero
    ca2c:	0005883a 	mov	r2,zero
    ca30:	003e2e06 	br	c2ec <__alt_data_end+0xfffec2ec>
    ca34:	0401ffc4 	movi	r16,2047
    ca38:	003e1406 	br	c28c <__alt_data_end+0xfffec28c>
    ca3c:	0005883a 	mov	r2,zero
    ca40:	003f7506 	br	c818 <__alt_data_end+0xfffec818>
    ca44:	0005883a 	mov	r2,zero
    ca48:	0009883a 	mov	r4,zero
    ca4c:	003e7806 	br	c430 <__alt_data_end+0xfffec430>
    ca50:	123ff804 	addi	r8,r2,-32
    ca54:	01000804 	movi	r4,32
    ca58:	1a10d83a 	srl	r8,r3,r8
    ca5c:	11002526 	beq	r2,r4,caf4 <__subdf3+0x8ec>
    ca60:	01001004 	movi	r4,64
    ca64:	2085c83a 	sub	r2,r4,r2
    ca68:	1884983a 	sll	r2,r3,r2
    ca6c:	1444b03a 	or	r2,r2,r17
    ca70:	1004c03a 	cmpne	r2,r2,zero
    ca74:	40a2b03a 	or	r17,r8,r2
    ca78:	0005883a 	mov	r2,zero
    ca7c:	003f1606 	br	c6d8 <__alt_data_end+0xfffec6d8>
    ca80:	02000434 	movhi	r8,16
    ca84:	0009883a 	mov	r4,zero
    ca88:	423fffc4 	addi	r8,r8,-1
    ca8c:	00bfffc4 	movi	r2,-1
    ca90:	0401ffc4 	movi	r16,2047
    ca94:	003e6606 	br	c430 <__alt_data_end+0xfffec430>
    ca98:	1c62b03a 	or	r17,r3,r17
    ca9c:	8822c03a 	cmpne	r17,r17,zero
    caa0:	0005883a 	mov	r2,zero
    caa4:	003f9906 	br	c90c <__alt_data_end+0xfffec90c>
    caa8:	2807883a 	mov	r3,r5
    caac:	3023883a 	mov	r17,r6
    cab0:	0401ffc4 	movi	r16,2047
    cab4:	003df506 	br	c28c <__alt_data_end+0xfffec28c>
    cab8:	2807883a 	mov	r3,r5
    cabc:	3023883a 	mov	r17,r6
    cac0:	003df206 	br	c28c <__alt_data_end+0xfffec28c>
    cac4:	123ff804 	addi	r8,r2,-32
    cac8:	01000804 	movi	r4,32
    cacc:	1a10d83a 	srl	r8,r3,r8
    cad0:	11000a26 	beq	r2,r4,cafc <__subdf3+0x8f4>
    cad4:	01001004 	movi	r4,64
    cad8:	2085c83a 	sub	r2,r4,r2
    cadc:	1884983a 	sll	r2,r3,r2
    cae0:	1444b03a 	or	r2,r2,r17
    cae4:	1004c03a 	cmpne	r2,r2,zero
    cae8:	40a2b03a 	or	r17,r8,r2
    caec:	0005883a 	mov	r2,zero
    caf0:	003f8606 	br	c90c <__alt_data_end+0xfffec90c>
    caf4:	0005883a 	mov	r2,zero
    caf8:	003fdc06 	br	ca6c <__alt_data_end+0xfffeca6c>
    cafc:	0005883a 	mov	r2,zero
    cb00:	003ff706 	br	cae0 <__alt_data_end+0xfffecae0>

0000cb04 <__fixdfsi>:
    cb04:	280cd53a 	srli	r6,r5,20
    cb08:	00c00434 	movhi	r3,16
    cb0c:	18ffffc4 	addi	r3,r3,-1
    cb10:	3181ffcc 	andi	r6,r6,2047
    cb14:	01c0ff84 	movi	r7,1022
    cb18:	28c6703a 	and	r3,r5,r3
    cb1c:	280ad7fa 	srli	r5,r5,31
    cb20:	3980120e 	bge	r7,r6,cb6c <__fixdfsi+0x68>
    cb24:	00810744 	movi	r2,1053
    cb28:	11800c16 	blt	r2,r6,cb5c <__fixdfsi+0x58>
    cb2c:	00810cc4 	movi	r2,1075
    cb30:	1185c83a 	sub	r2,r2,r6
    cb34:	01c007c4 	movi	r7,31
    cb38:	18c00434 	orhi	r3,r3,16
    cb3c:	38800d16 	blt	r7,r2,cb74 <__fixdfsi+0x70>
    cb40:	31befb44 	addi	r6,r6,-1043
    cb44:	2084d83a 	srl	r2,r4,r2
    cb48:	1986983a 	sll	r3,r3,r6
    cb4c:	1884b03a 	or	r2,r3,r2
    cb50:	28000726 	beq	r5,zero,cb70 <__fixdfsi+0x6c>
    cb54:	0085c83a 	sub	r2,zero,r2
    cb58:	f800283a 	ret
    cb5c:	00a00034 	movhi	r2,32768
    cb60:	10bfffc4 	addi	r2,r2,-1
    cb64:	2885883a 	add	r2,r5,r2
    cb68:	f800283a 	ret
    cb6c:	0005883a 	mov	r2,zero
    cb70:	f800283a 	ret
    cb74:	008104c4 	movi	r2,1043
    cb78:	1185c83a 	sub	r2,r2,r6
    cb7c:	1884d83a 	srl	r2,r3,r2
    cb80:	003ff306 	br	cb50 <__alt_data_end+0xfffecb50>

0000cb84 <__floatsidf>:
    cb84:	defffd04 	addi	sp,sp,-12
    cb88:	dfc00215 	stw	ra,8(sp)
    cb8c:	dc400115 	stw	r17,4(sp)
    cb90:	dc000015 	stw	r16,0(sp)
    cb94:	20002b26 	beq	r4,zero,cc44 <__floatsidf+0xc0>
    cb98:	2023883a 	mov	r17,r4
    cb9c:	2020d7fa 	srli	r16,r4,31
    cba0:	20002d16 	blt	r4,zero,cc58 <__floatsidf+0xd4>
    cba4:	8809883a 	mov	r4,r17
    cba8:	000cd080 	call	cd08 <__clzsi2>
    cbac:	01410784 	movi	r5,1054
    cbb0:	288bc83a 	sub	r5,r5,r2
    cbb4:	01010cc4 	movi	r4,1075
    cbb8:	2149c83a 	sub	r4,r4,r5
    cbbc:	00c007c4 	movi	r3,31
    cbc0:	1900160e 	bge	r3,r4,cc1c <__floatsidf+0x98>
    cbc4:	00c104c4 	movi	r3,1043
    cbc8:	1947c83a 	sub	r3,r3,r5
    cbcc:	88c6983a 	sll	r3,r17,r3
    cbd0:	00800434 	movhi	r2,16
    cbd4:	10bfffc4 	addi	r2,r2,-1
    cbd8:	1886703a 	and	r3,r3,r2
    cbdc:	2941ffcc 	andi	r5,r5,2047
    cbe0:	800d883a 	mov	r6,r16
    cbe4:	0005883a 	mov	r2,zero
    cbe8:	280a953a 	slli	r5,r5,20
    cbec:	31803fcc 	andi	r6,r6,255
    cbf0:	01000434 	movhi	r4,16
    cbf4:	300c97fa 	slli	r6,r6,31
    cbf8:	213fffc4 	addi	r4,r4,-1
    cbfc:	1906703a 	and	r3,r3,r4
    cc00:	1946b03a 	or	r3,r3,r5
    cc04:	1986b03a 	or	r3,r3,r6
    cc08:	dfc00217 	ldw	ra,8(sp)
    cc0c:	dc400117 	ldw	r17,4(sp)
    cc10:	dc000017 	ldw	r16,0(sp)
    cc14:	dec00304 	addi	sp,sp,12
    cc18:	f800283a 	ret
    cc1c:	00c002c4 	movi	r3,11
    cc20:	1887c83a 	sub	r3,r3,r2
    cc24:	88c6d83a 	srl	r3,r17,r3
    cc28:	8904983a 	sll	r2,r17,r4
    cc2c:	01000434 	movhi	r4,16
    cc30:	213fffc4 	addi	r4,r4,-1
    cc34:	2941ffcc 	andi	r5,r5,2047
    cc38:	1906703a 	and	r3,r3,r4
    cc3c:	800d883a 	mov	r6,r16
    cc40:	003fe906 	br	cbe8 <__alt_data_end+0xfffecbe8>
    cc44:	000d883a 	mov	r6,zero
    cc48:	000b883a 	mov	r5,zero
    cc4c:	0007883a 	mov	r3,zero
    cc50:	0005883a 	mov	r2,zero
    cc54:	003fe406 	br	cbe8 <__alt_data_end+0xfffecbe8>
    cc58:	0123c83a 	sub	r17,zero,r4
    cc5c:	003fd106 	br	cba4 <__alt_data_end+0xfffecba4>

0000cc60 <__floatunsidf>:
    cc60:	defffe04 	addi	sp,sp,-8
    cc64:	dc000015 	stw	r16,0(sp)
    cc68:	dfc00115 	stw	ra,4(sp)
    cc6c:	2021883a 	mov	r16,r4
    cc70:	20002226 	beq	r4,zero,ccfc <__floatunsidf+0x9c>
    cc74:	000cd080 	call	cd08 <__clzsi2>
    cc78:	01010784 	movi	r4,1054
    cc7c:	2089c83a 	sub	r4,r4,r2
    cc80:	01810cc4 	movi	r6,1075
    cc84:	310dc83a 	sub	r6,r6,r4
    cc88:	00c007c4 	movi	r3,31
    cc8c:	1980120e 	bge	r3,r6,ccd8 <__floatunsidf+0x78>
    cc90:	00c104c4 	movi	r3,1043
    cc94:	1907c83a 	sub	r3,r3,r4
    cc98:	80ca983a 	sll	r5,r16,r3
    cc9c:	00800434 	movhi	r2,16
    cca0:	10bfffc4 	addi	r2,r2,-1
    cca4:	2101ffcc 	andi	r4,r4,2047
    cca8:	0021883a 	mov	r16,zero
    ccac:	288a703a 	and	r5,r5,r2
    ccb0:	2008953a 	slli	r4,r4,20
    ccb4:	00c00434 	movhi	r3,16
    ccb8:	18ffffc4 	addi	r3,r3,-1
    ccbc:	28c6703a 	and	r3,r5,r3
    ccc0:	8005883a 	mov	r2,r16
    ccc4:	1906b03a 	or	r3,r3,r4
    ccc8:	dfc00117 	ldw	ra,4(sp)
    cccc:	dc000017 	ldw	r16,0(sp)
    ccd0:	dec00204 	addi	sp,sp,8
    ccd4:	f800283a 	ret
    ccd8:	00c002c4 	movi	r3,11
    ccdc:	188bc83a 	sub	r5,r3,r2
    cce0:	814ad83a 	srl	r5,r16,r5
    cce4:	00c00434 	movhi	r3,16
    cce8:	18ffffc4 	addi	r3,r3,-1
    ccec:	81a0983a 	sll	r16,r16,r6
    ccf0:	2101ffcc 	andi	r4,r4,2047
    ccf4:	28ca703a 	and	r5,r5,r3
    ccf8:	003fed06 	br	ccb0 <__alt_data_end+0xfffeccb0>
    ccfc:	0009883a 	mov	r4,zero
    cd00:	000b883a 	mov	r5,zero
    cd04:	003fea06 	br	ccb0 <__alt_data_end+0xfffeccb0>

0000cd08 <__clzsi2>:
    cd08:	00bfffd4 	movui	r2,65535
    cd0c:	11000536 	bltu	r2,r4,cd24 <__clzsi2+0x1c>
    cd10:	00803fc4 	movi	r2,255
    cd14:	11000f36 	bltu	r2,r4,cd54 <__clzsi2+0x4c>
    cd18:	00800804 	movi	r2,32
    cd1c:	0007883a 	mov	r3,zero
    cd20:	00000506 	br	cd38 <__clzsi2+0x30>
    cd24:	00804034 	movhi	r2,256
    cd28:	10bfffc4 	addi	r2,r2,-1
    cd2c:	11000c2e 	bgeu	r2,r4,cd60 <__clzsi2+0x58>
    cd30:	00800204 	movi	r2,8
    cd34:	00c00604 	movi	r3,24
    cd38:	20c8d83a 	srl	r4,r4,r3
    cd3c:	00c00074 	movhi	r3,1
    cd40:	18fdb004 	addi	r3,r3,-2368
    cd44:	1909883a 	add	r4,r3,r4
    cd48:	20c00003 	ldbu	r3,0(r4)
    cd4c:	10c5c83a 	sub	r2,r2,r3
    cd50:	f800283a 	ret
    cd54:	00800604 	movi	r2,24
    cd58:	00c00204 	movi	r3,8
    cd5c:	003ff606 	br	cd38 <__alt_data_end+0xfffecd38>
    cd60:	00800404 	movi	r2,16
    cd64:	1007883a 	mov	r3,r2
    cd68:	003ff306 	br	cd38 <__alt_data_end+0xfffecd38>

0000cd6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cd6c:	defffe04 	addi	sp,sp,-8
    cd70:	dfc00115 	stw	ra,4(sp)
    cd74:	df000015 	stw	fp,0(sp)
    cd78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cd7c:	d0a00b17 	ldw	r2,-32724(gp)
    cd80:	10000326 	beq	r2,zero,cd90 <alt_get_errno+0x24>
    cd84:	d0a00b17 	ldw	r2,-32724(gp)
    cd88:	103ee83a 	callr	r2
    cd8c:	00000106 	br	cd94 <alt_get_errno+0x28>
    cd90:	d0a6d104 	addi	r2,gp,-25788
}
    cd94:	e037883a 	mov	sp,fp
    cd98:	dfc00117 	ldw	ra,4(sp)
    cd9c:	df000017 	ldw	fp,0(sp)
    cda0:	dec00204 	addi	sp,sp,8
    cda4:	f800283a 	ret

0000cda8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cda8:	defffb04 	addi	sp,sp,-20
    cdac:	dfc00415 	stw	ra,16(sp)
    cdb0:	df000315 	stw	fp,12(sp)
    cdb4:	df000304 	addi	fp,sp,12
    cdb8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cdbc:	e0bfff17 	ldw	r2,-4(fp)
    cdc0:	10000616 	blt	r2,zero,cddc <close+0x34>
    cdc4:	e0bfff17 	ldw	r2,-4(fp)
    cdc8:	10c00324 	muli	r3,r2,12
    cdcc:	00800074 	movhi	r2,1
    cdd0:	10803004 	addi	r2,r2,192
    cdd4:	1885883a 	add	r2,r3,r2
    cdd8:	00000106 	br	cde0 <close+0x38>
    cddc:	0005883a 	mov	r2,zero
    cde0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cde4:	e0bffd17 	ldw	r2,-12(fp)
    cde8:	10001926 	beq	r2,zero,ce50 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cdec:	e0bffd17 	ldw	r2,-12(fp)
    cdf0:	10800017 	ldw	r2,0(r2)
    cdf4:	10800417 	ldw	r2,16(r2)
    cdf8:	10000626 	beq	r2,zero,ce14 <close+0x6c>
    cdfc:	e0bffd17 	ldw	r2,-12(fp)
    ce00:	10800017 	ldw	r2,0(r2)
    ce04:	10800417 	ldw	r2,16(r2)
    ce08:	e13ffd17 	ldw	r4,-12(fp)
    ce0c:	103ee83a 	callr	r2
    ce10:	00000106 	br	ce18 <close+0x70>
    ce14:	0005883a 	mov	r2,zero
    ce18:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ce1c:	e13fff17 	ldw	r4,-4(fp)
    ce20:	000d4680 	call	d468 <alt_release_fd>
    if (rval < 0)
    ce24:	e0bffe17 	ldw	r2,-8(fp)
    ce28:	1000070e 	bge	r2,zero,ce48 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ce2c:	000cd6c0 	call	cd6c <alt_get_errno>
    ce30:	1007883a 	mov	r3,r2
    ce34:	e0bffe17 	ldw	r2,-8(fp)
    ce38:	0085c83a 	sub	r2,zero,r2
    ce3c:	18800015 	stw	r2,0(r3)
      return -1;
    ce40:	00bfffc4 	movi	r2,-1
    ce44:	00000706 	br	ce64 <close+0xbc>
    }
    return 0;
    ce48:	0005883a 	mov	r2,zero
    ce4c:	00000506 	br	ce64 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ce50:	000cd6c0 	call	cd6c <alt_get_errno>
    ce54:	1007883a 	mov	r3,r2
    ce58:	00801444 	movi	r2,81
    ce5c:	18800015 	stw	r2,0(r3)
    return -1;
    ce60:	00bfffc4 	movi	r2,-1
  }
}
    ce64:	e037883a 	mov	sp,fp
    ce68:	dfc00117 	ldw	ra,4(sp)
    ce6c:	df000017 	ldw	fp,0(sp)
    ce70:	dec00204 	addi	sp,sp,8
    ce74:	f800283a 	ret

0000ce78 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ce78:	defffc04 	addi	sp,sp,-16
    ce7c:	df000315 	stw	fp,12(sp)
    ce80:	df000304 	addi	fp,sp,12
    ce84:	e13ffd15 	stw	r4,-12(fp)
    ce88:	e17ffe15 	stw	r5,-8(fp)
    ce8c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ce90:	e0bfff17 	ldw	r2,-4(fp)
}
    ce94:	e037883a 	mov	sp,fp
    ce98:	df000017 	ldw	fp,0(sp)
    ce9c:	dec00104 	addi	sp,sp,4
    cea0:	f800283a 	ret

0000cea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cea4:	defffe04 	addi	sp,sp,-8
    cea8:	dfc00115 	stw	ra,4(sp)
    ceac:	df000015 	stw	fp,0(sp)
    ceb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ceb4:	d0a00b17 	ldw	r2,-32724(gp)
    ceb8:	10000326 	beq	r2,zero,cec8 <alt_get_errno+0x24>
    cebc:	d0a00b17 	ldw	r2,-32724(gp)
    cec0:	103ee83a 	callr	r2
    cec4:	00000106 	br	cecc <alt_get_errno+0x28>
    cec8:	d0a6d104 	addi	r2,gp,-25788
}
    cecc:	e037883a 	mov	sp,fp
    ced0:	dfc00117 	ldw	ra,4(sp)
    ced4:	df000017 	ldw	fp,0(sp)
    ced8:	dec00204 	addi	sp,sp,8
    cedc:	f800283a 	ret

0000cee0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    cee0:	defffb04 	addi	sp,sp,-20
    cee4:	dfc00415 	stw	ra,16(sp)
    cee8:	df000315 	stw	fp,12(sp)
    ceec:	df000304 	addi	fp,sp,12
    cef0:	e13ffe15 	stw	r4,-8(fp)
    cef4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cef8:	e0bffe17 	ldw	r2,-8(fp)
    cefc:	10000616 	blt	r2,zero,cf18 <fstat+0x38>
    cf00:	e0bffe17 	ldw	r2,-8(fp)
    cf04:	10c00324 	muli	r3,r2,12
    cf08:	00800074 	movhi	r2,1
    cf0c:	10803004 	addi	r2,r2,192
    cf10:	1885883a 	add	r2,r3,r2
    cf14:	00000106 	br	cf1c <fstat+0x3c>
    cf18:	0005883a 	mov	r2,zero
    cf1c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    cf20:	e0bffd17 	ldw	r2,-12(fp)
    cf24:	10001026 	beq	r2,zero,cf68 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    cf28:	e0bffd17 	ldw	r2,-12(fp)
    cf2c:	10800017 	ldw	r2,0(r2)
    cf30:	10800817 	ldw	r2,32(r2)
    cf34:	10000726 	beq	r2,zero,cf54 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    cf38:	e0bffd17 	ldw	r2,-12(fp)
    cf3c:	10800017 	ldw	r2,0(r2)
    cf40:	10800817 	ldw	r2,32(r2)
    cf44:	e17fff17 	ldw	r5,-4(fp)
    cf48:	e13ffd17 	ldw	r4,-12(fp)
    cf4c:	103ee83a 	callr	r2
    cf50:	00000a06 	br	cf7c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    cf54:	e0bfff17 	ldw	r2,-4(fp)
    cf58:	00c80004 	movi	r3,8192
    cf5c:	10c00115 	stw	r3,4(r2)
      return 0;
    cf60:	0005883a 	mov	r2,zero
    cf64:	00000506 	br	cf7c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cf68:	000cea40 	call	cea4 <alt_get_errno>
    cf6c:	1007883a 	mov	r3,r2
    cf70:	00801444 	movi	r2,81
    cf74:	18800015 	stw	r2,0(r3)
    return -1;
    cf78:	00bfffc4 	movi	r2,-1
  }
}
    cf7c:	e037883a 	mov	sp,fp
    cf80:	dfc00117 	ldw	ra,4(sp)
    cf84:	df000017 	ldw	fp,0(sp)
    cf88:	dec00204 	addi	sp,sp,8
    cf8c:	f800283a 	ret

0000cf90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cf90:	defffe04 	addi	sp,sp,-8
    cf94:	dfc00115 	stw	ra,4(sp)
    cf98:	df000015 	stw	fp,0(sp)
    cf9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cfa0:	d0a00b17 	ldw	r2,-32724(gp)
    cfa4:	10000326 	beq	r2,zero,cfb4 <alt_get_errno+0x24>
    cfa8:	d0a00b17 	ldw	r2,-32724(gp)
    cfac:	103ee83a 	callr	r2
    cfb0:	00000106 	br	cfb8 <alt_get_errno+0x28>
    cfb4:	d0a6d104 	addi	r2,gp,-25788
}
    cfb8:	e037883a 	mov	sp,fp
    cfbc:	dfc00117 	ldw	ra,4(sp)
    cfc0:	df000017 	ldw	fp,0(sp)
    cfc4:	dec00204 	addi	sp,sp,8
    cfc8:	f800283a 	ret

0000cfcc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    cfcc:	deffed04 	addi	sp,sp,-76
    cfd0:	dfc01215 	stw	ra,72(sp)
    cfd4:	df001115 	stw	fp,68(sp)
    cfd8:	df001104 	addi	fp,sp,68
    cfdc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cfe0:	e0bfff17 	ldw	r2,-4(fp)
    cfe4:	10000616 	blt	r2,zero,d000 <isatty+0x34>
    cfe8:	e0bfff17 	ldw	r2,-4(fp)
    cfec:	10c00324 	muli	r3,r2,12
    cff0:	00800074 	movhi	r2,1
    cff4:	10803004 	addi	r2,r2,192
    cff8:	1885883a 	add	r2,r3,r2
    cffc:	00000106 	br	d004 <isatty+0x38>
    d000:	0005883a 	mov	r2,zero
    d004:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d008:	e0bfef17 	ldw	r2,-68(fp)
    d00c:	10000e26 	beq	r2,zero,d048 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d010:	e0bfef17 	ldw	r2,-68(fp)
    d014:	10800017 	ldw	r2,0(r2)
    d018:	10800817 	ldw	r2,32(r2)
    d01c:	1000021e 	bne	r2,zero,d028 <isatty+0x5c>
    {
      return 1;
    d020:	00800044 	movi	r2,1
    d024:	00000d06 	br	d05c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d028:	e0bff004 	addi	r2,fp,-64
    d02c:	100b883a 	mov	r5,r2
    d030:	e13fff17 	ldw	r4,-4(fp)
    d034:	000cee00 	call	cee0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d038:	e0bff117 	ldw	r2,-60(fp)
    d03c:	10880020 	cmpeqi	r2,r2,8192
    d040:	10803fcc 	andi	r2,r2,255
    d044:	00000506 	br	d05c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d048:	000cf900 	call	cf90 <alt_get_errno>
    d04c:	1007883a 	mov	r3,r2
    d050:	00801444 	movi	r2,81
    d054:	18800015 	stw	r2,0(r3)
    return 0;
    d058:	0005883a 	mov	r2,zero
  }
}
    d05c:	e037883a 	mov	sp,fp
    d060:	dfc00117 	ldw	ra,4(sp)
    d064:	df000017 	ldw	fp,0(sp)
    d068:	dec00204 	addi	sp,sp,8
    d06c:	f800283a 	ret

0000d070 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d070:	defffc04 	addi	sp,sp,-16
    d074:	df000315 	stw	fp,12(sp)
    d078:	df000304 	addi	fp,sp,12
    d07c:	e13ffd15 	stw	r4,-12(fp)
    d080:	e17ffe15 	stw	r5,-8(fp)
    d084:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d088:	e0fffe17 	ldw	r3,-8(fp)
    d08c:	e0bffd17 	ldw	r2,-12(fp)
    d090:	18800c26 	beq	r3,r2,d0c4 <alt_load_section+0x54>
  {
    while( to != end )
    d094:	00000806 	br	d0b8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d098:	e0bffe17 	ldw	r2,-8(fp)
    d09c:	10c00104 	addi	r3,r2,4
    d0a0:	e0fffe15 	stw	r3,-8(fp)
    d0a4:	e0fffd17 	ldw	r3,-12(fp)
    d0a8:	19000104 	addi	r4,r3,4
    d0ac:	e13ffd15 	stw	r4,-12(fp)
    d0b0:	18c00017 	ldw	r3,0(r3)
    d0b4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d0b8:	e0fffe17 	ldw	r3,-8(fp)
    d0bc:	e0bfff17 	ldw	r2,-4(fp)
    d0c0:	18bff51e 	bne	r3,r2,d098 <__alt_data_end+0xfffed098>
    {
      *to++ = *from++;
    }
  }
}
    d0c4:	0001883a 	nop
    d0c8:	e037883a 	mov	sp,fp
    d0cc:	df000017 	ldw	fp,0(sp)
    d0d0:	dec00104 	addi	sp,sp,4
    d0d4:	f800283a 	ret

0000d0d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d0d8:	defffe04 	addi	sp,sp,-8
    d0dc:	dfc00115 	stw	ra,4(sp)
    d0e0:	df000015 	stw	fp,0(sp)
    d0e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d0e8:	01800074 	movhi	r6,1
    d0ec:	3184b804 	addi	r6,r6,4832
    d0f0:	01400074 	movhi	r5,1
    d0f4:	297dfd04 	addi	r5,r5,-2060
    d0f8:	01000074 	movhi	r4,1
    d0fc:	2104b804 	addi	r4,r4,4832
    d100:	000d0700 	call	d070 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d104:	01800034 	movhi	r6,0
    d108:	31807004 	addi	r6,r6,448
    d10c:	01400034 	movhi	r5,0
    d110:	29400804 	addi	r5,r5,32
    d114:	01000034 	movhi	r4,0
    d118:	21000804 	addi	r4,r4,32
    d11c:	000d0700 	call	d070 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d120:	01800074 	movhi	r6,1
    d124:	31bdfd04 	addi	r6,r6,-2060
    d128:	01400074 	movhi	r5,1
    d12c:	297cdc04 	addi	r5,r5,-3216
    d130:	01000074 	movhi	r4,1
    d134:	213cdc04 	addi	r4,r4,-3216
    d138:	000d0700 	call	d070 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d13c:	000e2f80 	call	e2f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d140:	000e4e00 	call	e4e0 <alt_icache_flush_all>
}
    d144:	0001883a 	nop
    d148:	e037883a 	mov	sp,fp
    d14c:	dfc00117 	ldw	ra,4(sp)
    d150:	df000017 	ldw	fp,0(sp)
    d154:	dec00204 	addi	sp,sp,8
    d158:	f800283a 	ret

0000d15c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d15c:	defffe04 	addi	sp,sp,-8
    d160:	dfc00115 	stw	ra,4(sp)
    d164:	df000015 	stw	fp,0(sp)
    d168:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d16c:	d0a00b17 	ldw	r2,-32724(gp)
    d170:	10000326 	beq	r2,zero,d180 <alt_get_errno+0x24>
    d174:	d0a00b17 	ldw	r2,-32724(gp)
    d178:	103ee83a 	callr	r2
    d17c:	00000106 	br	d184 <alt_get_errno+0x28>
    d180:	d0a6d104 	addi	r2,gp,-25788
}
    d184:	e037883a 	mov	sp,fp
    d188:	dfc00117 	ldw	ra,4(sp)
    d18c:	df000017 	ldw	fp,0(sp)
    d190:	dec00204 	addi	sp,sp,8
    d194:	f800283a 	ret

0000d198 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d198:	defff904 	addi	sp,sp,-28
    d19c:	dfc00615 	stw	ra,24(sp)
    d1a0:	df000515 	stw	fp,20(sp)
    d1a4:	df000504 	addi	fp,sp,20
    d1a8:	e13ffd15 	stw	r4,-12(fp)
    d1ac:	e17ffe15 	stw	r5,-8(fp)
    d1b0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d1b4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d1b8:	e0bffd17 	ldw	r2,-12(fp)
    d1bc:	10000616 	blt	r2,zero,d1d8 <lseek+0x40>
    d1c0:	e0bffd17 	ldw	r2,-12(fp)
    d1c4:	10c00324 	muli	r3,r2,12
    d1c8:	00800074 	movhi	r2,1
    d1cc:	10803004 	addi	r2,r2,192
    d1d0:	1885883a 	add	r2,r3,r2
    d1d4:	00000106 	br	d1dc <lseek+0x44>
    d1d8:	0005883a 	mov	r2,zero
    d1dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d1e0:	e0bffc17 	ldw	r2,-16(fp)
    d1e4:	10001026 	beq	r2,zero,d228 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d1e8:	e0bffc17 	ldw	r2,-16(fp)
    d1ec:	10800017 	ldw	r2,0(r2)
    d1f0:	10800717 	ldw	r2,28(r2)
    d1f4:	10000926 	beq	r2,zero,d21c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d1f8:	e0bffc17 	ldw	r2,-16(fp)
    d1fc:	10800017 	ldw	r2,0(r2)
    d200:	10800717 	ldw	r2,28(r2)
    d204:	e1bfff17 	ldw	r6,-4(fp)
    d208:	e17ffe17 	ldw	r5,-8(fp)
    d20c:	e13ffc17 	ldw	r4,-16(fp)
    d210:	103ee83a 	callr	r2
    d214:	e0bffb15 	stw	r2,-20(fp)
    d218:	00000506 	br	d230 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d21c:	00bfde84 	movi	r2,-134
    d220:	e0bffb15 	stw	r2,-20(fp)
    d224:	00000206 	br	d230 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d228:	00bfebc4 	movi	r2,-81
    d22c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d230:	e0bffb17 	ldw	r2,-20(fp)
    d234:	1000070e 	bge	r2,zero,d254 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d238:	000d15c0 	call	d15c <alt_get_errno>
    d23c:	1007883a 	mov	r3,r2
    d240:	e0bffb17 	ldw	r2,-20(fp)
    d244:	0085c83a 	sub	r2,zero,r2
    d248:	18800015 	stw	r2,0(r3)
    rc = -1;
    d24c:	00bfffc4 	movi	r2,-1
    d250:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d254:	e0bffb17 	ldw	r2,-20(fp)
}
    d258:	e037883a 	mov	sp,fp
    d25c:	dfc00117 	ldw	ra,4(sp)
    d260:	df000017 	ldw	fp,0(sp)
    d264:	dec00204 	addi	sp,sp,8
    d268:	f800283a 	ret

0000d26c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d26c:	defffd04 	addi	sp,sp,-12
    d270:	dfc00215 	stw	ra,8(sp)
    d274:	df000115 	stw	fp,4(sp)
    d278:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d27c:	0009883a 	mov	r4,zero
    d280:	000d6e40 	call	d6e4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d284:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d288:	000d71c0 	call	d71c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d28c:	01800074 	movhi	r6,1
    d290:	31bdf304 	addi	r6,r6,-2100
    d294:	01400074 	movhi	r5,1
    d298:	297df304 	addi	r5,r5,-2100
    d29c:	01000074 	movhi	r4,1
    d2a0:	213df304 	addi	r4,r4,-2100
    d2a4:	000e8780 	call	e878 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d2a8:	000e4200 	call	e420 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d2ac:	01000074 	movhi	r4,1
    d2b0:	21392004 	addi	r4,r4,-7040
    d2b4:	000efdc0 	call	efdc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d2b8:	d0a6d217 	ldw	r2,-25784(gp)
    d2bc:	d0e6d317 	ldw	r3,-25780(gp)
    d2c0:	d126d417 	ldw	r4,-25776(gp)
    d2c4:	200d883a 	mov	r6,r4
    d2c8:	180b883a 	mov	r5,r3
    d2cc:	1009883a 	mov	r4,r2
    d2d0:	000020c0 	call	20c <main>
    d2d4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d2d8:	01000044 	movi	r4,1
    d2dc:	000cda80 	call	cda8 <close>
  exit (result);
    d2e0:	e13fff17 	ldw	r4,-4(fp)
    d2e4:	000eff00 	call	eff0 <exit>

0000d2e8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d2e8:	defffe04 	addi	sp,sp,-8
    d2ec:	df000115 	stw	fp,4(sp)
    d2f0:	df000104 	addi	fp,sp,4
    d2f4:	e13fff15 	stw	r4,-4(fp)
}
    d2f8:	0001883a 	nop
    d2fc:	e037883a 	mov	sp,fp
    d300:	df000017 	ldw	fp,0(sp)
    d304:	dec00104 	addi	sp,sp,4
    d308:	f800283a 	ret

0000d30c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d30c:	defffe04 	addi	sp,sp,-8
    d310:	df000115 	stw	fp,4(sp)
    d314:	df000104 	addi	fp,sp,4
    d318:	e13fff15 	stw	r4,-4(fp)
}
    d31c:	0001883a 	nop
    d320:	e037883a 	mov	sp,fp
    d324:	df000017 	ldw	fp,0(sp)
    d328:	dec00104 	addi	sp,sp,4
    d32c:	f800283a 	ret

0000d330 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d330:	defffe04 	addi	sp,sp,-8
    d334:	dfc00115 	stw	ra,4(sp)
    d338:	df000015 	stw	fp,0(sp)
    d33c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d340:	d0a00b17 	ldw	r2,-32724(gp)
    d344:	10000326 	beq	r2,zero,d354 <alt_get_errno+0x24>
    d348:	d0a00b17 	ldw	r2,-32724(gp)
    d34c:	103ee83a 	callr	r2
    d350:	00000106 	br	d358 <alt_get_errno+0x28>
    d354:	d0a6d104 	addi	r2,gp,-25788
}
    d358:	e037883a 	mov	sp,fp
    d35c:	dfc00117 	ldw	ra,4(sp)
    d360:	df000017 	ldw	fp,0(sp)
    d364:	dec00204 	addi	sp,sp,8
    d368:	f800283a 	ret

0000d36c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d36c:	defff904 	addi	sp,sp,-28
    d370:	dfc00615 	stw	ra,24(sp)
    d374:	df000515 	stw	fp,20(sp)
    d378:	df000504 	addi	fp,sp,20
    d37c:	e13ffd15 	stw	r4,-12(fp)
    d380:	e17ffe15 	stw	r5,-8(fp)
    d384:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d388:	e0bffd17 	ldw	r2,-12(fp)
    d38c:	10000616 	blt	r2,zero,d3a8 <read+0x3c>
    d390:	e0bffd17 	ldw	r2,-12(fp)
    d394:	10c00324 	muli	r3,r2,12
    d398:	00800074 	movhi	r2,1
    d39c:	10803004 	addi	r2,r2,192
    d3a0:	1885883a 	add	r2,r3,r2
    d3a4:	00000106 	br	d3ac <read+0x40>
    d3a8:	0005883a 	mov	r2,zero
    d3ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d3b0:	e0bffb17 	ldw	r2,-20(fp)
    d3b4:	10002226 	beq	r2,zero,d440 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d3b8:	e0bffb17 	ldw	r2,-20(fp)
    d3bc:	10800217 	ldw	r2,8(r2)
    d3c0:	108000cc 	andi	r2,r2,3
    d3c4:	10800060 	cmpeqi	r2,r2,1
    d3c8:	1000181e 	bne	r2,zero,d42c <read+0xc0>
        (fd->dev->read))
    d3cc:	e0bffb17 	ldw	r2,-20(fp)
    d3d0:	10800017 	ldw	r2,0(r2)
    d3d4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d3d8:	10001426 	beq	r2,zero,d42c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d3dc:	e0bffb17 	ldw	r2,-20(fp)
    d3e0:	10800017 	ldw	r2,0(r2)
    d3e4:	10800517 	ldw	r2,20(r2)
    d3e8:	e0ffff17 	ldw	r3,-4(fp)
    d3ec:	180d883a 	mov	r6,r3
    d3f0:	e17ffe17 	ldw	r5,-8(fp)
    d3f4:	e13ffb17 	ldw	r4,-20(fp)
    d3f8:	103ee83a 	callr	r2
    d3fc:	e0bffc15 	stw	r2,-16(fp)
    d400:	e0bffc17 	ldw	r2,-16(fp)
    d404:	1000070e 	bge	r2,zero,d424 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d408:	000d3300 	call	d330 <alt_get_errno>
    d40c:	1007883a 	mov	r3,r2
    d410:	e0bffc17 	ldw	r2,-16(fp)
    d414:	0085c83a 	sub	r2,zero,r2
    d418:	18800015 	stw	r2,0(r3)
          return -1;
    d41c:	00bfffc4 	movi	r2,-1
    d420:	00000c06 	br	d454 <read+0xe8>
        }
        return rval;
    d424:	e0bffc17 	ldw	r2,-16(fp)
    d428:	00000a06 	br	d454 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d42c:	000d3300 	call	d330 <alt_get_errno>
    d430:	1007883a 	mov	r3,r2
    d434:	00800344 	movi	r2,13
    d438:	18800015 	stw	r2,0(r3)
    d43c:	00000406 	br	d450 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d440:	000d3300 	call	d330 <alt_get_errno>
    d444:	1007883a 	mov	r3,r2
    d448:	00801444 	movi	r2,81
    d44c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d450:	00bfffc4 	movi	r2,-1
}
    d454:	e037883a 	mov	sp,fp
    d458:	dfc00117 	ldw	ra,4(sp)
    d45c:	df000017 	ldw	fp,0(sp)
    d460:	dec00204 	addi	sp,sp,8
    d464:	f800283a 	ret

0000d468 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d468:	defffe04 	addi	sp,sp,-8
    d46c:	df000115 	stw	fp,4(sp)
    d470:	df000104 	addi	fp,sp,4
    d474:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d478:	e0bfff17 	ldw	r2,-4(fp)
    d47c:	108000d0 	cmplti	r2,r2,3
    d480:	10000d1e 	bne	r2,zero,d4b8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d484:	00800074 	movhi	r2,1
    d488:	10803004 	addi	r2,r2,192
    d48c:	e0ffff17 	ldw	r3,-4(fp)
    d490:	18c00324 	muli	r3,r3,12
    d494:	10c5883a 	add	r2,r2,r3
    d498:	10800204 	addi	r2,r2,8
    d49c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d4a0:	00800074 	movhi	r2,1
    d4a4:	10803004 	addi	r2,r2,192
    d4a8:	e0ffff17 	ldw	r3,-4(fp)
    d4ac:	18c00324 	muli	r3,r3,12
    d4b0:	10c5883a 	add	r2,r2,r3
    d4b4:	10000015 	stw	zero,0(r2)
  }
}
    d4b8:	0001883a 	nop
    d4bc:	e037883a 	mov	sp,fp
    d4c0:	df000017 	ldw	fp,0(sp)
    d4c4:	dec00104 	addi	sp,sp,4
    d4c8:	f800283a 	ret

0000d4cc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d4cc:	defff904 	addi	sp,sp,-28
    d4d0:	df000615 	stw	fp,24(sp)
    d4d4:	df000604 	addi	fp,sp,24
    d4d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d4dc:	0005303a 	rdctl	r2,status
    d4e0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d4e4:	e0fffe17 	ldw	r3,-8(fp)
    d4e8:	00bfff84 	movi	r2,-2
    d4ec:	1884703a 	and	r2,r3,r2
    d4f0:	1001703a 	wrctl	status,r2
  
  return context;
    d4f4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d4f8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d4fc:	d0a00c17 	ldw	r2,-32720(gp)
    d500:	10c000c4 	addi	r3,r2,3
    d504:	00bfff04 	movi	r2,-4
    d508:	1884703a 	and	r2,r3,r2
    d50c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d510:	d0e00c17 	ldw	r3,-32720(gp)
    d514:	e0bfff17 	ldw	r2,-4(fp)
    d518:	1887883a 	add	r3,r3,r2
    d51c:	008000b4 	movhi	r2,2
    d520:	10800004 	addi	r2,r2,0
    d524:	10c0062e 	bgeu	r2,r3,d540 <sbrk+0x74>
    d528:	e0bffb17 	ldw	r2,-20(fp)
    d52c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d530:	e0bffa17 	ldw	r2,-24(fp)
    d534:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d538:	00bfffc4 	movi	r2,-1
    d53c:	00000b06 	br	d56c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d540:	d0a00c17 	ldw	r2,-32720(gp)
    d544:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d548:	d0e00c17 	ldw	r3,-32720(gp)
    d54c:	e0bfff17 	ldw	r2,-4(fp)
    d550:	1885883a 	add	r2,r3,r2
    d554:	d0a00c15 	stw	r2,-32720(gp)
    d558:	e0bffb17 	ldw	r2,-20(fp)
    d55c:	e0bffc15 	stw	r2,-16(fp)
    d560:	e0bffc17 	ldw	r2,-16(fp)
    d564:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d568:	e0bffd17 	ldw	r2,-12(fp)
} 
    d56c:	e037883a 	mov	sp,fp
    d570:	df000017 	ldw	fp,0(sp)
    d574:	dec00104 	addi	sp,sp,4
    d578:	f800283a 	ret

0000d57c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d57c:	defffe04 	addi	sp,sp,-8
    d580:	dfc00115 	stw	ra,4(sp)
    d584:	df000015 	stw	fp,0(sp)
    d588:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d58c:	d0a00b17 	ldw	r2,-32724(gp)
    d590:	10000326 	beq	r2,zero,d5a0 <alt_get_errno+0x24>
    d594:	d0a00b17 	ldw	r2,-32724(gp)
    d598:	103ee83a 	callr	r2
    d59c:	00000106 	br	d5a4 <alt_get_errno+0x28>
    d5a0:	d0a6d104 	addi	r2,gp,-25788
}
    d5a4:	e037883a 	mov	sp,fp
    d5a8:	dfc00117 	ldw	ra,4(sp)
    d5ac:	df000017 	ldw	fp,0(sp)
    d5b0:	dec00204 	addi	sp,sp,8
    d5b4:	f800283a 	ret

0000d5b8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d5b8:	defff904 	addi	sp,sp,-28
    d5bc:	dfc00615 	stw	ra,24(sp)
    d5c0:	df000515 	stw	fp,20(sp)
    d5c4:	df000504 	addi	fp,sp,20
    d5c8:	e13ffd15 	stw	r4,-12(fp)
    d5cc:	e17ffe15 	stw	r5,-8(fp)
    d5d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d5d4:	e0bffd17 	ldw	r2,-12(fp)
    d5d8:	10000616 	blt	r2,zero,d5f4 <write+0x3c>
    d5dc:	e0bffd17 	ldw	r2,-12(fp)
    d5e0:	10c00324 	muli	r3,r2,12
    d5e4:	00800074 	movhi	r2,1
    d5e8:	10803004 	addi	r2,r2,192
    d5ec:	1885883a 	add	r2,r3,r2
    d5f0:	00000106 	br	d5f8 <write+0x40>
    d5f4:	0005883a 	mov	r2,zero
    d5f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d5fc:	e0bffb17 	ldw	r2,-20(fp)
    d600:	10002126 	beq	r2,zero,d688 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d604:	e0bffb17 	ldw	r2,-20(fp)
    d608:	10800217 	ldw	r2,8(r2)
    d60c:	108000cc 	andi	r2,r2,3
    d610:	10001826 	beq	r2,zero,d674 <write+0xbc>
    d614:	e0bffb17 	ldw	r2,-20(fp)
    d618:	10800017 	ldw	r2,0(r2)
    d61c:	10800617 	ldw	r2,24(r2)
    d620:	10001426 	beq	r2,zero,d674 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d624:	e0bffb17 	ldw	r2,-20(fp)
    d628:	10800017 	ldw	r2,0(r2)
    d62c:	10800617 	ldw	r2,24(r2)
    d630:	e0ffff17 	ldw	r3,-4(fp)
    d634:	180d883a 	mov	r6,r3
    d638:	e17ffe17 	ldw	r5,-8(fp)
    d63c:	e13ffb17 	ldw	r4,-20(fp)
    d640:	103ee83a 	callr	r2
    d644:	e0bffc15 	stw	r2,-16(fp)
    d648:	e0bffc17 	ldw	r2,-16(fp)
    d64c:	1000070e 	bge	r2,zero,d66c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d650:	000d57c0 	call	d57c <alt_get_errno>
    d654:	1007883a 	mov	r3,r2
    d658:	e0bffc17 	ldw	r2,-16(fp)
    d65c:	0085c83a 	sub	r2,zero,r2
    d660:	18800015 	stw	r2,0(r3)
        return -1;
    d664:	00bfffc4 	movi	r2,-1
    d668:	00000c06 	br	d69c <write+0xe4>
      }
      return rval;
    d66c:	e0bffc17 	ldw	r2,-16(fp)
    d670:	00000a06 	br	d69c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d674:	000d57c0 	call	d57c <alt_get_errno>
    d678:	1007883a 	mov	r3,r2
    d67c:	00800344 	movi	r2,13
    d680:	18800015 	stw	r2,0(r3)
    d684:	00000406 	br	d698 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d688:	000d57c0 	call	d57c <alt_get_errno>
    d68c:	1007883a 	mov	r3,r2
    d690:	00801444 	movi	r2,81
    d694:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d698:	00bfffc4 	movi	r2,-1
}
    d69c:	e037883a 	mov	sp,fp
    d6a0:	dfc00117 	ldw	ra,4(sp)
    d6a4:	df000017 	ldw	fp,0(sp)
    d6a8:	dec00204 	addi	sp,sp,8
    d6ac:	f800283a 	ret

0000d6b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d6b0:	defffd04 	addi	sp,sp,-12
    d6b4:	dfc00215 	stw	ra,8(sp)
    d6b8:	df000115 	stw	fp,4(sp)
    d6bc:	df000104 	addi	fp,sp,4
    d6c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d6c4:	d1600804 	addi	r5,gp,-32736
    d6c8:	e13fff17 	ldw	r4,-4(fp)
    d6cc:	000e37c0 	call	e37c <alt_dev_llist_insert>
}
    d6d0:	e037883a 	mov	sp,fp
    d6d4:	dfc00117 	ldw	ra,4(sp)
    d6d8:	df000017 	ldw	fp,0(sp)
    d6dc:	dec00204 	addi	sp,sp,8
    d6e0:	f800283a 	ret

0000d6e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d6e4:	defffd04 	addi	sp,sp,-12
    d6e8:	dfc00215 	stw	ra,8(sp)
    d6ec:	df000115 	stw	fp,4(sp)
    d6f0:	df000104 	addi	fp,sp,4
    d6f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    d6f8:	000ecec0 	call	ecec <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d6fc:	00800044 	movi	r2,1
    d700:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d704:	0001883a 	nop
    d708:	e037883a 	mov	sp,fp
    d70c:	dfc00117 	ldw	ra,4(sp)
    d710:	df000017 	ldw	fp,0(sp)
    d714:	dec00204 	addi	sp,sp,8
    d718:	f800283a 	ret

0000d71c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d71c:	defffe04 	addi	sp,sp,-8
    d720:	dfc00115 	stw	ra,4(sp)
    d724:	df000015 	stw	fp,0(sp)
    d728:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    d72c:	01800144 	movi	r6,5
    d730:	000b883a 	mov	r5,zero
    d734:	01000074 	movhi	r4,1
    d738:	21009a04 	addi	r4,r4,616
    d73c:	000d8c80 	call	d8c8 <altera_avalon_jtag_uart_init>
    d740:	01000074 	movhi	r4,1
    d744:	21009004 	addi	r4,r4,576
    d748:	000d6b00 	call	d6b0 <alt_dev_reg>
}
    d74c:	0001883a 	nop
    d750:	e037883a 	mov	sp,fp
    d754:	dfc00117 	ldw	ra,4(sp)
    d758:	df000017 	ldw	fp,0(sp)
    d75c:	dec00204 	addi	sp,sp,8
    d760:	f800283a 	ret

0000d764 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d764:	defffa04 	addi	sp,sp,-24
    d768:	dfc00515 	stw	ra,20(sp)
    d76c:	df000415 	stw	fp,16(sp)
    d770:	df000404 	addi	fp,sp,16
    d774:	e13ffd15 	stw	r4,-12(fp)
    d778:	e17ffe15 	stw	r5,-8(fp)
    d77c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d780:	e0bffd17 	ldw	r2,-12(fp)
    d784:	10800017 	ldw	r2,0(r2)
    d788:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d78c:	e0bffc17 	ldw	r2,-16(fp)
    d790:	10c00a04 	addi	r3,r2,40
    d794:	e0bffd17 	ldw	r2,-12(fp)
    d798:	10800217 	ldw	r2,8(r2)
    d79c:	100f883a 	mov	r7,r2
    d7a0:	e1bfff17 	ldw	r6,-4(fp)
    d7a4:	e17ffe17 	ldw	r5,-8(fp)
    d7a8:	1809883a 	mov	r4,r3
    d7ac:	000dd8c0 	call	dd8c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d7b0:	e037883a 	mov	sp,fp
    d7b4:	dfc00117 	ldw	ra,4(sp)
    d7b8:	df000017 	ldw	fp,0(sp)
    d7bc:	dec00204 	addi	sp,sp,8
    d7c0:	f800283a 	ret

0000d7c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d7c4:	defffa04 	addi	sp,sp,-24
    d7c8:	dfc00515 	stw	ra,20(sp)
    d7cc:	df000415 	stw	fp,16(sp)
    d7d0:	df000404 	addi	fp,sp,16
    d7d4:	e13ffd15 	stw	r4,-12(fp)
    d7d8:	e17ffe15 	stw	r5,-8(fp)
    d7dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d7e0:	e0bffd17 	ldw	r2,-12(fp)
    d7e4:	10800017 	ldw	r2,0(r2)
    d7e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d7ec:	e0bffc17 	ldw	r2,-16(fp)
    d7f0:	10c00a04 	addi	r3,r2,40
    d7f4:	e0bffd17 	ldw	r2,-12(fp)
    d7f8:	10800217 	ldw	r2,8(r2)
    d7fc:	100f883a 	mov	r7,r2
    d800:	e1bfff17 	ldw	r6,-4(fp)
    d804:	e17ffe17 	ldw	r5,-8(fp)
    d808:	1809883a 	mov	r4,r3
    d80c:	000dfa80 	call	dfa8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d810:	e037883a 	mov	sp,fp
    d814:	dfc00117 	ldw	ra,4(sp)
    d818:	df000017 	ldw	fp,0(sp)
    d81c:	dec00204 	addi	sp,sp,8
    d820:	f800283a 	ret

0000d824 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    d824:	defffc04 	addi	sp,sp,-16
    d828:	dfc00315 	stw	ra,12(sp)
    d82c:	df000215 	stw	fp,8(sp)
    d830:	df000204 	addi	fp,sp,8
    d834:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d838:	e0bfff17 	ldw	r2,-4(fp)
    d83c:	10800017 	ldw	r2,0(r2)
    d840:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    d844:	e0bffe17 	ldw	r2,-8(fp)
    d848:	10c00a04 	addi	r3,r2,40
    d84c:	e0bfff17 	ldw	r2,-4(fp)
    d850:	10800217 	ldw	r2,8(r2)
    d854:	100b883a 	mov	r5,r2
    d858:	1809883a 	mov	r4,r3
    d85c:	000dc340 	call	dc34 <altera_avalon_jtag_uart_close>
}
    d860:	e037883a 	mov	sp,fp
    d864:	dfc00117 	ldw	ra,4(sp)
    d868:	df000017 	ldw	fp,0(sp)
    d86c:	dec00204 	addi	sp,sp,8
    d870:	f800283a 	ret

0000d874 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d874:	defffa04 	addi	sp,sp,-24
    d878:	dfc00515 	stw	ra,20(sp)
    d87c:	df000415 	stw	fp,16(sp)
    d880:	df000404 	addi	fp,sp,16
    d884:	e13ffd15 	stw	r4,-12(fp)
    d888:	e17ffe15 	stw	r5,-8(fp)
    d88c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    d890:	e0bffd17 	ldw	r2,-12(fp)
    d894:	10800017 	ldw	r2,0(r2)
    d898:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d89c:	e0bffc17 	ldw	r2,-16(fp)
    d8a0:	10800a04 	addi	r2,r2,40
    d8a4:	e1bfff17 	ldw	r6,-4(fp)
    d8a8:	e17ffe17 	ldw	r5,-8(fp)
    d8ac:	1009883a 	mov	r4,r2
    d8b0:	000dc9c0 	call	dc9c <altera_avalon_jtag_uart_ioctl>
}
    d8b4:	e037883a 	mov	sp,fp
    d8b8:	dfc00117 	ldw	ra,4(sp)
    d8bc:	df000017 	ldw	fp,0(sp)
    d8c0:	dec00204 	addi	sp,sp,8
    d8c4:	f800283a 	ret

0000d8c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    d8c8:	defffa04 	addi	sp,sp,-24
    d8cc:	dfc00515 	stw	ra,20(sp)
    d8d0:	df000415 	stw	fp,16(sp)
    d8d4:	df000404 	addi	fp,sp,16
    d8d8:	e13ffd15 	stw	r4,-12(fp)
    d8dc:	e17ffe15 	stw	r5,-8(fp)
    d8e0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d8e4:	e0bffd17 	ldw	r2,-12(fp)
    d8e8:	00c00044 	movi	r3,1
    d8ec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    d8f0:	e0bffd17 	ldw	r2,-12(fp)
    d8f4:	10800017 	ldw	r2,0(r2)
    d8f8:	10800104 	addi	r2,r2,4
    d8fc:	1007883a 	mov	r3,r2
    d900:	e0bffd17 	ldw	r2,-12(fp)
    d904:	10800817 	ldw	r2,32(r2)
    d908:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    d90c:	e0bffe17 	ldw	r2,-8(fp)
    d910:	e0ffff17 	ldw	r3,-4(fp)
    d914:	d8000015 	stw	zero,0(sp)
    d918:	e1fffd17 	ldw	r7,-12(fp)
    d91c:	01800074 	movhi	r6,1
    d920:	31b66204 	addi	r6,r6,-9848
    d924:	180b883a 	mov	r5,r3
    d928:	1009883a 	mov	r4,r2
    d92c:	000e5140 	call	e514 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    d930:	e0bffd17 	ldw	r2,-12(fp)
    d934:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    d938:	e0bffd17 	ldw	r2,-12(fp)
    d93c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d940:	d0e6d617 	ldw	r3,-25768(gp)
    d944:	e1fffd17 	ldw	r7,-12(fp)
    d948:	01800074 	movhi	r6,1
    d94c:	31b6e504 	addi	r6,r6,-9324
    d950:	180b883a 	mov	r5,r3
    d954:	1009883a 	mov	r4,r2
    d958:	000e1cc0 	call	e1cc <alt_alarm_start>
    d95c:	1000040e 	bge	r2,zero,d970 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    d960:	e0fffd17 	ldw	r3,-12(fp)
    d964:	00a00034 	movhi	r2,32768
    d968:	10bfffc4 	addi	r2,r2,-1
    d96c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    d970:	0001883a 	nop
    d974:	e037883a 	mov	sp,fp
    d978:	dfc00117 	ldw	ra,4(sp)
    d97c:	df000017 	ldw	fp,0(sp)
    d980:	dec00204 	addi	sp,sp,8
    d984:	f800283a 	ret

0000d988 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    d988:	defff804 	addi	sp,sp,-32
    d98c:	df000715 	stw	fp,28(sp)
    d990:	df000704 	addi	fp,sp,28
    d994:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    d998:	e0bfff17 	ldw	r2,-4(fp)
    d99c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    d9a0:	e0bffb17 	ldw	r2,-20(fp)
    d9a4:	10800017 	ldw	r2,0(r2)
    d9a8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d9ac:	e0bffc17 	ldw	r2,-16(fp)
    d9b0:	10800104 	addi	r2,r2,4
    d9b4:	10800037 	ldwio	r2,0(r2)
    d9b8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    d9bc:	e0bffd17 	ldw	r2,-12(fp)
    d9c0:	1080c00c 	andi	r2,r2,768
    d9c4:	10006d26 	beq	r2,zero,db7c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    d9c8:	e0bffd17 	ldw	r2,-12(fp)
    d9cc:	1080400c 	andi	r2,r2,256
    d9d0:	10003526 	beq	r2,zero,daa8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    d9d4:	00800074 	movhi	r2,1
    d9d8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d9dc:	e0bffb17 	ldw	r2,-20(fp)
    d9e0:	10800a17 	ldw	r2,40(r2)
    d9e4:	10800044 	addi	r2,r2,1
    d9e8:	1081ffcc 	andi	r2,r2,2047
    d9ec:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    d9f0:	e0bffb17 	ldw	r2,-20(fp)
    d9f4:	10c00b17 	ldw	r3,44(r2)
    d9f8:	e0bffe17 	ldw	r2,-8(fp)
    d9fc:	18801526 	beq	r3,r2,da54 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    da00:	e0bffc17 	ldw	r2,-16(fp)
    da04:	10800037 	ldwio	r2,0(r2)
    da08:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    da0c:	e0bff917 	ldw	r2,-28(fp)
    da10:	10a0000c 	andi	r2,r2,32768
    da14:	10001126 	beq	r2,zero,da5c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    da18:	e0bffb17 	ldw	r2,-20(fp)
    da1c:	10800a17 	ldw	r2,40(r2)
    da20:	e0fff917 	ldw	r3,-28(fp)
    da24:	1809883a 	mov	r4,r3
    da28:	e0fffb17 	ldw	r3,-20(fp)
    da2c:	1885883a 	add	r2,r3,r2
    da30:	10800e04 	addi	r2,r2,56
    da34:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    da38:	e0bffb17 	ldw	r2,-20(fp)
    da3c:	10800a17 	ldw	r2,40(r2)
    da40:	10800044 	addi	r2,r2,1
    da44:	10c1ffcc 	andi	r3,r2,2047
    da48:	e0bffb17 	ldw	r2,-20(fp)
    da4c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    da50:	003fe206 	br	d9dc <__alt_data_end+0xfffed9dc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    da54:	0001883a 	nop
    da58:	00000106 	br	da60 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    da5c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    da60:	e0bff917 	ldw	r2,-28(fp)
    da64:	10bfffec 	andhi	r2,r2,65535
    da68:	10000f26 	beq	r2,zero,daa8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    da6c:	e0bffb17 	ldw	r2,-20(fp)
    da70:	10c00817 	ldw	r3,32(r2)
    da74:	00bfff84 	movi	r2,-2
    da78:	1886703a 	and	r3,r3,r2
    da7c:	e0bffb17 	ldw	r2,-20(fp)
    da80:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    da84:	e0bffc17 	ldw	r2,-16(fp)
    da88:	10800104 	addi	r2,r2,4
    da8c:	1007883a 	mov	r3,r2
    da90:	e0bffb17 	ldw	r2,-20(fp)
    da94:	10800817 	ldw	r2,32(r2)
    da98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    da9c:	e0bffc17 	ldw	r2,-16(fp)
    daa0:	10800104 	addi	r2,r2,4
    daa4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    daa8:	e0bffd17 	ldw	r2,-12(fp)
    daac:	1080800c 	andi	r2,r2,512
    dab0:	103fbe26 	beq	r2,zero,d9ac <__alt_data_end+0xfffed9ac>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    dab4:	e0bffd17 	ldw	r2,-12(fp)
    dab8:	1004d43a 	srli	r2,r2,16
    dabc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    dac0:	00001406 	br	db14 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    dac4:	e0bffc17 	ldw	r2,-16(fp)
    dac8:	e0fffb17 	ldw	r3,-20(fp)
    dacc:	18c00d17 	ldw	r3,52(r3)
    dad0:	e13ffb17 	ldw	r4,-20(fp)
    dad4:	20c7883a 	add	r3,r4,r3
    dad8:	18c20e04 	addi	r3,r3,2104
    dadc:	18c00003 	ldbu	r3,0(r3)
    dae0:	18c03fcc 	andi	r3,r3,255
    dae4:	18c0201c 	xori	r3,r3,128
    dae8:	18ffe004 	addi	r3,r3,-128
    daec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    daf0:	e0bffb17 	ldw	r2,-20(fp)
    daf4:	10800d17 	ldw	r2,52(r2)
    daf8:	10800044 	addi	r2,r2,1
    dafc:	10c1ffcc 	andi	r3,r2,2047
    db00:	e0bffb17 	ldw	r2,-20(fp)
    db04:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    db08:	e0bffa17 	ldw	r2,-24(fp)
    db0c:	10bfffc4 	addi	r2,r2,-1
    db10:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    db14:	e0bffa17 	ldw	r2,-24(fp)
    db18:	10000526 	beq	r2,zero,db30 <altera_avalon_jtag_uart_irq+0x1a8>
    db1c:	e0bffb17 	ldw	r2,-20(fp)
    db20:	10c00d17 	ldw	r3,52(r2)
    db24:	e0bffb17 	ldw	r2,-20(fp)
    db28:	10800c17 	ldw	r2,48(r2)
    db2c:	18bfe51e 	bne	r3,r2,dac4 <__alt_data_end+0xfffedac4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    db30:	e0bffa17 	ldw	r2,-24(fp)
    db34:	103f9d26 	beq	r2,zero,d9ac <__alt_data_end+0xfffed9ac>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    db38:	e0bffb17 	ldw	r2,-20(fp)
    db3c:	10c00817 	ldw	r3,32(r2)
    db40:	00bfff44 	movi	r2,-3
    db44:	1886703a 	and	r3,r3,r2
    db48:	e0bffb17 	ldw	r2,-20(fp)
    db4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    db50:	e0bffb17 	ldw	r2,-20(fp)
    db54:	10800017 	ldw	r2,0(r2)
    db58:	10800104 	addi	r2,r2,4
    db5c:	1007883a 	mov	r3,r2
    db60:	e0bffb17 	ldw	r2,-20(fp)
    db64:	10800817 	ldw	r2,32(r2)
    db68:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    db6c:	e0bffc17 	ldw	r2,-16(fp)
    db70:	10800104 	addi	r2,r2,4
    db74:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    db78:	003f8c06 	br	d9ac <__alt_data_end+0xfffed9ac>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    db7c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    db80:	0001883a 	nop
    db84:	e037883a 	mov	sp,fp
    db88:	df000017 	ldw	fp,0(sp)
    db8c:	dec00104 	addi	sp,sp,4
    db90:	f800283a 	ret

0000db94 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    db94:	defff804 	addi	sp,sp,-32
    db98:	df000715 	stw	fp,28(sp)
    db9c:	df000704 	addi	fp,sp,28
    dba0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    dba4:	e0bffb17 	ldw	r2,-20(fp)
    dba8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    dbac:	e0bff917 	ldw	r2,-28(fp)
    dbb0:	10800017 	ldw	r2,0(r2)
    dbb4:	10800104 	addi	r2,r2,4
    dbb8:	10800037 	ldwio	r2,0(r2)
    dbbc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    dbc0:	e0bffa17 	ldw	r2,-24(fp)
    dbc4:	1081000c 	andi	r2,r2,1024
    dbc8:	10000b26 	beq	r2,zero,dbf8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    dbcc:	e0bff917 	ldw	r2,-28(fp)
    dbd0:	10800017 	ldw	r2,0(r2)
    dbd4:	10800104 	addi	r2,r2,4
    dbd8:	1007883a 	mov	r3,r2
    dbdc:	e0bff917 	ldw	r2,-28(fp)
    dbe0:	10800817 	ldw	r2,32(r2)
    dbe4:	10810014 	ori	r2,r2,1024
    dbe8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    dbec:	e0bff917 	ldw	r2,-28(fp)
    dbf0:	10000915 	stw	zero,36(r2)
    dbf4:	00000a06 	br	dc20 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    dbf8:	e0bff917 	ldw	r2,-28(fp)
    dbfc:	10c00917 	ldw	r3,36(r2)
    dc00:	00a00034 	movhi	r2,32768
    dc04:	10bfff04 	addi	r2,r2,-4
    dc08:	10c00536 	bltu	r2,r3,dc20 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    dc0c:	e0bff917 	ldw	r2,-28(fp)
    dc10:	10800917 	ldw	r2,36(r2)
    dc14:	10c00044 	addi	r3,r2,1
    dc18:	e0bff917 	ldw	r2,-28(fp)
    dc1c:	10c00915 	stw	r3,36(r2)
    dc20:	d0a6d617 	ldw	r2,-25768(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    dc24:	e037883a 	mov	sp,fp
    dc28:	df000017 	ldw	fp,0(sp)
    dc2c:	dec00104 	addi	sp,sp,4
    dc30:	f800283a 	ret

0000dc34 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    dc34:	defffd04 	addi	sp,sp,-12
    dc38:	df000215 	stw	fp,8(sp)
    dc3c:	df000204 	addi	fp,sp,8
    dc40:	e13ffe15 	stw	r4,-8(fp)
    dc44:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dc48:	00000506 	br	dc60 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    dc4c:	e0bfff17 	ldw	r2,-4(fp)
    dc50:	1090000c 	andi	r2,r2,16384
    dc54:	10000226 	beq	r2,zero,dc60 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    dc58:	00bffd44 	movi	r2,-11
    dc5c:	00000b06 	br	dc8c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dc60:	e0bffe17 	ldw	r2,-8(fp)
    dc64:	10c00d17 	ldw	r3,52(r2)
    dc68:	e0bffe17 	ldw	r2,-8(fp)
    dc6c:	10800c17 	ldw	r2,48(r2)
    dc70:	18800526 	beq	r3,r2,dc88 <altera_avalon_jtag_uart_close+0x54>
    dc74:	e0bffe17 	ldw	r2,-8(fp)
    dc78:	10c00917 	ldw	r3,36(r2)
    dc7c:	e0bffe17 	ldw	r2,-8(fp)
    dc80:	10800117 	ldw	r2,4(r2)
    dc84:	18bff136 	bltu	r3,r2,dc4c <__alt_data_end+0xfffedc4c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    dc88:	0005883a 	mov	r2,zero
}
    dc8c:	e037883a 	mov	sp,fp
    dc90:	df000017 	ldw	fp,0(sp)
    dc94:	dec00104 	addi	sp,sp,4
    dc98:	f800283a 	ret

0000dc9c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    dc9c:	defffa04 	addi	sp,sp,-24
    dca0:	df000515 	stw	fp,20(sp)
    dca4:	df000504 	addi	fp,sp,20
    dca8:	e13ffd15 	stw	r4,-12(fp)
    dcac:	e17ffe15 	stw	r5,-8(fp)
    dcb0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    dcb4:	00bff9c4 	movi	r2,-25
    dcb8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    dcbc:	e0bffe17 	ldw	r2,-8(fp)
    dcc0:	10da8060 	cmpeqi	r3,r2,27137
    dcc4:	1800031e 	bne	r3,zero,dcd4 <altera_avalon_jtag_uart_ioctl+0x38>
    dcc8:	109a80a0 	cmpeqi	r2,r2,27138
    dccc:	1000181e 	bne	r2,zero,dd30 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    dcd0:	00002906 	br	dd78 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    dcd4:	e0bffd17 	ldw	r2,-12(fp)
    dcd8:	10c00117 	ldw	r3,4(r2)
    dcdc:	00a00034 	movhi	r2,32768
    dce0:	10bfffc4 	addi	r2,r2,-1
    dce4:	18802126 	beq	r3,r2,dd6c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    dce8:	e0bfff17 	ldw	r2,-4(fp)
    dcec:	10800017 	ldw	r2,0(r2)
    dcf0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    dcf4:	e0bffc17 	ldw	r2,-16(fp)
    dcf8:	10800090 	cmplti	r2,r2,2
    dcfc:	1000061e 	bne	r2,zero,dd18 <altera_avalon_jtag_uart_ioctl+0x7c>
    dd00:	e0fffc17 	ldw	r3,-16(fp)
    dd04:	00a00034 	movhi	r2,32768
    dd08:	10bfffc4 	addi	r2,r2,-1
    dd0c:	18800226 	beq	r3,r2,dd18 <altera_avalon_jtag_uart_ioctl+0x7c>
    dd10:	e0bffc17 	ldw	r2,-16(fp)
    dd14:	00000206 	br	dd20 <altera_avalon_jtag_uart_ioctl+0x84>
    dd18:	00a00034 	movhi	r2,32768
    dd1c:	10bfff84 	addi	r2,r2,-2
    dd20:	e0fffd17 	ldw	r3,-12(fp)
    dd24:	18800115 	stw	r2,4(r3)
      rc = 0;
    dd28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dd2c:	00000f06 	br	dd6c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    dd30:	e0bffd17 	ldw	r2,-12(fp)
    dd34:	10c00117 	ldw	r3,4(r2)
    dd38:	00a00034 	movhi	r2,32768
    dd3c:	10bfffc4 	addi	r2,r2,-1
    dd40:	18800c26 	beq	r3,r2,dd74 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    dd44:	e0bffd17 	ldw	r2,-12(fp)
    dd48:	10c00917 	ldw	r3,36(r2)
    dd4c:	e0bffd17 	ldw	r2,-12(fp)
    dd50:	10800117 	ldw	r2,4(r2)
    dd54:	1885803a 	cmpltu	r2,r3,r2
    dd58:	10c03fcc 	andi	r3,r2,255
    dd5c:	e0bfff17 	ldw	r2,-4(fp)
    dd60:	10c00015 	stw	r3,0(r2)
      rc = 0;
    dd64:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dd68:	00000206 	br	dd74 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    dd6c:	0001883a 	nop
    dd70:	00000106 	br	dd78 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    dd74:	0001883a 	nop

  default:
    break;
  }

  return rc;
    dd78:	e0bffb17 	ldw	r2,-20(fp)
}
    dd7c:	e037883a 	mov	sp,fp
    dd80:	df000017 	ldw	fp,0(sp)
    dd84:	dec00104 	addi	sp,sp,4
    dd88:	f800283a 	ret

0000dd8c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    dd8c:	defff304 	addi	sp,sp,-52
    dd90:	dfc00c15 	stw	ra,48(sp)
    dd94:	df000b15 	stw	fp,44(sp)
    dd98:	df000b04 	addi	fp,sp,44
    dd9c:	e13ffc15 	stw	r4,-16(fp)
    dda0:	e17ffd15 	stw	r5,-12(fp)
    dda4:	e1bffe15 	stw	r6,-8(fp)
    dda8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    ddac:	e0bffd17 	ldw	r2,-12(fp)
    ddb0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ddb4:	00004706 	br	ded4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ddb8:	e0bffc17 	ldw	r2,-16(fp)
    ddbc:	10800a17 	ldw	r2,40(r2)
    ddc0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    ddc4:	e0bffc17 	ldw	r2,-16(fp)
    ddc8:	10800b17 	ldw	r2,44(r2)
    ddcc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    ddd0:	e0fff717 	ldw	r3,-36(fp)
    ddd4:	e0bff817 	ldw	r2,-32(fp)
    ddd8:	18800536 	bltu	r3,r2,ddf0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    dddc:	e0fff717 	ldw	r3,-36(fp)
    dde0:	e0bff817 	ldw	r2,-32(fp)
    dde4:	1885c83a 	sub	r2,r3,r2
    dde8:	e0bff615 	stw	r2,-40(fp)
    ddec:	00000406 	br	de00 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ddf0:	00c20004 	movi	r3,2048
    ddf4:	e0bff817 	ldw	r2,-32(fp)
    ddf8:	1885c83a 	sub	r2,r3,r2
    ddfc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    de00:	e0bff617 	ldw	r2,-40(fp)
    de04:	10001e26 	beq	r2,zero,de80 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    de08:	e0fffe17 	ldw	r3,-8(fp)
    de0c:	e0bff617 	ldw	r2,-40(fp)
    de10:	1880022e 	bgeu	r3,r2,de1c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    de14:	e0bffe17 	ldw	r2,-8(fp)
    de18:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    de1c:	e0bffc17 	ldw	r2,-16(fp)
    de20:	10c00e04 	addi	r3,r2,56
    de24:	e0bff817 	ldw	r2,-32(fp)
    de28:	1885883a 	add	r2,r3,r2
    de2c:	e1bff617 	ldw	r6,-40(fp)
    de30:	100b883a 	mov	r5,r2
    de34:	e13ff517 	ldw	r4,-44(fp)
    de38:	00060cc0 	call	60cc <memcpy>
      ptr   += n;
    de3c:	e0fff517 	ldw	r3,-44(fp)
    de40:	e0bff617 	ldw	r2,-40(fp)
    de44:	1885883a 	add	r2,r3,r2
    de48:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    de4c:	e0fffe17 	ldw	r3,-8(fp)
    de50:	e0bff617 	ldw	r2,-40(fp)
    de54:	1885c83a 	sub	r2,r3,r2
    de58:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    de5c:	e0fff817 	ldw	r3,-32(fp)
    de60:	e0bff617 	ldw	r2,-40(fp)
    de64:	1885883a 	add	r2,r3,r2
    de68:	10c1ffcc 	andi	r3,r2,2047
    de6c:	e0bffc17 	ldw	r2,-16(fp)
    de70:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    de74:	e0bffe17 	ldw	r2,-8(fp)
    de78:	00bfcf16 	blt	zero,r2,ddb8 <__alt_data_end+0xfffeddb8>
    de7c:	00000106 	br	de84 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    de80:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    de84:	e0fff517 	ldw	r3,-44(fp)
    de88:	e0bffd17 	ldw	r2,-12(fp)
    de8c:	1880141e 	bne	r3,r2,dee0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    de90:	e0bfff17 	ldw	r2,-4(fp)
    de94:	1090000c 	andi	r2,r2,16384
    de98:	1000131e 	bne	r2,zero,dee8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    de9c:	0001883a 	nop
    dea0:	e0bffc17 	ldw	r2,-16(fp)
    dea4:	10c00a17 	ldw	r3,40(r2)
    dea8:	e0bff717 	ldw	r2,-36(fp)
    deac:	1880051e 	bne	r3,r2,dec4 <altera_avalon_jtag_uart_read+0x138>
    deb0:	e0bffc17 	ldw	r2,-16(fp)
    deb4:	10c00917 	ldw	r3,36(r2)
    deb8:	e0bffc17 	ldw	r2,-16(fp)
    debc:	10800117 	ldw	r2,4(r2)
    dec0:	18bff736 	bltu	r3,r2,dea0 <__alt_data_end+0xfffedea0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    dec4:	e0bffc17 	ldw	r2,-16(fp)
    dec8:	10c00a17 	ldw	r3,40(r2)
    decc:	e0bff717 	ldw	r2,-36(fp)
    ded0:	18800726 	beq	r3,r2,def0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ded4:	e0bffe17 	ldw	r2,-8(fp)
    ded8:	00bfb716 	blt	zero,r2,ddb8 <__alt_data_end+0xfffeddb8>
    dedc:	00000506 	br	def4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    dee0:	0001883a 	nop
    dee4:	00000306 	br	def4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    dee8:	0001883a 	nop
    deec:	00000106 	br	def4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    def0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    def4:	e0fff517 	ldw	r3,-44(fp)
    def8:	e0bffd17 	ldw	r2,-12(fp)
    defc:	18801826 	beq	r3,r2,df60 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df00:	0005303a 	rdctl	r2,status
    df04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df08:	e0fffb17 	ldw	r3,-20(fp)
    df0c:	00bfff84 	movi	r2,-2
    df10:	1884703a 	and	r2,r3,r2
    df14:	1001703a 	wrctl	status,r2
  
  return context;
    df18:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    df1c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    df20:	e0bffc17 	ldw	r2,-16(fp)
    df24:	10800817 	ldw	r2,32(r2)
    df28:	10c00054 	ori	r3,r2,1
    df2c:	e0bffc17 	ldw	r2,-16(fp)
    df30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    df34:	e0bffc17 	ldw	r2,-16(fp)
    df38:	10800017 	ldw	r2,0(r2)
    df3c:	10800104 	addi	r2,r2,4
    df40:	1007883a 	mov	r3,r2
    df44:	e0bffc17 	ldw	r2,-16(fp)
    df48:	10800817 	ldw	r2,32(r2)
    df4c:	18800035 	stwio	r2,0(r3)
    df50:	e0bffa17 	ldw	r2,-24(fp)
    df54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df58:	e0bff917 	ldw	r2,-28(fp)
    df5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    df60:	e0fff517 	ldw	r3,-44(fp)
    df64:	e0bffd17 	ldw	r2,-12(fp)
    df68:	18800426 	beq	r3,r2,df7c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    df6c:	e0fff517 	ldw	r3,-44(fp)
    df70:	e0bffd17 	ldw	r2,-12(fp)
    df74:	1885c83a 	sub	r2,r3,r2
    df78:	00000606 	br	df94 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    df7c:	e0bfff17 	ldw	r2,-4(fp)
    df80:	1090000c 	andi	r2,r2,16384
    df84:	10000226 	beq	r2,zero,df90 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    df88:	00bffd44 	movi	r2,-11
    df8c:	00000106 	br	df94 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    df90:	00bffec4 	movi	r2,-5
}
    df94:	e037883a 	mov	sp,fp
    df98:	dfc00117 	ldw	ra,4(sp)
    df9c:	df000017 	ldw	fp,0(sp)
    dfa0:	dec00204 	addi	sp,sp,8
    dfa4:	f800283a 	ret

0000dfa8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    dfa8:	defff304 	addi	sp,sp,-52
    dfac:	dfc00c15 	stw	ra,48(sp)
    dfb0:	df000b15 	stw	fp,44(sp)
    dfb4:	df000b04 	addi	fp,sp,44
    dfb8:	e13ffc15 	stw	r4,-16(fp)
    dfbc:	e17ffd15 	stw	r5,-12(fp)
    dfc0:	e1bffe15 	stw	r6,-8(fp)
    dfc4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    dfc8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    dfcc:	e0bffd17 	ldw	r2,-12(fp)
    dfd0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    dfd4:	00003706 	br	e0b4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    dfd8:	e0bffc17 	ldw	r2,-16(fp)
    dfdc:	10800c17 	ldw	r2,48(r2)
    dfe0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    dfe4:	e0bffc17 	ldw	r2,-16(fp)
    dfe8:	10800d17 	ldw	r2,52(r2)
    dfec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    dff0:	e0fff917 	ldw	r3,-28(fp)
    dff4:	e0bff517 	ldw	r2,-44(fp)
    dff8:	1880062e 	bgeu	r3,r2,e014 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    dffc:	e0fff517 	ldw	r3,-44(fp)
    e000:	e0bff917 	ldw	r2,-28(fp)
    e004:	1885c83a 	sub	r2,r3,r2
    e008:	10bfffc4 	addi	r2,r2,-1
    e00c:	e0bff615 	stw	r2,-40(fp)
    e010:	00000b06 	br	e040 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    e014:	e0bff517 	ldw	r2,-44(fp)
    e018:	10000526 	beq	r2,zero,e030 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e01c:	00c20004 	movi	r3,2048
    e020:	e0bff917 	ldw	r2,-28(fp)
    e024:	1885c83a 	sub	r2,r3,r2
    e028:	e0bff615 	stw	r2,-40(fp)
    e02c:	00000406 	br	e040 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e030:	00c1ffc4 	movi	r3,2047
    e034:	e0bff917 	ldw	r2,-28(fp)
    e038:	1885c83a 	sub	r2,r3,r2
    e03c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e040:	e0bff617 	ldw	r2,-40(fp)
    e044:	10001e26 	beq	r2,zero,e0c0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    e048:	e0fffe17 	ldw	r3,-8(fp)
    e04c:	e0bff617 	ldw	r2,-40(fp)
    e050:	1880022e 	bgeu	r3,r2,e05c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    e054:	e0bffe17 	ldw	r2,-8(fp)
    e058:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e05c:	e0bffc17 	ldw	r2,-16(fp)
    e060:	10c20e04 	addi	r3,r2,2104
    e064:	e0bff917 	ldw	r2,-28(fp)
    e068:	1885883a 	add	r2,r3,r2
    e06c:	e1bff617 	ldw	r6,-40(fp)
    e070:	e17ffd17 	ldw	r5,-12(fp)
    e074:	1009883a 	mov	r4,r2
    e078:	00060cc0 	call	60cc <memcpy>
      ptr   += n;
    e07c:	e0fffd17 	ldw	r3,-12(fp)
    e080:	e0bff617 	ldw	r2,-40(fp)
    e084:	1885883a 	add	r2,r3,r2
    e088:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e08c:	e0fffe17 	ldw	r3,-8(fp)
    e090:	e0bff617 	ldw	r2,-40(fp)
    e094:	1885c83a 	sub	r2,r3,r2
    e098:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e09c:	e0fff917 	ldw	r3,-28(fp)
    e0a0:	e0bff617 	ldw	r2,-40(fp)
    e0a4:	1885883a 	add	r2,r3,r2
    e0a8:	10c1ffcc 	andi	r3,r2,2047
    e0ac:	e0bffc17 	ldw	r2,-16(fp)
    e0b0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e0b4:	e0bffe17 	ldw	r2,-8(fp)
    e0b8:	00bfc716 	blt	zero,r2,dfd8 <__alt_data_end+0xfffedfd8>
    e0bc:	00000106 	br	e0c4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    e0c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e0c4:	0005303a 	rdctl	r2,status
    e0c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e0cc:	e0fffb17 	ldw	r3,-20(fp)
    e0d0:	00bfff84 	movi	r2,-2
    e0d4:	1884703a 	and	r2,r3,r2
    e0d8:	1001703a 	wrctl	status,r2
  
  return context;
    e0dc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e0e0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e0e4:	e0bffc17 	ldw	r2,-16(fp)
    e0e8:	10800817 	ldw	r2,32(r2)
    e0ec:	10c00094 	ori	r3,r2,2
    e0f0:	e0bffc17 	ldw	r2,-16(fp)
    e0f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e0f8:	e0bffc17 	ldw	r2,-16(fp)
    e0fc:	10800017 	ldw	r2,0(r2)
    e100:	10800104 	addi	r2,r2,4
    e104:	1007883a 	mov	r3,r2
    e108:	e0bffc17 	ldw	r2,-16(fp)
    e10c:	10800817 	ldw	r2,32(r2)
    e110:	18800035 	stwio	r2,0(r3)
    e114:	e0bffa17 	ldw	r2,-24(fp)
    e118:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e11c:	e0bff817 	ldw	r2,-32(fp)
    e120:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e124:	e0bffe17 	ldw	r2,-8(fp)
    e128:	0080100e 	bge	zero,r2,e16c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    e12c:	e0bfff17 	ldw	r2,-4(fp)
    e130:	1090000c 	andi	r2,r2,16384
    e134:	1000101e 	bne	r2,zero,e178 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e138:	0001883a 	nop
    e13c:	e0bffc17 	ldw	r2,-16(fp)
    e140:	10c00d17 	ldw	r3,52(r2)
    e144:	e0bff517 	ldw	r2,-44(fp)
    e148:	1880051e 	bne	r3,r2,e160 <altera_avalon_jtag_uart_write+0x1b8>
    e14c:	e0bffc17 	ldw	r2,-16(fp)
    e150:	10c00917 	ldw	r3,36(r2)
    e154:	e0bffc17 	ldw	r2,-16(fp)
    e158:	10800117 	ldw	r2,4(r2)
    e15c:	18bff736 	bltu	r3,r2,e13c <__alt_data_end+0xfffee13c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e160:	e0bffc17 	ldw	r2,-16(fp)
    e164:	10800917 	ldw	r2,36(r2)
    e168:	1000051e 	bne	r2,zero,e180 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    e16c:	e0bffe17 	ldw	r2,-8(fp)
    e170:	00bfd016 	blt	zero,r2,e0b4 <__alt_data_end+0xfffee0b4>
    e174:	00000306 	br	e184 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e178:	0001883a 	nop
    e17c:	00000106 	br	e184 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e180:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e184:	e0fffd17 	ldw	r3,-12(fp)
    e188:	e0bff717 	ldw	r2,-36(fp)
    e18c:	18800426 	beq	r3,r2,e1a0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    e190:	e0fffd17 	ldw	r3,-12(fp)
    e194:	e0bff717 	ldw	r2,-36(fp)
    e198:	1885c83a 	sub	r2,r3,r2
    e19c:	00000606 	br	e1b8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    e1a0:	e0bfff17 	ldw	r2,-4(fp)
    e1a4:	1090000c 	andi	r2,r2,16384
    e1a8:	10000226 	beq	r2,zero,e1b4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    e1ac:	00bffd44 	movi	r2,-11
    e1b0:	00000106 	br	e1b8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e1b4:	00bffec4 	movi	r2,-5
}
    e1b8:	e037883a 	mov	sp,fp
    e1bc:	dfc00117 	ldw	ra,4(sp)
    e1c0:	df000017 	ldw	fp,0(sp)
    e1c4:	dec00204 	addi	sp,sp,8
    e1c8:	f800283a 	ret

0000e1cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e1cc:	defff504 	addi	sp,sp,-44
    e1d0:	df000a15 	stw	fp,40(sp)
    e1d4:	df000a04 	addi	fp,sp,40
    e1d8:	e13ffc15 	stw	r4,-16(fp)
    e1dc:	e17ffd15 	stw	r5,-12(fp)
    e1e0:	e1bffe15 	stw	r6,-8(fp)
    e1e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e1e8:	e03ff615 	stw	zero,-40(fp)
    e1ec:	d0a6d617 	ldw	r2,-25768(gp)
  
  if (alt_ticks_per_second ())
    e1f0:	10003c26 	beq	r2,zero,e2e4 <alt_alarm_start+0x118>
  {
    if (alarm)
    e1f4:	e0bffc17 	ldw	r2,-16(fp)
    e1f8:	10003826 	beq	r2,zero,e2dc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    e1fc:	e0bffc17 	ldw	r2,-16(fp)
    e200:	e0fffe17 	ldw	r3,-8(fp)
    e204:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e208:	e0bffc17 	ldw	r2,-16(fp)
    e20c:	e0ffff17 	ldw	r3,-4(fp)
    e210:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e214:	0005303a 	rdctl	r2,status
    e218:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e21c:	e0fff917 	ldw	r3,-28(fp)
    e220:	00bfff84 	movi	r2,-2
    e224:	1884703a 	and	r2,r3,r2
    e228:	1001703a 	wrctl	status,r2
  
  return context;
    e22c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    e230:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e234:	d0a6d717 	ldw	r2,-25764(gp)
      
      current_nticks = alt_nticks();
    e238:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e23c:	e0fffd17 	ldw	r3,-12(fp)
    e240:	e0bff617 	ldw	r2,-40(fp)
    e244:	1885883a 	add	r2,r3,r2
    e248:	10c00044 	addi	r3,r2,1
    e24c:	e0bffc17 	ldw	r2,-16(fp)
    e250:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e254:	e0bffc17 	ldw	r2,-16(fp)
    e258:	10c00217 	ldw	r3,8(r2)
    e25c:	e0bff617 	ldw	r2,-40(fp)
    e260:	1880042e 	bgeu	r3,r2,e274 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    e264:	e0bffc17 	ldw	r2,-16(fp)
    e268:	00c00044 	movi	r3,1
    e26c:	10c00405 	stb	r3,16(r2)
    e270:	00000206 	br	e27c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    e274:	e0bffc17 	ldw	r2,-16(fp)
    e278:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e27c:	e0bffc17 	ldw	r2,-16(fp)
    e280:	d0e00e04 	addi	r3,gp,-32712
    e284:	e0fffa15 	stw	r3,-24(fp)
    e288:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e28c:	e0bffb17 	ldw	r2,-20(fp)
    e290:	e0fffa17 	ldw	r3,-24(fp)
    e294:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e298:	e0bffa17 	ldw	r2,-24(fp)
    e29c:	10c00017 	ldw	r3,0(r2)
    e2a0:	e0bffb17 	ldw	r2,-20(fp)
    e2a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e2a8:	e0bffa17 	ldw	r2,-24(fp)
    e2ac:	10800017 	ldw	r2,0(r2)
    e2b0:	e0fffb17 	ldw	r3,-20(fp)
    e2b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e2b8:	e0bffa17 	ldw	r2,-24(fp)
    e2bc:	e0fffb17 	ldw	r3,-20(fp)
    e2c0:	10c00015 	stw	r3,0(r2)
    e2c4:	e0bff817 	ldw	r2,-32(fp)
    e2c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e2cc:	e0bff717 	ldw	r2,-36(fp)
    e2d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    e2d4:	0005883a 	mov	r2,zero
    e2d8:	00000306 	br	e2e8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    e2dc:	00bffa84 	movi	r2,-22
    e2e0:	00000106 	br	e2e8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    e2e4:	00bfde84 	movi	r2,-134
  }
}
    e2e8:	e037883a 	mov	sp,fp
    e2ec:	df000017 	ldw	fp,0(sp)
    e2f0:	dec00104 	addi	sp,sp,4
    e2f4:	f800283a 	ret

0000e2f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e2f8:	defffe04 	addi	sp,sp,-8
    e2fc:	df000115 	stw	fp,4(sp)
    e300:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e304:	e03fff15 	stw	zero,-4(fp)
    e308:	00000506 	br	e320 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    e30c:	e0bfff17 	ldw	r2,-4(fp)
    e310:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e314:	e0bfff17 	ldw	r2,-4(fp)
    e318:	10800804 	addi	r2,r2,32
    e31c:	e0bfff15 	stw	r2,-4(fp)
    e320:	e0bfff17 	ldw	r2,-4(fp)
    e324:	10820030 	cmpltui	r2,r2,2048
    e328:	103ff81e 	bne	r2,zero,e30c <__alt_data_end+0xfffee30c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e32c:	0001883a 	nop
    e330:	e037883a 	mov	sp,fp
    e334:	df000017 	ldw	fp,0(sp)
    e338:	dec00104 	addi	sp,sp,4
    e33c:	f800283a 	ret

0000e340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e340:	defffe04 	addi	sp,sp,-8
    e344:	dfc00115 	stw	ra,4(sp)
    e348:	df000015 	stw	fp,0(sp)
    e34c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e350:	d0a00b17 	ldw	r2,-32724(gp)
    e354:	10000326 	beq	r2,zero,e364 <alt_get_errno+0x24>
    e358:	d0a00b17 	ldw	r2,-32724(gp)
    e35c:	103ee83a 	callr	r2
    e360:	00000106 	br	e368 <alt_get_errno+0x28>
    e364:	d0a6d104 	addi	r2,gp,-25788
}
    e368:	e037883a 	mov	sp,fp
    e36c:	dfc00117 	ldw	ra,4(sp)
    e370:	df000017 	ldw	fp,0(sp)
    e374:	dec00204 	addi	sp,sp,8
    e378:	f800283a 	ret

0000e37c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e37c:	defffa04 	addi	sp,sp,-24
    e380:	dfc00515 	stw	ra,20(sp)
    e384:	df000415 	stw	fp,16(sp)
    e388:	df000404 	addi	fp,sp,16
    e38c:	e13ffe15 	stw	r4,-8(fp)
    e390:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e394:	e0bffe17 	ldw	r2,-8(fp)
    e398:	10000326 	beq	r2,zero,e3a8 <alt_dev_llist_insert+0x2c>
    e39c:	e0bffe17 	ldw	r2,-8(fp)
    e3a0:	10800217 	ldw	r2,8(r2)
    e3a4:	1000061e 	bne	r2,zero,e3c0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    e3a8:	000e3400 	call	e340 <alt_get_errno>
    e3ac:	1007883a 	mov	r3,r2
    e3b0:	00800584 	movi	r2,22
    e3b4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e3b8:	00bffa84 	movi	r2,-22
    e3bc:	00001306 	br	e40c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e3c0:	e0bffe17 	ldw	r2,-8(fp)
    e3c4:	e0ffff17 	ldw	r3,-4(fp)
    e3c8:	e0fffc15 	stw	r3,-16(fp)
    e3cc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e3d0:	e0bffd17 	ldw	r2,-12(fp)
    e3d4:	e0fffc17 	ldw	r3,-16(fp)
    e3d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e3dc:	e0bffc17 	ldw	r2,-16(fp)
    e3e0:	10c00017 	ldw	r3,0(r2)
    e3e4:	e0bffd17 	ldw	r2,-12(fp)
    e3e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e3ec:	e0bffc17 	ldw	r2,-16(fp)
    e3f0:	10800017 	ldw	r2,0(r2)
    e3f4:	e0fffd17 	ldw	r3,-12(fp)
    e3f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e3fc:	e0bffc17 	ldw	r2,-16(fp)
    e400:	e0fffd17 	ldw	r3,-12(fp)
    e404:	10c00015 	stw	r3,0(r2)

  return 0;  
    e408:	0005883a 	mov	r2,zero
}
    e40c:	e037883a 	mov	sp,fp
    e410:	dfc00117 	ldw	ra,4(sp)
    e414:	df000017 	ldw	fp,0(sp)
    e418:	dec00204 	addi	sp,sp,8
    e41c:	f800283a 	ret

0000e420 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e420:	defffd04 	addi	sp,sp,-12
    e424:	dfc00215 	stw	ra,8(sp)
    e428:	df000115 	stw	fp,4(sp)
    e42c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e430:	00800074 	movhi	r2,1
    e434:	10bcdb04 	addi	r2,r2,-3220
    e438:	e0bfff15 	stw	r2,-4(fp)
    e43c:	00000606 	br	e458 <_do_ctors+0x38>
        (*ctor) (); 
    e440:	e0bfff17 	ldw	r2,-4(fp)
    e444:	10800017 	ldw	r2,0(r2)
    e448:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e44c:	e0bfff17 	ldw	r2,-4(fp)
    e450:	10bfff04 	addi	r2,r2,-4
    e454:	e0bfff15 	stw	r2,-4(fp)
    e458:	e0ffff17 	ldw	r3,-4(fp)
    e45c:	00800074 	movhi	r2,1
    e460:	10bcdc04 	addi	r2,r2,-3216
    e464:	18bff62e 	bgeu	r3,r2,e440 <__alt_data_end+0xfffee440>
        (*ctor) (); 
}
    e468:	0001883a 	nop
    e46c:	e037883a 	mov	sp,fp
    e470:	dfc00117 	ldw	ra,4(sp)
    e474:	df000017 	ldw	fp,0(sp)
    e478:	dec00204 	addi	sp,sp,8
    e47c:	f800283a 	ret

0000e480 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e480:	defffd04 	addi	sp,sp,-12
    e484:	dfc00215 	stw	ra,8(sp)
    e488:	df000115 	stw	fp,4(sp)
    e48c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e490:	00800074 	movhi	r2,1
    e494:	10bcdb04 	addi	r2,r2,-3220
    e498:	e0bfff15 	stw	r2,-4(fp)
    e49c:	00000606 	br	e4b8 <_do_dtors+0x38>
        (*dtor) (); 
    e4a0:	e0bfff17 	ldw	r2,-4(fp)
    e4a4:	10800017 	ldw	r2,0(r2)
    e4a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e4ac:	e0bfff17 	ldw	r2,-4(fp)
    e4b0:	10bfff04 	addi	r2,r2,-4
    e4b4:	e0bfff15 	stw	r2,-4(fp)
    e4b8:	e0ffff17 	ldw	r3,-4(fp)
    e4bc:	00800074 	movhi	r2,1
    e4c0:	10bcdc04 	addi	r2,r2,-3216
    e4c4:	18bff62e 	bgeu	r3,r2,e4a0 <__alt_data_end+0xfffee4a0>
        (*dtor) (); 
}
    e4c8:	0001883a 	nop
    e4cc:	e037883a 	mov	sp,fp
    e4d0:	dfc00117 	ldw	ra,4(sp)
    e4d4:	df000017 	ldw	fp,0(sp)
    e4d8:	dec00204 	addi	sp,sp,8
    e4dc:	f800283a 	ret

0000e4e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    e4e0:	defffe04 	addi	sp,sp,-8
    e4e4:	dfc00115 	stw	ra,4(sp)
    e4e8:	df000015 	stw	fp,0(sp)
    e4ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    e4f0:	01440004 	movi	r5,4096
    e4f4:	0009883a 	mov	r4,zero
    e4f8:	000ef4c0 	call	ef4c <alt_icache_flush>
#endif
}
    e4fc:	0001883a 	nop
    e500:	e037883a 	mov	sp,fp
    e504:	dfc00117 	ldw	ra,4(sp)
    e508:	df000017 	ldw	fp,0(sp)
    e50c:	dec00204 	addi	sp,sp,8
    e510:	f800283a 	ret

0000e514 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e514:	defff904 	addi	sp,sp,-28
    e518:	dfc00615 	stw	ra,24(sp)
    e51c:	df000515 	stw	fp,20(sp)
    e520:	df000504 	addi	fp,sp,20
    e524:	e13ffc15 	stw	r4,-16(fp)
    e528:	e17ffd15 	stw	r5,-12(fp)
    e52c:	e1bffe15 	stw	r6,-8(fp)
    e530:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    e534:	e0800217 	ldw	r2,8(fp)
    e538:	d8800015 	stw	r2,0(sp)
    e53c:	e1ffff17 	ldw	r7,-4(fp)
    e540:	e1bffe17 	ldw	r6,-8(fp)
    e544:	e17ffd17 	ldw	r5,-12(fp)
    e548:	e13ffc17 	ldw	r4,-16(fp)
    e54c:	000e6c40 	call	e6c4 <alt_iic_isr_register>
}  
    e550:	e037883a 	mov	sp,fp
    e554:	dfc00117 	ldw	ra,4(sp)
    e558:	df000017 	ldw	fp,0(sp)
    e55c:	dec00204 	addi	sp,sp,8
    e560:	f800283a 	ret

0000e564 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    e564:	defff904 	addi	sp,sp,-28
    e568:	df000615 	stw	fp,24(sp)
    e56c:	df000604 	addi	fp,sp,24
    e570:	e13ffe15 	stw	r4,-8(fp)
    e574:	e17fff15 	stw	r5,-4(fp)
    e578:	e0bfff17 	ldw	r2,-4(fp)
    e57c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e580:	0005303a 	rdctl	r2,status
    e584:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e588:	e0fffb17 	ldw	r3,-20(fp)
    e58c:	00bfff84 	movi	r2,-2
    e590:	1884703a 	and	r2,r3,r2
    e594:	1001703a 	wrctl	status,r2
  
  return context;
    e598:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e59c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    e5a0:	00c00044 	movi	r3,1
    e5a4:	e0bffa17 	ldw	r2,-24(fp)
    e5a8:	1884983a 	sll	r2,r3,r2
    e5ac:	1007883a 	mov	r3,r2
    e5b0:	d0a6d517 	ldw	r2,-25772(gp)
    e5b4:	1884b03a 	or	r2,r3,r2
    e5b8:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e5bc:	d0a6d517 	ldw	r2,-25772(gp)
    e5c0:	100170fa 	wrctl	ienable,r2
    e5c4:	e0bffc17 	ldw	r2,-16(fp)
    e5c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e5cc:	e0bffd17 	ldw	r2,-12(fp)
    e5d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e5d4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    e5d8:	0001883a 	nop
}
    e5dc:	e037883a 	mov	sp,fp
    e5e0:	df000017 	ldw	fp,0(sp)
    e5e4:	dec00104 	addi	sp,sp,4
    e5e8:	f800283a 	ret

0000e5ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    e5ec:	defff904 	addi	sp,sp,-28
    e5f0:	df000615 	stw	fp,24(sp)
    e5f4:	df000604 	addi	fp,sp,24
    e5f8:	e13ffe15 	stw	r4,-8(fp)
    e5fc:	e17fff15 	stw	r5,-4(fp)
    e600:	e0bfff17 	ldw	r2,-4(fp)
    e604:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e608:	0005303a 	rdctl	r2,status
    e60c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e610:	e0fffb17 	ldw	r3,-20(fp)
    e614:	00bfff84 	movi	r2,-2
    e618:	1884703a 	and	r2,r3,r2
    e61c:	1001703a 	wrctl	status,r2
  
  return context;
    e620:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    e624:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    e628:	00c00044 	movi	r3,1
    e62c:	e0bffa17 	ldw	r2,-24(fp)
    e630:	1884983a 	sll	r2,r3,r2
    e634:	0084303a 	nor	r2,zero,r2
    e638:	1007883a 	mov	r3,r2
    e63c:	d0a6d517 	ldw	r2,-25772(gp)
    e640:	1884703a 	and	r2,r3,r2
    e644:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    e648:	d0a6d517 	ldw	r2,-25772(gp)
    e64c:	100170fa 	wrctl	ienable,r2
    e650:	e0bffc17 	ldw	r2,-16(fp)
    e654:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e658:	e0bffd17 	ldw	r2,-12(fp)
    e65c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    e660:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    e664:	0001883a 	nop
}
    e668:	e037883a 	mov	sp,fp
    e66c:	df000017 	ldw	fp,0(sp)
    e670:	dec00104 	addi	sp,sp,4
    e674:	f800283a 	ret

0000e678 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    e678:	defffc04 	addi	sp,sp,-16
    e67c:	df000315 	stw	fp,12(sp)
    e680:	df000304 	addi	fp,sp,12
    e684:	e13ffe15 	stw	r4,-8(fp)
    e688:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    e68c:	000530fa 	rdctl	r2,ienable
    e690:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    e694:	00c00044 	movi	r3,1
    e698:	e0bfff17 	ldw	r2,-4(fp)
    e69c:	1884983a 	sll	r2,r3,r2
    e6a0:	1007883a 	mov	r3,r2
    e6a4:	e0bffd17 	ldw	r2,-12(fp)
    e6a8:	1884703a 	and	r2,r3,r2
    e6ac:	1004c03a 	cmpne	r2,r2,zero
    e6b0:	10803fcc 	andi	r2,r2,255
}
    e6b4:	e037883a 	mov	sp,fp
    e6b8:	df000017 	ldw	fp,0(sp)
    e6bc:	dec00104 	addi	sp,sp,4
    e6c0:	f800283a 	ret

0000e6c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e6c4:	defff504 	addi	sp,sp,-44
    e6c8:	dfc00a15 	stw	ra,40(sp)
    e6cc:	df000915 	stw	fp,36(sp)
    e6d0:	df000904 	addi	fp,sp,36
    e6d4:	e13ffc15 	stw	r4,-16(fp)
    e6d8:	e17ffd15 	stw	r5,-12(fp)
    e6dc:	e1bffe15 	stw	r6,-8(fp)
    e6e0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    e6e4:	00bffa84 	movi	r2,-22
    e6e8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    e6ec:	e0bffd17 	ldw	r2,-12(fp)
    e6f0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e6f4:	e0bff817 	ldw	r2,-32(fp)
    e6f8:	10800808 	cmpgei	r2,r2,32
    e6fc:	1000271e 	bne	r2,zero,e79c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e700:	0005303a 	rdctl	r2,status
    e704:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e708:	e0fffb17 	ldw	r3,-20(fp)
    e70c:	00bfff84 	movi	r2,-2
    e710:	1884703a 	and	r2,r3,r2
    e714:	1001703a 	wrctl	status,r2
  
  return context;
    e718:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    e71c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    e720:	00800074 	movhi	r2,1
    e724:	108b8a04 	addi	r2,r2,11816
    e728:	e0fff817 	ldw	r3,-32(fp)
    e72c:	180690fa 	slli	r3,r3,3
    e730:	10c5883a 	add	r2,r2,r3
    e734:	e0fffe17 	ldw	r3,-8(fp)
    e738:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    e73c:	00800074 	movhi	r2,1
    e740:	108b8a04 	addi	r2,r2,11816
    e744:	e0fff817 	ldw	r3,-32(fp)
    e748:	180690fa 	slli	r3,r3,3
    e74c:	10c5883a 	add	r2,r2,r3
    e750:	10800104 	addi	r2,r2,4
    e754:	e0ffff17 	ldw	r3,-4(fp)
    e758:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    e75c:	e0bffe17 	ldw	r2,-8(fp)
    e760:	10000526 	beq	r2,zero,e778 <alt_iic_isr_register+0xb4>
    e764:	e0bff817 	ldw	r2,-32(fp)
    e768:	100b883a 	mov	r5,r2
    e76c:	e13ffc17 	ldw	r4,-16(fp)
    e770:	000e5640 	call	e564 <alt_ic_irq_enable>
    e774:	00000406 	br	e788 <alt_iic_isr_register+0xc4>
    e778:	e0bff817 	ldw	r2,-32(fp)
    e77c:	100b883a 	mov	r5,r2
    e780:	e13ffc17 	ldw	r4,-16(fp)
    e784:	000e5ec0 	call	e5ec <alt_ic_irq_disable>
    e788:	e0bff715 	stw	r2,-36(fp)
    e78c:	e0bffa17 	ldw	r2,-24(fp)
    e790:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e794:	e0bff917 	ldw	r2,-28(fp)
    e798:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    e79c:	e0bff717 	ldw	r2,-36(fp)
}
    e7a0:	e037883a 	mov	sp,fp
    e7a4:	dfc00117 	ldw	ra,4(sp)
    e7a8:	df000017 	ldw	fp,0(sp)
    e7ac:	dec00204 	addi	sp,sp,8
    e7b0:	f800283a 	ret

0000e7b4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    e7b4:	defff904 	addi	sp,sp,-28
    e7b8:	dfc00615 	stw	ra,24(sp)
    e7bc:	df000515 	stw	fp,20(sp)
    e7c0:	df000504 	addi	fp,sp,20
    e7c4:	e13ffc15 	stw	r4,-16(fp)
    e7c8:	e17ffd15 	stw	r5,-12(fp)
    e7cc:	e1bffe15 	stw	r6,-8(fp)
    e7d0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    e7d4:	e1bfff17 	ldw	r6,-4(fp)
    e7d8:	e17ffe17 	ldw	r5,-8(fp)
    e7dc:	e13ffd17 	ldw	r4,-12(fp)
    e7e0:	000e9f40 	call	e9f4 <open>
    e7e4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    e7e8:	e0bffb17 	ldw	r2,-20(fp)
    e7ec:	10001c16 	blt	r2,zero,e860 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    e7f0:	00800074 	movhi	r2,1
    e7f4:	10803004 	addi	r2,r2,192
    e7f8:	e0fffb17 	ldw	r3,-20(fp)
    e7fc:	18c00324 	muli	r3,r3,12
    e800:	10c5883a 	add	r2,r2,r3
    e804:	10c00017 	ldw	r3,0(r2)
    e808:	e0bffc17 	ldw	r2,-16(fp)
    e80c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    e810:	00800074 	movhi	r2,1
    e814:	10803004 	addi	r2,r2,192
    e818:	e0fffb17 	ldw	r3,-20(fp)
    e81c:	18c00324 	muli	r3,r3,12
    e820:	10c5883a 	add	r2,r2,r3
    e824:	10800104 	addi	r2,r2,4
    e828:	10c00017 	ldw	r3,0(r2)
    e82c:	e0bffc17 	ldw	r2,-16(fp)
    e830:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    e834:	00800074 	movhi	r2,1
    e838:	10803004 	addi	r2,r2,192
    e83c:	e0fffb17 	ldw	r3,-20(fp)
    e840:	18c00324 	muli	r3,r3,12
    e844:	10c5883a 	add	r2,r2,r3
    e848:	10800204 	addi	r2,r2,8
    e84c:	10c00017 	ldw	r3,0(r2)
    e850:	e0bffc17 	ldw	r2,-16(fp)
    e854:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    e858:	e13ffb17 	ldw	r4,-20(fp)
    e85c:	000d4680 	call	d468 <alt_release_fd>
  }
} 
    e860:	0001883a 	nop
    e864:	e037883a 	mov	sp,fp
    e868:	dfc00117 	ldw	ra,4(sp)
    e86c:	df000017 	ldw	fp,0(sp)
    e870:	dec00204 	addi	sp,sp,8
    e874:	f800283a 	ret

0000e878 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    e878:	defffb04 	addi	sp,sp,-20
    e87c:	dfc00415 	stw	ra,16(sp)
    e880:	df000315 	stw	fp,12(sp)
    e884:	df000304 	addi	fp,sp,12
    e888:	e13ffd15 	stw	r4,-12(fp)
    e88c:	e17ffe15 	stw	r5,-8(fp)
    e890:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    e894:	01c07fc4 	movi	r7,511
    e898:	01800044 	movi	r6,1
    e89c:	e17ffd17 	ldw	r5,-12(fp)
    e8a0:	01000074 	movhi	r4,1
    e8a4:	21003304 	addi	r4,r4,204
    e8a8:	000e7b40 	call	e7b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    e8ac:	01c07fc4 	movi	r7,511
    e8b0:	000d883a 	mov	r6,zero
    e8b4:	e17ffe17 	ldw	r5,-8(fp)
    e8b8:	01000074 	movhi	r4,1
    e8bc:	21003004 	addi	r4,r4,192
    e8c0:	000e7b40 	call	e7b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    e8c4:	01c07fc4 	movi	r7,511
    e8c8:	01800044 	movi	r6,1
    e8cc:	e17fff17 	ldw	r5,-4(fp)
    e8d0:	01000074 	movhi	r4,1
    e8d4:	21003604 	addi	r4,r4,216
    e8d8:	000e7b40 	call	e7b4 <alt_open_fd>
}  
    e8dc:	0001883a 	nop
    e8e0:	e037883a 	mov	sp,fp
    e8e4:	dfc00117 	ldw	ra,4(sp)
    e8e8:	df000017 	ldw	fp,0(sp)
    e8ec:	dec00204 	addi	sp,sp,8
    e8f0:	f800283a 	ret

0000e8f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e8f4:	defffe04 	addi	sp,sp,-8
    e8f8:	dfc00115 	stw	ra,4(sp)
    e8fc:	df000015 	stw	fp,0(sp)
    e900:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e904:	d0a00b17 	ldw	r2,-32724(gp)
    e908:	10000326 	beq	r2,zero,e918 <alt_get_errno+0x24>
    e90c:	d0a00b17 	ldw	r2,-32724(gp)
    e910:	103ee83a 	callr	r2
    e914:	00000106 	br	e91c <alt_get_errno+0x28>
    e918:	d0a6d104 	addi	r2,gp,-25788
}
    e91c:	e037883a 	mov	sp,fp
    e920:	dfc00117 	ldw	ra,4(sp)
    e924:	df000017 	ldw	fp,0(sp)
    e928:	dec00204 	addi	sp,sp,8
    e92c:	f800283a 	ret

0000e930 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    e930:	defffd04 	addi	sp,sp,-12
    e934:	df000215 	stw	fp,8(sp)
    e938:	df000204 	addi	fp,sp,8
    e93c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    e940:	e0bfff17 	ldw	r2,-4(fp)
    e944:	10800217 	ldw	r2,8(r2)
    e948:	10d00034 	orhi	r3,r2,16384
    e94c:	e0bfff17 	ldw	r2,-4(fp)
    e950:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e954:	e03ffe15 	stw	zero,-8(fp)
    e958:	00001d06 	br	e9d0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e95c:	00800074 	movhi	r2,1
    e960:	10803004 	addi	r2,r2,192
    e964:	e0fffe17 	ldw	r3,-8(fp)
    e968:	18c00324 	muli	r3,r3,12
    e96c:	10c5883a 	add	r2,r2,r3
    e970:	10c00017 	ldw	r3,0(r2)
    e974:	e0bfff17 	ldw	r2,-4(fp)
    e978:	10800017 	ldw	r2,0(r2)
    e97c:	1880111e 	bne	r3,r2,e9c4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    e980:	00800074 	movhi	r2,1
    e984:	10803004 	addi	r2,r2,192
    e988:	e0fffe17 	ldw	r3,-8(fp)
    e98c:	18c00324 	muli	r3,r3,12
    e990:	10c5883a 	add	r2,r2,r3
    e994:	10800204 	addi	r2,r2,8
    e998:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e99c:	1000090e 	bge	r2,zero,e9c4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    e9a0:	e0bffe17 	ldw	r2,-8(fp)
    e9a4:	10c00324 	muli	r3,r2,12
    e9a8:	00800074 	movhi	r2,1
    e9ac:	10803004 	addi	r2,r2,192
    e9b0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    e9b4:	e0bfff17 	ldw	r2,-4(fp)
    e9b8:	18800226 	beq	r3,r2,e9c4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    e9bc:	00bffcc4 	movi	r2,-13
    e9c0:	00000806 	br	e9e4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e9c4:	e0bffe17 	ldw	r2,-8(fp)
    e9c8:	10800044 	addi	r2,r2,1
    e9cc:	e0bffe15 	stw	r2,-8(fp)
    e9d0:	d0a00a17 	ldw	r2,-32728(gp)
    e9d4:	1007883a 	mov	r3,r2
    e9d8:	e0bffe17 	ldw	r2,-8(fp)
    e9dc:	18bfdf2e 	bgeu	r3,r2,e95c <__alt_data_end+0xfffee95c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    e9e0:	0005883a 	mov	r2,zero
}
    e9e4:	e037883a 	mov	sp,fp
    e9e8:	df000017 	ldw	fp,0(sp)
    e9ec:	dec00104 	addi	sp,sp,4
    e9f0:	f800283a 	ret

0000e9f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    e9f4:	defff604 	addi	sp,sp,-40
    e9f8:	dfc00915 	stw	ra,36(sp)
    e9fc:	df000815 	stw	fp,32(sp)
    ea00:	df000804 	addi	fp,sp,32
    ea04:	e13ffd15 	stw	r4,-12(fp)
    ea08:	e17ffe15 	stw	r5,-8(fp)
    ea0c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    ea10:	00bfffc4 	movi	r2,-1
    ea14:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    ea18:	00bffb44 	movi	r2,-19
    ea1c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    ea20:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    ea24:	d1600804 	addi	r5,gp,-32736
    ea28:	e13ffd17 	ldw	r4,-12(fp)
    ea2c:	000ed100 	call	ed10 <alt_find_dev>
    ea30:	e0bff815 	stw	r2,-32(fp)
    ea34:	e0bff817 	ldw	r2,-32(fp)
    ea38:	1000051e 	bne	r2,zero,ea50 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    ea3c:	e13ffd17 	ldw	r4,-12(fp)
    ea40:	000eda00 	call	eda0 <alt_find_file>
    ea44:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    ea48:	00800044 	movi	r2,1
    ea4c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    ea50:	e0bff817 	ldw	r2,-32(fp)
    ea54:	10002926 	beq	r2,zero,eafc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    ea58:	e13ff817 	ldw	r4,-32(fp)
    ea5c:	000eea80 	call	eea8 <alt_get_fd>
    ea60:	e0bff915 	stw	r2,-28(fp)
    ea64:	e0bff917 	ldw	r2,-28(fp)
    ea68:	1000030e 	bge	r2,zero,ea78 <open+0x84>
    {
      status = index;
    ea6c:	e0bff917 	ldw	r2,-28(fp)
    ea70:	e0bffa15 	stw	r2,-24(fp)
    ea74:	00002306 	br	eb04 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    ea78:	e0bff917 	ldw	r2,-28(fp)
    ea7c:	10c00324 	muli	r3,r2,12
    ea80:	00800074 	movhi	r2,1
    ea84:	10803004 	addi	r2,r2,192
    ea88:	1885883a 	add	r2,r3,r2
    ea8c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    ea90:	e0fffe17 	ldw	r3,-8(fp)
    ea94:	00900034 	movhi	r2,16384
    ea98:	10bfffc4 	addi	r2,r2,-1
    ea9c:	1886703a 	and	r3,r3,r2
    eaa0:	e0bffc17 	ldw	r2,-16(fp)
    eaa4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    eaa8:	e0bffb17 	ldw	r2,-20(fp)
    eaac:	1000051e 	bne	r2,zero,eac4 <open+0xd0>
    eab0:	e13ffc17 	ldw	r4,-16(fp)
    eab4:	000e9300 	call	e930 <alt_file_locked>
    eab8:	e0bffa15 	stw	r2,-24(fp)
    eabc:	e0bffa17 	ldw	r2,-24(fp)
    eac0:	10001016 	blt	r2,zero,eb04 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    eac4:	e0bff817 	ldw	r2,-32(fp)
    eac8:	10800317 	ldw	r2,12(r2)
    eacc:	10000826 	beq	r2,zero,eaf0 <open+0xfc>
    ead0:	e0bff817 	ldw	r2,-32(fp)
    ead4:	10800317 	ldw	r2,12(r2)
    ead8:	e1ffff17 	ldw	r7,-4(fp)
    eadc:	e1bffe17 	ldw	r6,-8(fp)
    eae0:	e17ffd17 	ldw	r5,-12(fp)
    eae4:	e13ffc17 	ldw	r4,-16(fp)
    eae8:	103ee83a 	callr	r2
    eaec:	00000106 	br	eaf4 <open+0x100>
    eaf0:	0005883a 	mov	r2,zero
    eaf4:	e0bffa15 	stw	r2,-24(fp)
    eaf8:	00000206 	br	eb04 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    eafc:	00bffb44 	movi	r2,-19
    eb00:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    eb04:	e0bffa17 	ldw	r2,-24(fp)
    eb08:	1000090e 	bge	r2,zero,eb30 <open+0x13c>
  {
    alt_release_fd (index);  
    eb0c:	e13ff917 	ldw	r4,-28(fp)
    eb10:	000d4680 	call	d468 <alt_release_fd>
    ALT_ERRNO = -status;
    eb14:	000e8f40 	call	e8f4 <alt_get_errno>
    eb18:	1007883a 	mov	r3,r2
    eb1c:	e0bffa17 	ldw	r2,-24(fp)
    eb20:	0085c83a 	sub	r2,zero,r2
    eb24:	18800015 	stw	r2,0(r3)
    return -1;
    eb28:	00bfffc4 	movi	r2,-1
    eb2c:	00000106 	br	eb34 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    eb30:	e0bff917 	ldw	r2,-28(fp)
}
    eb34:	e037883a 	mov	sp,fp
    eb38:	dfc00117 	ldw	ra,4(sp)
    eb3c:	df000017 	ldw	fp,0(sp)
    eb40:	dec00204 	addi	sp,sp,8
    eb44:	f800283a 	ret

0000eb48 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    eb48:	defffa04 	addi	sp,sp,-24
    eb4c:	df000515 	stw	fp,20(sp)
    eb50:	df000504 	addi	fp,sp,20
    eb54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb58:	0005303a 	rdctl	r2,status
    eb5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb60:	e0fffc17 	ldw	r3,-16(fp)
    eb64:	00bfff84 	movi	r2,-2
    eb68:	1884703a 	and	r2,r3,r2
    eb6c:	1001703a 	wrctl	status,r2
  
  return context;
    eb70:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    eb74:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    eb78:	e0bfff17 	ldw	r2,-4(fp)
    eb7c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    eb80:	e0bffd17 	ldw	r2,-12(fp)
    eb84:	10800017 	ldw	r2,0(r2)
    eb88:	e0fffd17 	ldw	r3,-12(fp)
    eb8c:	18c00117 	ldw	r3,4(r3)
    eb90:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    eb94:	e0bffd17 	ldw	r2,-12(fp)
    eb98:	10800117 	ldw	r2,4(r2)
    eb9c:	e0fffd17 	ldw	r3,-12(fp)
    eba0:	18c00017 	ldw	r3,0(r3)
    eba4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    eba8:	e0bffd17 	ldw	r2,-12(fp)
    ebac:	e0fffd17 	ldw	r3,-12(fp)
    ebb0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    ebb4:	e0bffd17 	ldw	r2,-12(fp)
    ebb8:	e0fffd17 	ldw	r3,-12(fp)
    ebbc:	10c00015 	stw	r3,0(r2)
    ebc0:	e0bffb17 	ldw	r2,-20(fp)
    ebc4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ebc8:	e0bffe17 	ldw	r2,-8(fp)
    ebcc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    ebd0:	0001883a 	nop
    ebd4:	e037883a 	mov	sp,fp
    ebd8:	df000017 	ldw	fp,0(sp)
    ebdc:	dec00104 	addi	sp,sp,4
    ebe0:	f800283a 	ret

0000ebe4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ebe4:	defffb04 	addi	sp,sp,-20
    ebe8:	dfc00415 	stw	ra,16(sp)
    ebec:	df000315 	stw	fp,12(sp)
    ebf0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    ebf4:	d0a00e17 	ldw	r2,-32712(gp)
    ebf8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    ebfc:	d0a6d717 	ldw	r2,-25764(gp)
    ec00:	10800044 	addi	r2,r2,1
    ec04:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ec08:	00002e06 	br	ecc4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    ec0c:	e0bffd17 	ldw	r2,-12(fp)
    ec10:	10800017 	ldw	r2,0(r2)
    ec14:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    ec18:	e0bffd17 	ldw	r2,-12(fp)
    ec1c:	10800403 	ldbu	r2,16(r2)
    ec20:	10803fcc 	andi	r2,r2,255
    ec24:	10000426 	beq	r2,zero,ec38 <alt_tick+0x54>
    ec28:	d0a6d717 	ldw	r2,-25764(gp)
    ec2c:	1000021e 	bne	r2,zero,ec38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    ec30:	e0bffd17 	ldw	r2,-12(fp)
    ec34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    ec38:	e0bffd17 	ldw	r2,-12(fp)
    ec3c:	10800217 	ldw	r2,8(r2)
    ec40:	d0e6d717 	ldw	r3,-25764(gp)
    ec44:	18801d36 	bltu	r3,r2,ecbc <alt_tick+0xd8>
    ec48:	e0bffd17 	ldw	r2,-12(fp)
    ec4c:	10800403 	ldbu	r2,16(r2)
    ec50:	10803fcc 	andi	r2,r2,255
    ec54:	1000191e 	bne	r2,zero,ecbc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    ec58:	e0bffd17 	ldw	r2,-12(fp)
    ec5c:	10800317 	ldw	r2,12(r2)
    ec60:	e0fffd17 	ldw	r3,-12(fp)
    ec64:	18c00517 	ldw	r3,20(r3)
    ec68:	1809883a 	mov	r4,r3
    ec6c:	103ee83a 	callr	r2
    ec70:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    ec74:	e0bfff17 	ldw	r2,-4(fp)
    ec78:	1000031e 	bne	r2,zero,ec88 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    ec7c:	e13ffd17 	ldw	r4,-12(fp)
    ec80:	000eb480 	call	eb48 <alt_alarm_stop>
    ec84:	00000d06 	br	ecbc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    ec88:	e0bffd17 	ldw	r2,-12(fp)
    ec8c:	10c00217 	ldw	r3,8(r2)
    ec90:	e0bfff17 	ldw	r2,-4(fp)
    ec94:	1887883a 	add	r3,r3,r2
    ec98:	e0bffd17 	ldw	r2,-12(fp)
    ec9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    eca0:	e0bffd17 	ldw	r2,-12(fp)
    eca4:	10c00217 	ldw	r3,8(r2)
    eca8:	d0a6d717 	ldw	r2,-25764(gp)
    ecac:	1880032e 	bgeu	r3,r2,ecbc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    ecb0:	e0bffd17 	ldw	r2,-12(fp)
    ecb4:	00c00044 	movi	r3,1
    ecb8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    ecbc:	e0bffe17 	ldw	r2,-8(fp)
    ecc0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ecc4:	e0fffd17 	ldw	r3,-12(fp)
    ecc8:	d0a00e04 	addi	r2,gp,-32712
    eccc:	18bfcf1e 	bne	r3,r2,ec0c <__alt_data_end+0xfffeec0c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    ecd0:	0001883a 	nop
}
    ecd4:	0001883a 	nop
    ecd8:	e037883a 	mov	sp,fp
    ecdc:	dfc00117 	ldw	ra,4(sp)
    ece0:	df000017 	ldw	fp,0(sp)
    ece4:	dec00204 	addi	sp,sp,8
    ece8:	f800283a 	ret

0000ecec <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    ecec:	deffff04 	addi	sp,sp,-4
    ecf0:	df000015 	stw	fp,0(sp)
    ecf4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    ecf8:	000170fa 	wrctl	ienable,zero
}
    ecfc:	0001883a 	nop
    ed00:	e037883a 	mov	sp,fp
    ed04:	df000017 	ldw	fp,0(sp)
    ed08:	dec00104 	addi	sp,sp,4
    ed0c:	f800283a 	ret

0000ed10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    ed10:	defffa04 	addi	sp,sp,-24
    ed14:	dfc00515 	stw	ra,20(sp)
    ed18:	df000415 	stw	fp,16(sp)
    ed1c:	df000404 	addi	fp,sp,16
    ed20:	e13ffe15 	stw	r4,-8(fp)
    ed24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    ed28:	e0bfff17 	ldw	r2,-4(fp)
    ed2c:	10800017 	ldw	r2,0(r2)
    ed30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    ed34:	e13ffe17 	ldw	r4,-8(fp)
    ed38:	00007400 	call	740 <strlen>
    ed3c:	10800044 	addi	r2,r2,1
    ed40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ed44:	00000d06 	br	ed7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ed48:	e0bffc17 	ldw	r2,-16(fp)
    ed4c:	10800217 	ldw	r2,8(r2)
    ed50:	e0fffd17 	ldw	r3,-12(fp)
    ed54:	180d883a 	mov	r6,r3
    ed58:	e17ffe17 	ldw	r5,-8(fp)
    ed5c:	1009883a 	mov	r4,r2
    ed60:	000f0280 	call	f028 <memcmp>
    ed64:	1000021e 	bne	r2,zero,ed70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ed68:	e0bffc17 	ldw	r2,-16(fp)
    ed6c:	00000706 	br	ed8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    ed70:	e0bffc17 	ldw	r2,-16(fp)
    ed74:	10800017 	ldw	r2,0(r2)
    ed78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ed7c:	e0fffc17 	ldw	r3,-16(fp)
    ed80:	e0bfff17 	ldw	r2,-4(fp)
    ed84:	18bff01e 	bne	r3,r2,ed48 <__alt_data_end+0xfffeed48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    ed88:	0005883a 	mov	r2,zero
}
    ed8c:	e037883a 	mov	sp,fp
    ed90:	dfc00117 	ldw	ra,4(sp)
    ed94:	df000017 	ldw	fp,0(sp)
    ed98:	dec00204 	addi	sp,sp,8
    ed9c:	f800283a 	ret

0000eda0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    eda0:	defffb04 	addi	sp,sp,-20
    eda4:	dfc00415 	stw	ra,16(sp)
    eda8:	df000315 	stw	fp,12(sp)
    edac:	df000304 	addi	fp,sp,12
    edb0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    edb4:	d0a00617 	ldw	r2,-32744(gp)
    edb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    edbc:	00003106 	br	ee84 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    edc0:	e0bffd17 	ldw	r2,-12(fp)
    edc4:	10800217 	ldw	r2,8(r2)
    edc8:	1009883a 	mov	r4,r2
    edcc:	00007400 	call	740 <strlen>
    edd0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    edd4:	e0bffd17 	ldw	r2,-12(fp)
    edd8:	10c00217 	ldw	r3,8(r2)
    eddc:	e0bffe17 	ldw	r2,-8(fp)
    ede0:	10bfffc4 	addi	r2,r2,-1
    ede4:	1885883a 	add	r2,r3,r2
    ede8:	10800003 	ldbu	r2,0(r2)
    edec:	10803fcc 	andi	r2,r2,255
    edf0:	1080201c 	xori	r2,r2,128
    edf4:	10bfe004 	addi	r2,r2,-128
    edf8:	10800bd8 	cmpnei	r2,r2,47
    edfc:	1000031e 	bne	r2,zero,ee0c <alt_find_file+0x6c>
    {
      len -= 1;
    ee00:	e0bffe17 	ldw	r2,-8(fp)
    ee04:	10bfffc4 	addi	r2,r2,-1
    ee08:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ee0c:	e0bffe17 	ldw	r2,-8(fp)
    ee10:	e0ffff17 	ldw	r3,-4(fp)
    ee14:	1885883a 	add	r2,r3,r2
    ee18:	10800003 	ldbu	r2,0(r2)
    ee1c:	10803fcc 	andi	r2,r2,255
    ee20:	1080201c 	xori	r2,r2,128
    ee24:	10bfe004 	addi	r2,r2,-128
    ee28:	10800be0 	cmpeqi	r2,r2,47
    ee2c:	1000081e 	bne	r2,zero,ee50 <alt_find_file+0xb0>
    ee30:	e0bffe17 	ldw	r2,-8(fp)
    ee34:	e0ffff17 	ldw	r3,-4(fp)
    ee38:	1885883a 	add	r2,r3,r2
    ee3c:	10800003 	ldbu	r2,0(r2)
    ee40:	10803fcc 	andi	r2,r2,255
    ee44:	1080201c 	xori	r2,r2,128
    ee48:	10bfe004 	addi	r2,r2,-128
    ee4c:	10000a1e 	bne	r2,zero,ee78 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    ee50:	e0bffd17 	ldw	r2,-12(fp)
    ee54:	10800217 	ldw	r2,8(r2)
    ee58:	e0fffe17 	ldw	r3,-8(fp)
    ee5c:	180d883a 	mov	r6,r3
    ee60:	e17fff17 	ldw	r5,-4(fp)
    ee64:	1009883a 	mov	r4,r2
    ee68:	000f0280 	call	f028 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ee6c:	1000021e 	bne	r2,zero,ee78 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    ee70:	e0bffd17 	ldw	r2,-12(fp)
    ee74:	00000706 	br	ee94 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    ee78:	e0bffd17 	ldw	r2,-12(fp)
    ee7c:	10800017 	ldw	r2,0(r2)
    ee80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ee84:	e0fffd17 	ldw	r3,-12(fp)
    ee88:	d0a00604 	addi	r2,gp,-32744
    ee8c:	18bfcc1e 	bne	r3,r2,edc0 <__alt_data_end+0xfffeedc0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    ee90:	0005883a 	mov	r2,zero
}
    ee94:	e037883a 	mov	sp,fp
    ee98:	dfc00117 	ldw	ra,4(sp)
    ee9c:	df000017 	ldw	fp,0(sp)
    eea0:	dec00204 	addi	sp,sp,8
    eea4:	f800283a 	ret

0000eea8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    eea8:	defffc04 	addi	sp,sp,-16
    eeac:	df000315 	stw	fp,12(sp)
    eeb0:	df000304 	addi	fp,sp,12
    eeb4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    eeb8:	00bffa04 	movi	r2,-24
    eebc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    eec0:	e03ffd15 	stw	zero,-12(fp)
    eec4:	00001906 	br	ef2c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    eec8:	00800074 	movhi	r2,1
    eecc:	10803004 	addi	r2,r2,192
    eed0:	e0fffd17 	ldw	r3,-12(fp)
    eed4:	18c00324 	muli	r3,r3,12
    eed8:	10c5883a 	add	r2,r2,r3
    eedc:	10800017 	ldw	r2,0(r2)
    eee0:	10000f1e 	bne	r2,zero,ef20 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    eee4:	00800074 	movhi	r2,1
    eee8:	10803004 	addi	r2,r2,192
    eeec:	e0fffd17 	ldw	r3,-12(fp)
    eef0:	18c00324 	muli	r3,r3,12
    eef4:	10c5883a 	add	r2,r2,r3
    eef8:	e0ffff17 	ldw	r3,-4(fp)
    eefc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    ef00:	d0e00a17 	ldw	r3,-32728(gp)
    ef04:	e0bffd17 	ldw	r2,-12(fp)
    ef08:	1880020e 	bge	r3,r2,ef14 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    ef0c:	e0bffd17 	ldw	r2,-12(fp)
    ef10:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    ef14:	e0bffd17 	ldw	r2,-12(fp)
    ef18:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    ef1c:	00000606 	br	ef38 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ef20:	e0bffd17 	ldw	r2,-12(fp)
    ef24:	10800044 	addi	r2,r2,1
    ef28:	e0bffd15 	stw	r2,-12(fp)
    ef2c:	e0bffd17 	ldw	r2,-12(fp)
    ef30:	10800810 	cmplti	r2,r2,32
    ef34:	103fe41e 	bne	r2,zero,eec8 <__alt_data_end+0xfffeeec8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    ef38:	e0bffe17 	ldw	r2,-8(fp)
}
    ef3c:	e037883a 	mov	sp,fp
    ef40:	df000017 	ldw	fp,0(sp)
    ef44:	dec00104 	addi	sp,sp,4
    ef48:	f800283a 	ret

0000ef4c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    ef4c:	defffb04 	addi	sp,sp,-20
    ef50:	df000415 	stw	fp,16(sp)
    ef54:	df000404 	addi	fp,sp,16
    ef58:	e13ffe15 	stw	r4,-8(fp)
    ef5c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    ef60:	e0bfff17 	ldw	r2,-4(fp)
    ef64:	10840070 	cmpltui	r2,r2,4097
    ef68:	1000021e 	bne	r2,zero,ef74 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    ef6c:	00840004 	movi	r2,4096
    ef70:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    ef74:	e0fffe17 	ldw	r3,-8(fp)
    ef78:	e0bfff17 	ldw	r2,-4(fp)
    ef7c:	1885883a 	add	r2,r3,r2
    ef80:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ef84:	e0bffe17 	ldw	r2,-8(fp)
    ef88:	e0bffc15 	stw	r2,-16(fp)
    ef8c:	00000506 	br	efa4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    ef90:	e0bffc17 	ldw	r2,-16(fp)
    ef94:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    ef98:	e0bffc17 	ldw	r2,-16(fp)
    ef9c:	10800804 	addi	r2,r2,32
    efa0:	e0bffc15 	stw	r2,-16(fp)
    efa4:	e0fffc17 	ldw	r3,-16(fp)
    efa8:	e0bffd17 	ldw	r2,-12(fp)
    efac:	18bff836 	bltu	r3,r2,ef90 <__alt_data_end+0xfffeef90>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    efb0:	e0bffe17 	ldw	r2,-8(fp)
    efb4:	108007cc 	andi	r2,r2,31
    efb8:	10000226 	beq	r2,zero,efc4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    efbc:	e0bffc17 	ldw	r2,-16(fp)
    efc0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    efc4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    efc8:	0001883a 	nop
    efcc:	e037883a 	mov	sp,fp
    efd0:	df000017 	ldw	fp,0(sp)
    efd4:	dec00104 	addi	sp,sp,4
    efd8:	f800283a 	ret

0000efdc <atexit>:
    efdc:	200b883a 	mov	r5,r4
    efe0:	000f883a 	mov	r7,zero
    efe4:	000d883a 	mov	r6,zero
    efe8:	0009883a 	mov	r4,zero
    efec:	000f0a41 	jmpi	f0a4 <__register_exitproc>

0000eff0 <exit>:
    eff0:	defffe04 	addi	sp,sp,-8
    eff4:	000b883a 	mov	r5,zero
    eff8:	dc000015 	stw	r16,0(sp)
    effc:	dfc00115 	stw	ra,4(sp)
    f000:	2021883a 	mov	r16,r4
    f004:	000f1bc0 	call	f1bc <__call_exitprocs>
    f008:	00800074 	movhi	r2,1
    f00c:	1084a804 	addi	r2,r2,4768
    f010:	11000017 	ldw	r4,0(r2)
    f014:	20800f17 	ldw	r2,60(r4)
    f018:	10000126 	beq	r2,zero,f020 <exit+0x30>
    f01c:	103ee83a 	callr	r2
    f020:	8009883a 	mov	r4,r16
    f024:	000f33c0 	call	f33c <_exit>

0000f028 <memcmp>:
    f028:	01c000c4 	movi	r7,3
    f02c:	3980192e 	bgeu	r7,r6,f094 <memcmp+0x6c>
    f030:	2144b03a 	or	r2,r4,r5
    f034:	11c4703a 	and	r2,r2,r7
    f038:	10000f26 	beq	r2,zero,f078 <memcmp+0x50>
    f03c:	20800003 	ldbu	r2,0(r4)
    f040:	28c00003 	ldbu	r3,0(r5)
    f044:	10c0151e 	bne	r2,r3,f09c <memcmp+0x74>
    f048:	31bfff84 	addi	r6,r6,-2
    f04c:	01ffffc4 	movi	r7,-1
    f050:	00000406 	br	f064 <memcmp+0x3c>
    f054:	20800003 	ldbu	r2,0(r4)
    f058:	28c00003 	ldbu	r3,0(r5)
    f05c:	31bfffc4 	addi	r6,r6,-1
    f060:	10c00e1e 	bne	r2,r3,f09c <memcmp+0x74>
    f064:	21000044 	addi	r4,r4,1
    f068:	29400044 	addi	r5,r5,1
    f06c:	31fff91e 	bne	r6,r7,f054 <__alt_data_end+0xfffef054>
    f070:	0005883a 	mov	r2,zero
    f074:	f800283a 	ret
    f078:	20c00017 	ldw	r3,0(r4)
    f07c:	28800017 	ldw	r2,0(r5)
    f080:	18bfee1e 	bne	r3,r2,f03c <__alt_data_end+0xfffef03c>
    f084:	31bfff04 	addi	r6,r6,-4
    f088:	21000104 	addi	r4,r4,4
    f08c:	29400104 	addi	r5,r5,4
    f090:	39bff936 	bltu	r7,r6,f078 <__alt_data_end+0xfffef078>
    f094:	303fe91e 	bne	r6,zero,f03c <__alt_data_end+0xfffef03c>
    f098:	003ff506 	br	f070 <__alt_data_end+0xfffef070>
    f09c:	10c5c83a 	sub	r2,r2,r3
    f0a0:	f800283a 	ret

0000f0a4 <__register_exitproc>:
    f0a4:	defffa04 	addi	sp,sp,-24
    f0a8:	dc000315 	stw	r16,12(sp)
    f0ac:	04000074 	movhi	r16,1
    f0b0:	8404a804 	addi	r16,r16,4768
    f0b4:	80c00017 	ldw	r3,0(r16)
    f0b8:	dc400415 	stw	r17,16(sp)
    f0bc:	dfc00515 	stw	ra,20(sp)
    f0c0:	18805217 	ldw	r2,328(r3)
    f0c4:	2023883a 	mov	r17,r4
    f0c8:	10003726 	beq	r2,zero,f1a8 <__register_exitproc+0x104>
    f0cc:	10c00117 	ldw	r3,4(r2)
    f0d0:	010007c4 	movi	r4,31
    f0d4:	20c00e16 	blt	r4,r3,f110 <__register_exitproc+0x6c>
    f0d8:	1a000044 	addi	r8,r3,1
    f0dc:	8800221e 	bne	r17,zero,f168 <__register_exitproc+0xc4>
    f0e0:	18c00084 	addi	r3,r3,2
    f0e4:	18c7883a 	add	r3,r3,r3
    f0e8:	18c7883a 	add	r3,r3,r3
    f0ec:	12000115 	stw	r8,4(r2)
    f0f0:	10c7883a 	add	r3,r2,r3
    f0f4:	19400015 	stw	r5,0(r3)
    f0f8:	0005883a 	mov	r2,zero
    f0fc:	dfc00517 	ldw	ra,20(sp)
    f100:	dc400417 	ldw	r17,16(sp)
    f104:	dc000317 	ldw	r16,12(sp)
    f108:	dec00604 	addi	sp,sp,24
    f10c:	f800283a 	ret
    f110:	00800034 	movhi	r2,0
    f114:	10800004 	addi	r2,r2,0
    f118:	10002626 	beq	r2,zero,f1b4 <__register_exitproc+0x110>
    f11c:	01006404 	movi	r4,400
    f120:	d9400015 	stw	r5,0(sp)
    f124:	d9800115 	stw	r6,4(sp)
    f128:	d9c00215 	stw	r7,8(sp)
    f12c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    f130:	d9400017 	ldw	r5,0(sp)
    f134:	d9800117 	ldw	r6,4(sp)
    f138:	d9c00217 	ldw	r7,8(sp)
    f13c:	10001d26 	beq	r2,zero,f1b4 <__register_exitproc+0x110>
    f140:	81000017 	ldw	r4,0(r16)
    f144:	10000115 	stw	zero,4(r2)
    f148:	02000044 	movi	r8,1
    f14c:	22405217 	ldw	r9,328(r4)
    f150:	0007883a 	mov	r3,zero
    f154:	12400015 	stw	r9,0(r2)
    f158:	20805215 	stw	r2,328(r4)
    f15c:	10006215 	stw	zero,392(r2)
    f160:	10006315 	stw	zero,396(r2)
    f164:	883fde26 	beq	r17,zero,f0e0 <__alt_data_end+0xfffef0e0>
    f168:	18c9883a 	add	r4,r3,r3
    f16c:	2109883a 	add	r4,r4,r4
    f170:	1109883a 	add	r4,r2,r4
    f174:	21802215 	stw	r6,136(r4)
    f178:	01800044 	movi	r6,1
    f17c:	12406217 	ldw	r9,392(r2)
    f180:	30cc983a 	sll	r6,r6,r3
    f184:	4992b03a 	or	r9,r9,r6
    f188:	12406215 	stw	r9,392(r2)
    f18c:	21c04215 	stw	r7,264(r4)
    f190:	01000084 	movi	r4,2
    f194:	893fd21e 	bne	r17,r4,f0e0 <__alt_data_end+0xfffef0e0>
    f198:	11006317 	ldw	r4,396(r2)
    f19c:	218cb03a 	or	r6,r4,r6
    f1a0:	11806315 	stw	r6,396(r2)
    f1a4:	003fce06 	br	f0e0 <__alt_data_end+0xfffef0e0>
    f1a8:	18805304 	addi	r2,r3,332
    f1ac:	18805215 	stw	r2,328(r3)
    f1b0:	003fc606 	br	f0cc <__alt_data_end+0xfffef0cc>
    f1b4:	00bfffc4 	movi	r2,-1
    f1b8:	003fd006 	br	f0fc <__alt_data_end+0xfffef0fc>

0000f1bc <__call_exitprocs>:
    f1bc:	defff504 	addi	sp,sp,-44
    f1c0:	df000915 	stw	fp,36(sp)
    f1c4:	dd400615 	stw	r21,24(sp)
    f1c8:	dc800315 	stw	r18,12(sp)
    f1cc:	dfc00a15 	stw	ra,40(sp)
    f1d0:	ddc00815 	stw	r23,32(sp)
    f1d4:	dd800715 	stw	r22,28(sp)
    f1d8:	dd000515 	stw	r20,20(sp)
    f1dc:	dcc00415 	stw	r19,16(sp)
    f1e0:	dc400215 	stw	r17,8(sp)
    f1e4:	dc000115 	stw	r16,4(sp)
    f1e8:	d9000015 	stw	r4,0(sp)
    f1ec:	2839883a 	mov	fp,r5
    f1f0:	04800044 	movi	r18,1
    f1f4:	057fffc4 	movi	r21,-1
    f1f8:	00800074 	movhi	r2,1
    f1fc:	1084a804 	addi	r2,r2,4768
    f200:	12000017 	ldw	r8,0(r2)
    f204:	45005217 	ldw	r20,328(r8)
    f208:	44c05204 	addi	r19,r8,328
    f20c:	a0001c26 	beq	r20,zero,f280 <__call_exitprocs+0xc4>
    f210:	a0800117 	ldw	r2,4(r20)
    f214:	15ffffc4 	addi	r23,r2,-1
    f218:	b8000d16 	blt	r23,zero,f250 <__call_exitprocs+0x94>
    f21c:	14000044 	addi	r16,r2,1
    f220:	8421883a 	add	r16,r16,r16
    f224:	8421883a 	add	r16,r16,r16
    f228:	84402004 	addi	r17,r16,128
    f22c:	a463883a 	add	r17,r20,r17
    f230:	a421883a 	add	r16,r20,r16
    f234:	e0001e26 	beq	fp,zero,f2b0 <__call_exitprocs+0xf4>
    f238:	80804017 	ldw	r2,256(r16)
    f23c:	e0801c26 	beq	fp,r2,f2b0 <__call_exitprocs+0xf4>
    f240:	bdffffc4 	addi	r23,r23,-1
    f244:	843fff04 	addi	r16,r16,-4
    f248:	8c7fff04 	addi	r17,r17,-4
    f24c:	bd7ff91e 	bne	r23,r21,f234 <__alt_data_end+0xfffef234>
    f250:	00800034 	movhi	r2,0
    f254:	10800004 	addi	r2,r2,0
    f258:	10000926 	beq	r2,zero,f280 <__call_exitprocs+0xc4>
    f25c:	a0800117 	ldw	r2,4(r20)
    f260:	1000301e 	bne	r2,zero,f324 <__call_exitprocs+0x168>
    f264:	a0800017 	ldw	r2,0(r20)
    f268:	10003226 	beq	r2,zero,f334 <__call_exitprocs+0x178>
    f26c:	a009883a 	mov	r4,r20
    f270:	98800015 	stw	r2,0(r19)
    f274:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    f278:	9d000017 	ldw	r20,0(r19)
    f27c:	a03fe41e 	bne	r20,zero,f210 <__alt_data_end+0xfffef210>
    f280:	dfc00a17 	ldw	ra,40(sp)
    f284:	df000917 	ldw	fp,36(sp)
    f288:	ddc00817 	ldw	r23,32(sp)
    f28c:	dd800717 	ldw	r22,28(sp)
    f290:	dd400617 	ldw	r21,24(sp)
    f294:	dd000517 	ldw	r20,20(sp)
    f298:	dcc00417 	ldw	r19,16(sp)
    f29c:	dc800317 	ldw	r18,12(sp)
    f2a0:	dc400217 	ldw	r17,8(sp)
    f2a4:	dc000117 	ldw	r16,4(sp)
    f2a8:	dec00b04 	addi	sp,sp,44
    f2ac:	f800283a 	ret
    f2b0:	a0800117 	ldw	r2,4(r20)
    f2b4:	80c00017 	ldw	r3,0(r16)
    f2b8:	10bfffc4 	addi	r2,r2,-1
    f2bc:	15c01426 	beq	r2,r23,f310 <__call_exitprocs+0x154>
    f2c0:	80000015 	stw	zero,0(r16)
    f2c4:	183fde26 	beq	r3,zero,f240 <__alt_data_end+0xfffef240>
    f2c8:	95c8983a 	sll	r4,r18,r23
    f2cc:	a0806217 	ldw	r2,392(r20)
    f2d0:	a5800117 	ldw	r22,4(r20)
    f2d4:	2084703a 	and	r2,r4,r2
    f2d8:	10000b26 	beq	r2,zero,f308 <__call_exitprocs+0x14c>
    f2dc:	a0806317 	ldw	r2,396(r20)
    f2e0:	2088703a 	and	r4,r4,r2
    f2e4:	20000c1e 	bne	r4,zero,f318 <__call_exitprocs+0x15c>
    f2e8:	89400017 	ldw	r5,0(r17)
    f2ec:	d9000017 	ldw	r4,0(sp)
    f2f0:	183ee83a 	callr	r3
    f2f4:	a0800117 	ldw	r2,4(r20)
    f2f8:	15bfbf1e 	bne	r2,r22,f1f8 <__alt_data_end+0xfffef1f8>
    f2fc:	98800017 	ldw	r2,0(r19)
    f300:	153fcf26 	beq	r2,r20,f240 <__alt_data_end+0xfffef240>
    f304:	003fbc06 	br	f1f8 <__alt_data_end+0xfffef1f8>
    f308:	183ee83a 	callr	r3
    f30c:	003ff906 	br	f2f4 <__alt_data_end+0xfffef2f4>
    f310:	a5c00115 	stw	r23,4(r20)
    f314:	003feb06 	br	f2c4 <__alt_data_end+0xfffef2c4>
    f318:	89000017 	ldw	r4,0(r17)
    f31c:	183ee83a 	callr	r3
    f320:	003ff406 	br	f2f4 <__alt_data_end+0xfffef2f4>
    f324:	a0800017 	ldw	r2,0(r20)
    f328:	a027883a 	mov	r19,r20
    f32c:	1029883a 	mov	r20,r2
    f330:	003fb606 	br	f20c <__alt_data_end+0xfffef20c>
    f334:	0005883a 	mov	r2,zero
    f338:	003ffb06 	br	f328 <__alt_data_end+0xfffef328>

0000f33c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f33c:	defffd04 	addi	sp,sp,-12
    f340:	df000215 	stw	fp,8(sp)
    f344:	df000204 	addi	fp,sp,8
    f348:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f34c:	0001883a 	nop
    f350:	e0bfff17 	ldw	r2,-4(fp)
    f354:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f358:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f35c:	10000226 	beq	r2,zero,f368 <_exit+0x2c>
    ALT_SIM_FAIL();
    f360:	002af070 	cmpltui	zero,zero,43969
    f364:	00000106 	br	f36c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    f368:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f36c:	003fff06 	br	f36c <__alt_data_end+0xfffef36c>
